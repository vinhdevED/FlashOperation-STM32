
FLASH OPERATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005060  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08005170  08005170  00015170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005580  08005580  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005580  08005580  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005580  08005580  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001d4  0800575c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800575c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000336b  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000131c  00000000  00000000  000235ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000528  00000000  00000000  000248c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003af  00000000  00000000  00024df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174fe  00000000  00000000  0002519f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000062a7  00000000  00000000  0003c69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081477  00000000  00000000  00042944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025bc  00000000  00000000  000c3dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c6378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005158 	.word	0x08005158

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005158 	.word	0x08005158

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2lz>:
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	460c      	mov	r4, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2300      	movs	r3, #0
 8000b22:	4628      	mov	r0, r5
 8000b24:	4621      	mov	r1, r4
 8000b26:	f7ff ff49 	bl	80009bc <__aeabi_dcmplt>
 8000b2a:	b928      	cbnz	r0, 8000b38 <__aeabi_d2lz+0x20>
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	4621      	mov	r1, r4
 8000b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b34:	f000 b80a 	b.w	8000b4c <__aeabi_d2ulz>
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b3e:	f000 f805 	bl	8000b4c <__aeabi_d2ulz>
 8000b42:	4240      	negs	r0, r0
 8000b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b48:	bd38      	pop	{r3, r4, r5, pc}
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2ulz>:
 8000b4c:	b5d0      	push	{r4, r6, r7, lr}
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <__aeabi_d2ulz+0x34>)
 8000b52:	4606      	mov	r6, r0
 8000b54:	460f      	mov	r7, r1
 8000b56:	f7ff fcbf 	bl	80004d8 <__aeabi_dmul>
 8000b5a:	f7ff ff6d 	bl	8000a38 <__aeabi_d2uiz>
 8000b5e:	4604      	mov	r4, r0
 8000b60:	f7ff fc40 	bl	80003e4 <__aeabi_ui2d>
 8000b64:	2200      	movs	r2, #0
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <__aeabi_d2ulz+0x38>)
 8000b68:	f7ff fcb6 	bl	80004d8 <__aeabi_dmul>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	460b      	mov	r3, r1
 8000b70:	4630      	mov	r0, r6
 8000b72:	4639      	mov	r1, r7
 8000b74:	f7ff faf8 	bl	8000168 <__aeabi_dsub>
 8000b78:	f7ff ff5e 	bl	8000a38 <__aeabi_d2uiz>
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000b80:	3df00000 	.word	0x3df00000
 8000b84:	41f00000 	.word	0x41f00000

08000b88 <deleteBuffer>:

#include <flash.h>

uint8_t lengthPage;

void deleteBuffer(char * data){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(data);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fadd 	bl	8000150 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i=0; i<len; i++){
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e007      	b.n	8000bb0 <deleteBuffer+0x28>
		data[i] = 0;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<len; i++){
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	3301      	adds	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3f3      	bcc.n	8000ba0 <deleteBuffer+0x18>
	}
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <Flash_Unlock>:

void Flash_Lock(){
	HAL_FLASH_Lock(); // Prevents writing data to writable partitions
}

void Flash_Unlock(){
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000bc6:	f000 fc4d 	bl	8001464 <HAL_FLASH_Unlock>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <Flash_Erase>:

void Flash_Erase(uint32_t addr){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	while(FLASH->SR & FLASH_SR_BSY); // Check Status Register BUSY when conducting delete, write or process
 8000bd8:	bf00      	nop
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <Flash_Erase+0x64>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f9      	bne.n	8000bda <Flash_Erase+0xa>

	FLASH->CR |= FLASH_CR_PER; //Set bit Page Erase Set and OR bitwise
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <Flash_Erase+0x64>)
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <Flash_Erase+0x64>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6113      	str	r3, [r2, #16]
	FLASH->AR = addr;  //Page Address to Address Register
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <Flash_Erase+0x64>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT; //Set bit Start Page Erase and OR bitwise
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <Flash_Erase+0x64>)
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <Flash_Erase+0x64>)
 8000bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c02:	6113      	str	r3, [r2, #16]

	while(FLASH->SR & FLASH_SR_BSY);
 8000c04:	bf00      	nop
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <Flash_Erase+0x64>)
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1f9      	bne.n	8000c06 <Flash_Erase+0x36>
	FLASH->CR &= ~FLASH_SR_BSY; // AND + NOR bitwise
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <Flash_Erase+0x64>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <Flash_Erase+0x64>)
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear and AND + NOR bitwise
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <Flash_Erase+0x64>)
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <Flash_Erase+0x64>)
 8000c24:	f023 0302 	bic.w	r3, r3, #2
 8000c28:	6113      	str	r3, [r2, #16]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40022000 	.word	0x40022000

08000c38 <Flash_ReadInt>:
	FLASH->CR &= ~FLASH_CR_PG; //Clear PG bit
	Flash_Lock();
}

uint16_t Flash_ReadInt(uint32_t addr)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint16_t* val = (uint16_t *)addr; // Cast type address from uint32_t
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
	return *val;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	881b      	ldrh	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
	...

08000c54 <Flash_WriteChar>:

void Flash_WriteChar(uint32_t addr, char* data){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 8000c5e:	f7ff ffb0 	bl	8000bc2 <Flash_Unlock>
	int i;
	FLASH->CR |= FLASH_CR_PG; //Set Program Bit
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <Flash_WriteChar+0x9c>)
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <Flash_WriteChar+0x9c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6113      	str	r3, [r2, #16]
	int var = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
	lengthPage = strlen(data);
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f7ff fa6c 	bl	8000150 <strlen>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <Flash_WriteChar+0xa0>)
 8000c7e:	701a      	strb	r2, [r3, #0]

	for(i=0; i<lengthPage; i+=1){
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	e016      	b.n	8000cb4 <Flash_WriteChar+0x60>
		while(FLASH->SR & FLASH_SR_BSY); // Waiting for FLASH not BUSY
 8000c86:	bf00      	nop
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <Flash_WriteChar+0x9c>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f9      	bne.n	8000c88 <Flash_WriteChar+0x34>
		var = (int)data[i]; //Convert  char to integer in ASCII
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	60bb      	str	r3, [r7, #8]
		*(__IO uint16_t*)(addr + i*2) = var;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	b292      	uxth	r2, r2
 8000cac:	801a      	strh	r2, [r3, #0]
	for(i=0; i<lengthPage; i+=1){
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <Flash_WriteChar+0xa0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	dbe2      	blt.n	8000c86 <Flash_WriteChar+0x32>
	}

	while((FLASH->SR&FLASH_SR_BSY)){}; //Waiting for completing write
 8000cc0:	bf00      	nop
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <Flash_WriteChar+0x9c>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f9      	bne.n	8000cc2 <Flash_WriteChar+0x6e>
	FLASH->CR &= ~FLASH_CR_PG; //Cancel Program Bit
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <Flash_WriteChar+0x9c>)
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <Flash_WriteChar+0x9c>)
 8000cd4:	f023 0301 	bic.w	r3, r3, #1
 8000cd8:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK; // Lock to avoid unwanted write data
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <Flash_WriteChar+0x9c>)
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <Flash_WriteChar+0x9c>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6113      	str	r3, [r2, #16]
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40022000 	.word	0x40022000
 8000cf4:	200001f0 	.word	0x200001f0

08000cf8 <Flash_ReadChar>:

void Flash_ReadChar(char* dataOut, uint32_t addr1, uint32_t addr2){
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
	int check =0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
	deleteBuffer(dataOut);
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff ff3d 	bl	8000b88 <deleteBuffer>
	if((unsigned char) Flash_ReadInt(addr2 + (uint32_t)2) == 225){
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3302      	adds	r3, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff90 	bl	8000c38 <Flash_ReadInt>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2be1      	cmp	r3, #225	; 0xe1
 8000d1e:	d107      	bne.n	8000d30 <Flash_ReadChar+0x38>
		 check = (unsigned char)Flash_ReadInt(addr2)-48;
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff89 	bl	8000c38 <Flash_ReadInt>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	3b30      	subs	r3, #48	; 0x30
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e015      	b.n	8000d5c <Flash_ReadChar+0x64>
	}else{
		 check = ((unsigned char)Flash_ReadInt(addr2)-48)*10 + (unsigned char)Flash_ReadInt(addr2+2)-48;
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff81 	bl	8000c38 <Flash_ReadInt>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	461c      	mov	r4, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff73 	bl	8000c38 <Flash_ReadInt>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4423      	add	r3, r4
 8000d58:	3b30      	subs	r3, #48	; 0x30
 8000d5a:	617b      	str	r3, [r7, #20]
	}
	for(int i=0;i<check;i++){
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	e011      	b.n	8000d86 <Flash_ReadChar+0x8e>
		dataOut[i] = Flash_ReadInt(addr1 + (uint32_t)(i*2));
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	461a      	mov	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff63 	bl	8000c38 <Flash_ReadInt>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4619      	mov	r1, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b2ca      	uxtb	r2, r1
 8000d7e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<check;i++){
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	3301      	adds	r3, #1
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dbe9      	blt.n	8000d62 <Flash_ReadChar+0x6a>

	}
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	371c      	adds	r7, #28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd90      	pop	{r4, r7, pc}

08000d98 <Flash_ProgramPage>:


void Flash_ProgramPage(char* dataIn, uint32_t addr1, uint32_t addr2){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	    //FLASH_Unlock
		Flash_Unlock();
 8000da4:	f7ff ff0d 	bl	8000bc2 <Flash_Unlock>
		//Flash_Erase Page
		Flash_Erase(addr1);
 8000da8:	68b8      	ldr	r0, [r7, #8]
 8000daa:	f7ff ff11 	bl	8000bd0 <Flash_Erase>
		//FLASH_Program HalfWord
		Flash_WriteChar(addr1,dataIn);
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	68b8      	ldr	r0, [r7, #8]
 8000db2:	f7ff ff4f 	bl	8000c54 <Flash_WriteChar>
		HAL_Delay(100);
 8000db6:	2064      	movs	r0, #100	; 0x64
 8000db8:	f000 fa4c 	bl	8001254 <HAL_Delay>
		char tempbuf[5] = {0};
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	753b      	strb	r3, [r7, #20]
		sprintf(tempbuf,"%d",lengthPage);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <Flash_ProgramPage+0x5c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	490a      	ldr	r1, [pc, #40]	; (8000df8 <Flash_ProgramPage+0x60>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fa1b 	bl	800220c <siprintf>
		//FLASH_Unlock
		Flash_Unlock();
 8000dd6:	f7ff fef4 	bl	8000bc2 <Flash_Unlock>
		//Flash_Erase Page
		Flash_Erase(addr2);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fef8 	bl	8000bd0 <Flash_Erase>
		//FLASH_Program HalfWord
		Flash_WriteChar(addr2,tempbuf);
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff34 	bl	8000c54 <Flash_WriteChar>
}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200001f0 	.word	0x200001f0
 8000df8:	08005170 	.word	0x08005170

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 f9c6 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f826 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f000 f860 	bl	8000ecc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Flash_ProgramPage("First data written to flash", DATA_START_ADDRESS, LENGTH_START_ADDRESS);
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <main+0x44>)
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <main+0x48>)
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <main+0x4c>)
 8000e12:	f7ff ffc1 	bl	8000d98 <Flash_ProgramPage>
  Flash_ReadChar(data, DATA_START_ADDRESS, LENGTH_START_ADDRESS);
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <main+0x44>)
 8000e18:	490a      	ldr	r1, [pc, #40]	; (8000e44 <main+0x48>)
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <main+0x50>)
 8000e1c:	f7ff ff6c 	bl	8000cf8 <Flash_ReadChar>
  HAL_Delay(2000);
 8000e20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e24:	f000 fa16 	bl	8001254 <HAL_Delay>
  Flash_ProgramPage("New data",DATA_START_ADDRESS,LENGTH_START_ADDRESS);
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <main+0x44>)
 8000e2a:	4906      	ldr	r1, [pc, #24]	; (8000e44 <main+0x48>)
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <main+0x54>)
 8000e2e:	f7ff ffb3 	bl	8000d98 <Flash_ProgramPage>
  Flash_ReadChar(data,DATA_START_ADDRESS,LENGTH_START_ADDRESS);
 8000e32:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <main+0x44>)
 8000e34:	4903      	ldr	r1, [pc, #12]	; (8000e44 <main+0x48>)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <main+0x50>)
 8000e38:	f7ff ff5e 	bl	8000cf8 <Flash_ReadChar>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <main+0x40>
 8000e3e:	bf00      	nop
 8000e40:	0801f810 	.word	0x0801f810
 8000e44:	0801fc00 	.word	0x0801fc00
 8000e48:	08005174 	.word	0x08005174
 8000e4c:	200001f4 	.word	0x200001f4
 8000e50:	08005190 	.word	0x08005190

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b090      	sub	sp, #64	; 0x40
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	2228      	movs	r2, #40	; 0x28
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fa35 	bl	80022d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fb10 	bl	80014b0 <HAL_RCC_OscConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e96:	f000 f82f 	bl	8000ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fd7e 	bl	80019b4 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ebe:	f000 f81b 	bl	8000ef8 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3740      	adds	r7, #64	; 0x40
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_GPIO_Init+0x28>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <MX_GPIO_Init+0x28>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <MX_GPIO_Init+0x28>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <Error_Handler+0x8>
	...

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_MspInit+0x60>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_MspInit+0x60>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fae:	f000 f935 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  return 1;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <_kill>:

int _kill(int pid, int sig)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fce:	f001 f9cf 	bl	8002370 <__errno>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2216      	movs	r2, #22
 8000fd6:	601a      	str	r2, [r3, #0]
  return -1;
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_exit>:

void _exit (int status)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ffe7 	bl	8000fc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ff6:	e7fe      	b.n	8000ff6 <_exit+0x12>

08000ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e00a      	b.n	8001020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800100a:	f3af 8000 	nop.w
 800100e:	4601      	mov	r1, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf0      	blt.n	800100a <_read+0x12>
  }

  return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e009      	b.n	8001058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf1      	blt.n	8001044 <_write+0x12>
  }
  return len;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_close>:

int _close(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001090:	605a      	str	r2, [r3, #4]
  return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
	...

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f001 f938 	bl	8002370 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20005000 	.word	0x20005000
 800112c:	00000400 	.word	0x00000400
 8001130:	20000228 	.word	0x20000228
 8001134:	20000380 	.word	0x20000380

08001138 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001144:	f7ff fff8 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800114a:	490c      	ldr	r1, [pc, #48]	; (800117c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <LoopFillZerobss+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001160:	4c09      	ldr	r4, [pc, #36]	; (8001188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116e:	f001 f905 	bl	800237c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f7ff fe43 	bl	8000dfc <main>
  bx lr
 8001176:	4770      	bx	lr
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001180:	08005588 	.word	0x08005588
  ldr r2, =_sbss
 8001184:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001188:	2000037c 	.word	0x2000037c

0800118c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC1_2_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x28>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x28>)
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f92b 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	200f      	movs	r0, #15
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff feaa 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f935 	bl	800144a <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 f90b 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000008 	.word	0x20000008
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x1c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_IncTick+0x20>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <HAL_IncTick+0x20>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000008 	.word	0x20000008
 800123c:	2000022c 	.word	0x2000022c

08001240 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <HAL_GetTick+0x10>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	2000022c 	.word	0x2000022c

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff fff0 	bl	8001240 <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffe0 	bl	8001240 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff90 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff49 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff5e 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff90 	bl	8001354 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5f 	bl	8001300 <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffb0 	bl	80013b8 <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_FLASH_Unlock+0x40>)
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00d      	beq.n	8001496 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_FLASH_Unlock+0x40>)
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_FLASH_Unlock+0x44>)
 800147e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_FLASH_Unlock+0x40>)
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_FLASH_Unlock+0x48>)
 8001484:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_FLASH_Unlock+0x40>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001496:	79fb      	ldrb	r3, [r7, #7]
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000
 80014a8:	45670123 	.word	0x45670123
 80014ac:	cdef89ab 	.word	0xcdef89ab

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e272      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8087 	beq.w	80015de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d0:	4b92      	ldr	r3, [pc, #584]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d00c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
 80014e8:	4b8c      	ldr	r3, [pc, #560]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d10b      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	4b89      	ldr	r3, [pc, #548]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d06c      	beq.n	80015dc <HAL_RCC_OscConfig+0x12c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d168      	bne.n	80015dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e24c      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x76>
 8001518:	4b80      	ldr	r3, [pc, #512]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a7f      	ldr	r2, [pc, #508]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b7b      	ldr	r3, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7a      	ldr	r2, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b78      	ldr	r3, [pc, #480]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a77      	ldr	r2, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xbc>
 8001552:	4b72      	ldr	r3, [pc, #456]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a71      	ldr	r2, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6e      	ldr	r2, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 800156c:	4b6b      	ldr	r3, [pc, #428]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a6a      	ldr	r2, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a67      	ldr	r2, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fe58 	bl	8001240 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fe54 	bl	8001240 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e200      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe4>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fe44 	bl	8001240 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fe40 	bl	8001240 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1ec      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x10c>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d063      	beq.n	80016b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ea:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x18c>
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1c0      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4939      	ldr	r1, [pc, #228]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e03a      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fdf9 	bl	8001240 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fdf5 	bl	8001240 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1a1      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4927      	ldr	r1, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fdd8 	bl	8001240 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fdd4 	bl	8001240 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e180      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03a      	beq.n	8001734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d019      	beq.n	80016fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fdb8 	bl	8001240 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fdb4 	bl	8001240 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e160      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 fa9c 	bl	8001c30 <RCC_Delay>
 80016f8:	e01c      	b.n	8001734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fd9e 	bl	8001240 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001706:	e00f      	b.n	8001728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fd9a 	bl	8001240 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d908      	bls.n	8001728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e146      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	42420000 	.word	0x42420000
 8001724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	4b92      	ldr	r3, [pc, #584]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e9      	bne.n	8001708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a6 	beq.w	800188e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4b8b      	ldr	r3, [pc, #556]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10d      	bne.n	800176e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b88      	ldr	r3, [pc, #544]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a87      	ldr	r2, [pc, #540]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b85      	ldr	r3, [pc, #532]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	4b82      	ldr	r3, [pc, #520]	; (8001978 <HAL_RCC_OscConfig+0x4c8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d118      	bne.n	80017ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177a:	4b7f      	ldr	r3, [pc, #508]	; (8001978 <HAL_RCC_OscConfig+0x4c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7e      	ldr	r2, [pc, #504]	; (8001978 <HAL_RCC_OscConfig+0x4c8>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff fd5b 	bl	8001240 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178e:	f7ff fd57 	bl	8001240 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b64      	cmp	r3, #100	; 0x64
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e103      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b75      	ldr	r3, [pc, #468]	; (8001978 <HAL_RCC_OscConfig+0x4c8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x312>
 80017b4:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e02d      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x334>
 80017ca:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a69      	ldr	r2, [pc, #420]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	4b67      	ldr	r3, [pc, #412]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a66      	ldr	r2, [pc, #408]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	e01c      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x356>
 80017ec:	4b61      	ldr	r3, [pc, #388]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a60      	ldr	r2, [pc, #384]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	4b5e      	ldr	r3, [pc, #376]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a5d      	ldr	r2, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 8001806:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a57      	ldr	r2, [pc, #348]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d015      	beq.n	8001852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff fd0b 	bl	8001240 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fd07 	bl	8001240 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0b1      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ee      	beq.n	800182e <HAL_RCC_OscConfig+0x37e>
 8001850:	e014      	b.n	800187c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fcf5 	bl	8001240 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fcf1 	bl	8001240 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e09b      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	4b40      	ldr	r3, [pc, #256]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ee      	bne.n	800185a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d105      	bne.n	800188e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001882:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a3b      	ldr	r2, [pc, #236]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8087 	beq.w	80019a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001898:	4b36      	ldr	r3, [pc, #216]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d061      	beq.n	8001968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d146      	bne.n	800193a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4b33      	ldr	r3, [pc, #204]	; (800197c <HAL_RCC_OscConfig+0x4cc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fcc5 	bl	8001240 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fcc1 	bl	8001240 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e06d      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d108      	bne.n	80018f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	4921      	ldr	r1, [pc, #132]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a19      	ldr	r1, [r3, #32]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	430b      	orrs	r3, r1
 8001906:	491b      	ldr	r1, [pc, #108]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_RCC_OscConfig+0x4cc>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fc95 	bl	8001240 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191a:	f7ff fc91 	bl	8001240 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e03d      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x46a>
 8001938:	e035      	b.n	80019a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x4cc>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fc7e 	bl	8001240 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fc7a 	bl	8001240 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e026      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x498>
 8001966:	e01e      	b.n	80019a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d107      	bne.n	8001980 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e019      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
 8001974:	40021000 	.word	0x40021000
 8001978:	40007000 	.word	0x40007000
 800197c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x500>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	429a      	cmp	r2, r3
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000

080019b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0d0      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d910      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 0207 	bic.w	r2, r3, #7
 80019de:	4965      	ldr	r1, [pc, #404]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d040      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d115      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e073      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e06b      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a92:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f023 0203 	bic.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4936      	ldr	r1, [pc, #216]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff fbcc 	bl	8001240 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff fbc8 	bl	8001240 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e053      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 020c 	and.w	r2, r3, #12
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1eb      	bne.n	8001aac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d210      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4922      	ldr	r1, [pc, #136]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f821 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490a      	ldr	r1, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1cc>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1d0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb2a 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40022000 	.word	0x40022000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	0800519c 	.word	0x0800519c
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x30>
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x36>
 8001bb6:	e027      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bba:	613b      	str	r3, [r7, #16]
      break;
 8001bbc:	e027      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	0c9b      	lsrs	r3, r3, #18
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d010      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0c5b      	lsrs	r3, r3, #17
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bea:	fb03 f202 	mul.w	r2, r3, r2
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e004      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bfc:	fb02 f303 	mul.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	613b      	str	r3, [r7, #16]
      break;
 8001c06:	e002      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c0a:	613b      	str	r3, [r7, #16]
      break;
 8001c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0e:	693b      	ldr	r3, [r7, #16]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	007a1200 	.word	0x007a1200
 8001c24:	080051ac 	.word	0x080051ac
 8001c28:	080051bc 	.word	0x080051bc
 8001c2c:	003d0900 	.word	0x003d0900

08001c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <RCC_Delay+0x34>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <RCC_Delay+0x38>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a5b      	lsrs	r3, r3, #9
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c4c:	bf00      	nop
  }
  while (Delay --);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	60fa      	str	r2, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f9      	bne.n	8001c4c <RCC_Delay+0x1c>
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000000 	.word	0x20000000
 8001c68:	10624dd3 	.word	0x10624dd3

08001c6c <_scanf_float>:
 8001c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c70:	b087      	sub	sp, #28
 8001c72:	9303      	str	r3, [sp, #12]
 8001c74:	688b      	ldr	r3, [r1, #8]
 8001c76:	4617      	mov	r7, r2
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8001c7e:	bf85      	ittet	hi
 8001c80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8001c84:	195b      	addhi	r3, r3, r5
 8001c86:	2300      	movls	r3, #0
 8001c88:	9302      	strhi	r3, [sp, #8]
 8001c8a:	bf88      	it	hi
 8001c8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8001c90:	468b      	mov	fp, r1
 8001c92:	f04f 0500 	mov.w	r5, #0
 8001c96:	bf8c      	ite	hi
 8001c98:	608b      	strhi	r3, [r1, #8]
 8001c9a:	9302      	strls	r3, [sp, #8]
 8001c9c:	680b      	ldr	r3, [r1, #0]
 8001c9e:	4680      	mov	r8, r0
 8001ca0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8001ca4:	f84b 3b1c 	str.w	r3, [fp], #28
 8001ca8:	460c      	mov	r4, r1
 8001caa:	465e      	mov	r6, fp
 8001cac:	46aa      	mov	sl, r5
 8001cae:	46a9      	mov	r9, r5
 8001cb0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8001cb4:	9501      	str	r5, [sp, #4]
 8001cb6:	68a2      	ldr	r2, [r4, #8]
 8001cb8:	b152      	cbz	r2, 8001cd0 <_scanf_float+0x64>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b4e      	cmp	r3, #78	; 0x4e
 8001cc0:	d864      	bhi.n	8001d8c <_scanf_float+0x120>
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d83c      	bhi.n	8001d40 <_scanf_float+0xd4>
 8001cc6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8001cca:	b2c8      	uxtb	r0, r1
 8001ccc:	280e      	cmp	r0, #14
 8001cce:	d93a      	bls.n	8001d46 <_scanf_float+0xda>
 8001cd0:	f1b9 0f00 	cmp.w	r9, #0
 8001cd4:	d003      	beq.n	8001cde <_scanf_float+0x72>
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cdc:	6023      	str	r3, [r4, #0]
 8001cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001ce2:	f1ba 0f01 	cmp.w	sl, #1
 8001ce6:	f200 8113 	bhi.w	8001f10 <_scanf_float+0x2a4>
 8001cea:	455e      	cmp	r6, fp
 8001cec:	f200 8105 	bhi.w	8001efa <_scanf_float+0x28e>
 8001cf0:	2501      	movs	r5, #1
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	b007      	add	sp, #28
 8001cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cfa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8001cfe:	2a0d      	cmp	r2, #13
 8001d00:	d8e6      	bhi.n	8001cd0 <_scanf_float+0x64>
 8001d02:	a101      	add	r1, pc, #4	; (adr r1, 8001d08 <_scanf_float+0x9c>)
 8001d04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001d08:	08001e47 	.word	0x08001e47
 8001d0c:	08001cd1 	.word	0x08001cd1
 8001d10:	08001cd1 	.word	0x08001cd1
 8001d14:	08001cd1 	.word	0x08001cd1
 8001d18:	08001ea7 	.word	0x08001ea7
 8001d1c:	08001e7f 	.word	0x08001e7f
 8001d20:	08001cd1 	.word	0x08001cd1
 8001d24:	08001cd1 	.word	0x08001cd1
 8001d28:	08001e55 	.word	0x08001e55
 8001d2c:	08001cd1 	.word	0x08001cd1
 8001d30:	08001cd1 	.word	0x08001cd1
 8001d34:	08001cd1 	.word	0x08001cd1
 8001d38:	08001cd1 	.word	0x08001cd1
 8001d3c:	08001e0d 	.word	0x08001e0d
 8001d40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001d44:	e7db      	b.n	8001cfe <_scanf_float+0x92>
 8001d46:	290e      	cmp	r1, #14
 8001d48:	d8c2      	bhi.n	8001cd0 <_scanf_float+0x64>
 8001d4a:	a001      	add	r0, pc, #4	; (adr r0, 8001d50 <_scanf_float+0xe4>)
 8001d4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001d50:	08001dff 	.word	0x08001dff
 8001d54:	08001cd1 	.word	0x08001cd1
 8001d58:	08001dff 	.word	0x08001dff
 8001d5c:	08001e93 	.word	0x08001e93
 8001d60:	08001cd1 	.word	0x08001cd1
 8001d64:	08001dad 	.word	0x08001dad
 8001d68:	08001de9 	.word	0x08001de9
 8001d6c:	08001de9 	.word	0x08001de9
 8001d70:	08001de9 	.word	0x08001de9
 8001d74:	08001de9 	.word	0x08001de9
 8001d78:	08001de9 	.word	0x08001de9
 8001d7c:	08001de9 	.word	0x08001de9
 8001d80:	08001de9 	.word	0x08001de9
 8001d84:	08001de9 	.word	0x08001de9
 8001d88:	08001de9 	.word	0x08001de9
 8001d8c:	2b6e      	cmp	r3, #110	; 0x6e
 8001d8e:	d809      	bhi.n	8001da4 <_scanf_float+0x138>
 8001d90:	2b60      	cmp	r3, #96	; 0x60
 8001d92:	d8b2      	bhi.n	8001cfa <_scanf_float+0x8e>
 8001d94:	2b54      	cmp	r3, #84	; 0x54
 8001d96:	d077      	beq.n	8001e88 <_scanf_float+0x21c>
 8001d98:	2b59      	cmp	r3, #89	; 0x59
 8001d9a:	d199      	bne.n	8001cd0 <_scanf_float+0x64>
 8001d9c:	2d07      	cmp	r5, #7
 8001d9e:	d197      	bne.n	8001cd0 <_scanf_float+0x64>
 8001da0:	2508      	movs	r5, #8
 8001da2:	e029      	b.n	8001df8 <_scanf_float+0x18c>
 8001da4:	2b74      	cmp	r3, #116	; 0x74
 8001da6:	d06f      	beq.n	8001e88 <_scanf_float+0x21c>
 8001da8:	2b79      	cmp	r3, #121	; 0x79
 8001daa:	e7f6      	b.n	8001d9a <_scanf_float+0x12e>
 8001dac:	6821      	ldr	r1, [r4, #0]
 8001dae:	05c8      	lsls	r0, r1, #23
 8001db0:	d51a      	bpl.n	8001de8 <_scanf_float+0x17c>
 8001db2:	9b02      	ldr	r3, [sp, #8]
 8001db4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001db8:	6021      	str	r1, [r4, #0]
 8001dba:	f109 0901 	add.w	r9, r9, #1
 8001dbe:	b11b      	cbz	r3, 8001dc8 <_scanf_float+0x15c>
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	3201      	adds	r2, #1
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	60a2      	str	r2, [r4, #8]
 8001dc8:	68a3      	ldr	r3, [r4, #8]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	60a3      	str	r3, [r4, #8]
 8001dce:	6923      	ldr	r3, [r4, #16]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	6123      	str	r3, [r4, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	f340 8084 	ble.w	8001ee8 <_scanf_float+0x27c>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	e766      	b.n	8001cb6 <_scanf_float+0x4a>
 8001de8:	eb1a 0f05 	cmn.w	sl, r5
 8001dec:	f47f af70 	bne.w	8001cd0 <_scanf_float+0x64>
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8001df6:	6022      	str	r2, [r4, #0]
 8001df8:	f806 3b01 	strb.w	r3, [r6], #1
 8001dfc:	e7e4      	b.n	8001dc8 <_scanf_float+0x15c>
 8001dfe:	6822      	ldr	r2, [r4, #0]
 8001e00:	0610      	lsls	r0, r2, #24
 8001e02:	f57f af65 	bpl.w	8001cd0 <_scanf_float+0x64>
 8001e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e0a:	e7f4      	b.n	8001df6 <_scanf_float+0x18a>
 8001e0c:	f1ba 0f00 	cmp.w	sl, #0
 8001e10:	d10e      	bne.n	8001e30 <_scanf_float+0x1c4>
 8001e12:	f1b9 0f00 	cmp.w	r9, #0
 8001e16:	d10e      	bne.n	8001e36 <_scanf_float+0x1ca>
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8001e1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8001e22:	d108      	bne.n	8001e36 <_scanf_float+0x1ca>
 8001e24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8001e28:	f04f 0a01 	mov.w	sl, #1
 8001e2c:	6022      	str	r2, [r4, #0]
 8001e2e:	e7e3      	b.n	8001df8 <_scanf_float+0x18c>
 8001e30:	f1ba 0f02 	cmp.w	sl, #2
 8001e34:	d055      	beq.n	8001ee2 <_scanf_float+0x276>
 8001e36:	2d01      	cmp	r5, #1
 8001e38:	d002      	beq.n	8001e40 <_scanf_float+0x1d4>
 8001e3a:	2d04      	cmp	r5, #4
 8001e3c:	f47f af48 	bne.w	8001cd0 <_scanf_float+0x64>
 8001e40:	3501      	adds	r5, #1
 8001e42:	b2ed      	uxtb	r5, r5
 8001e44:	e7d8      	b.n	8001df8 <_scanf_float+0x18c>
 8001e46:	f1ba 0f01 	cmp.w	sl, #1
 8001e4a:	f47f af41 	bne.w	8001cd0 <_scanf_float+0x64>
 8001e4e:	f04f 0a02 	mov.w	sl, #2
 8001e52:	e7d1      	b.n	8001df8 <_scanf_float+0x18c>
 8001e54:	b97d      	cbnz	r5, 8001e76 <_scanf_float+0x20a>
 8001e56:	f1b9 0f00 	cmp.w	r9, #0
 8001e5a:	f47f af3c 	bne.w	8001cd6 <_scanf_float+0x6a>
 8001e5e:	6822      	ldr	r2, [r4, #0]
 8001e60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8001e64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8001e68:	f47f af39 	bne.w	8001cde <_scanf_float+0x72>
 8001e6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8001e70:	2501      	movs	r5, #1
 8001e72:	6022      	str	r2, [r4, #0]
 8001e74:	e7c0      	b.n	8001df8 <_scanf_float+0x18c>
 8001e76:	2d03      	cmp	r5, #3
 8001e78:	d0e2      	beq.n	8001e40 <_scanf_float+0x1d4>
 8001e7a:	2d05      	cmp	r5, #5
 8001e7c:	e7de      	b.n	8001e3c <_scanf_float+0x1d0>
 8001e7e:	2d02      	cmp	r5, #2
 8001e80:	f47f af26 	bne.w	8001cd0 <_scanf_float+0x64>
 8001e84:	2503      	movs	r5, #3
 8001e86:	e7b7      	b.n	8001df8 <_scanf_float+0x18c>
 8001e88:	2d06      	cmp	r5, #6
 8001e8a:	f47f af21 	bne.w	8001cd0 <_scanf_float+0x64>
 8001e8e:	2507      	movs	r5, #7
 8001e90:	e7b2      	b.n	8001df8 <_scanf_float+0x18c>
 8001e92:	6822      	ldr	r2, [r4, #0]
 8001e94:	0591      	lsls	r1, r2, #22
 8001e96:	f57f af1b 	bpl.w	8001cd0 <_scanf_float+0x64>
 8001e9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8001e9e:	6022      	str	r2, [r4, #0]
 8001ea0:	f8cd 9004 	str.w	r9, [sp, #4]
 8001ea4:	e7a8      	b.n	8001df8 <_scanf_float+0x18c>
 8001ea6:	6822      	ldr	r2, [r4, #0]
 8001ea8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8001eac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001eb0:	d006      	beq.n	8001ec0 <_scanf_float+0x254>
 8001eb2:	0550      	lsls	r0, r2, #21
 8001eb4:	f57f af0c 	bpl.w	8001cd0 <_scanf_float+0x64>
 8001eb8:	f1b9 0f00 	cmp.w	r9, #0
 8001ebc:	f43f af0f 	beq.w	8001cde <_scanf_float+0x72>
 8001ec0:	0591      	lsls	r1, r2, #22
 8001ec2:	bf58      	it	pl
 8001ec4:	9901      	ldrpl	r1, [sp, #4]
 8001ec6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8001eca:	bf58      	it	pl
 8001ecc:	eba9 0101 	subpl.w	r1, r9, r1
 8001ed0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8001ed4:	f04f 0900 	mov.w	r9, #0
 8001ed8:	bf58      	it	pl
 8001eda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8001ede:	6022      	str	r2, [r4, #0]
 8001ee0:	e78a      	b.n	8001df8 <_scanf_float+0x18c>
 8001ee2:	f04f 0a03 	mov.w	sl, #3
 8001ee6:	e787      	b.n	8001df8 <_scanf_float+0x18c>
 8001ee8:	4639      	mov	r1, r7
 8001eea:	4640      	mov	r0, r8
 8001eec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001ef0:	4798      	blx	r3
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	f43f aedf 	beq.w	8001cb6 <_scanf_float+0x4a>
 8001ef8:	e6ea      	b.n	8001cd0 <_scanf_float+0x64>
 8001efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001efe:	463a      	mov	r2, r7
 8001f00:	4640      	mov	r0, r8
 8001f02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8001f06:	4798      	blx	r3
 8001f08:	6923      	ldr	r3, [r4, #16]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6123      	str	r3, [r4, #16]
 8001f0e:	e6ec      	b.n	8001cea <_scanf_float+0x7e>
 8001f10:	1e6b      	subs	r3, r5, #1
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d825      	bhi.n	8001f62 <_scanf_float+0x2f6>
 8001f16:	2d02      	cmp	r5, #2
 8001f18:	d836      	bhi.n	8001f88 <_scanf_float+0x31c>
 8001f1a:	455e      	cmp	r6, fp
 8001f1c:	f67f aee8 	bls.w	8001cf0 <_scanf_float+0x84>
 8001f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001f24:	463a      	mov	r2, r7
 8001f26:	4640      	mov	r0, r8
 8001f28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8001f2c:	4798      	blx	r3
 8001f2e:	6923      	ldr	r3, [r4, #16]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	6123      	str	r3, [r4, #16]
 8001f34:	e7f1      	b.n	8001f1a <_scanf_float+0x2ae>
 8001f36:	9802      	ldr	r0, [sp, #8]
 8001f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001f3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8001f40:	463a      	mov	r2, r7
 8001f42:	9002      	str	r0, [sp, #8]
 8001f44:	4640      	mov	r0, r8
 8001f46:	4798      	blx	r3
 8001f48:	6923      	ldr	r3, [r4, #16]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6123      	str	r3, [r4, #16]
 8001f4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001f52:	fa5f fa8a 	uxtb.w	sl, sl
 8001f56:	f1ba 0f02 	cmp.w	sl, #2
 8001f5a:	d1ec      	bne.n	8001f36 <_scanf_float+0x2ca>
 8001f5c:	3d03      	subs	r5, #3
 8001f5e:	b2ed      	uxtb	r5, r5
 8001f60:	1b76      	subs	r6, r6, r5
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	05da      	lsls	r2, r3, #23
 8001f66:	d52f      	bpl.n	8001fc8 <_scanf_float+0x35c>
 8001f68:	055b      	lsls	r3, r3, #21
 8001f6a:	d510      	bpl.n	8001f8e <_scanf_float+0x322>
 8001f6c:	455e      	cmp	r6, fp
 8001f6e:	f67f aebf 	bls.w	8001cf0 <_scanf_float+0x84>
 8001f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001f76:	463a      	mov	r2, r7
 8001f78:	4640      	mov	r0, r8
 8001f7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8001f7e:	4798      	blx	r3
 8001f80:	6923      	ldr	r3, [r4, #16]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6123      	str	r3, [r4, #16]
 8001f86:	e7f1      	b.n	8001f6c <_scanf_float+0x300>
 8001f88:	46aa      	mov	sl, r5
 8001f8a:	9602      	str	r6, [sp, #8]
 8001f8c:	e7df      	b.n	8001f4e <_scanf_float+0x2e2>
 8001f8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8001f92:	6923      	ldr	r3, [r4, #16]
 8001f94:	2965      	cmp	r1, #101	; 0x65
 8001f96:	f103 33ff 	add.w	r3, r3, #4294967295
 8001f9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8001f9e:	6123      	str	r3, [r4, #16]
 8001fa0:	d00c      	beq.n	8001fbc <_scanf_float+0x350>
 8001fa2:	2945      	cmp	r1, #69	; 0x45
 8001fa4:	d00a      	beq.n	8001fbc <_scanf_float+0x350>
 8001fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001faa:	463a      	mov	r2, r7
 8001fac:	4640      	mov	r0, r8
 8001fae:	4798      	blx	r3
 8001fb0:	6923      	ldr	r3, [r4, #16]
 8001fb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	1eb5      	subs	r5, r6, #2
 8001fba:	6123      	str	r3, [r4, #16]
 8001fbc:	463a      	mov	r2, r7
 8001fbe:	4640      	mov	r0, r8
 8001fc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001fc4:	4798      	blx	r3
 8001fc6:	462e      	mov	r6, r5
 8001fc8:	6825      	ldr	r5, [r4, #0]
 8001fca:	f015 0510 	ands.w	r5, r5, #16
 8001fce:	d155      	bne.n	800207c <_scanf_float+0x410>
 8001fd0:	7035      	strb	r5, [r6, #0]
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fdc:	d11d      	bne.n	800201a <_scanf_float+0x3ae>
 8001fde:	9b01      	ldr	r3, [sp, #4]
 8001fe0:	454b      	cmp	r3, r9
 8001fe2:	eba3 0209 	sub.w	r2, r3, r9
 8001fe6:	d125      	bne.n	8002034 <_scanf_float+0x3c8>
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4659      	mov	r1, fp
 8001fec:	4640      	mov	r0, r8
 8001fee:	f001 f8fb 	bl	80031e8 <_strtod_r>
 8001ff2:	9b03      	ldr	r3, [sp, #12]
 8001ff4:	f8d4 c000 	ldr.w	ip, [r4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f01c 0f02 	tst.w	ip, #2
 8001ffe:	4606      	mov	r6, r0
 8002000:	460f      	mov	r7, r1
 8002002:	f103 0204 	add.w	r2, r3, #4
 8002006:	d020      	beq.n	800204a <_scanf_float+0x3de>
 8002008:	9903      	ldr	r1, [sp, #12]
 800200a:	600a      	str	r2, [r1, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e9c3 6700 	strd	r6, r7, [r3]
 8002012:	68e3      	ldr	r3, [r4, #12]
 8002014:	3301      	adds	r3, #1
 8002016:	60e3      	str	r3, [r4, #12]
 8002018:	e66b      	b.n	8001cf2 <_scanf_float+0x86>
 800201a:	9b04      	ldr	r3, [sp, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0e3      	beq.n	8001fe8 <_scanf_float+0x37c>
 8002020:	9905      	ldr	r1, [sp, #20]
 8002022:	230a      	movs	r3, #10
 8002024:	462a      	mov	r2, r5
 8002026:	4640      	mov	r0, r8
 8002028:	3101      	adds	r1, #1
 800202a:	f001 f961 	bl	80032f0 <_strtol_r>
 800202e:	9b04      	ldr	r3, [sp, #16]
 8002030:	9e05      	ldr	r6, [sp, #20]
 8002032:	1ac2      	subs	r2, r0, r3
 8002034:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002038:	429e      	cmp	r6, r3
 800203a:	bf28      	it	cs
 800203c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8002040:	4630      	mov	r0, r6
 8002042:	490f      	ldr	r1, [pc, #60]	; (8002080 <_scanf_float+0x414>)
 8002044:	f000 f8e2 	bl	800220c <siprintf>
 8002048:	e7ce      	b.n	8001fe8 <_scanf_float+0x37c>
 800204a:	f01c 0f04 	tst.w	ip, #4
 800204e:	d1db      	bne.n	8002008 <_scanf_float+0x39c>
 8002050:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002054:	f8cc 2000 	str.w	r2, [ip]
 8002058:	f8d3 8000 	ldr.w	r8, [r3]
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	f7fe fcd4 	bl	8000a0c <__aeabi_dcmpun>
 8002064:	b128      	cbz	r0, 8002072 <_scanf_float+0x406>
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <_scanf_float+0x418>)
 8002068:	f000 f9b0 	bl	80023cc <nanf>
 800206c:	f8c8 0000 	str.w	r0, [r8]
 8002070:	e7cf      	b.n	8002012 <_scanf_float+0x3a6>
 8002072:	4630      	mov	r0, r6
 8002074:	4639      	mov	r1, r7
 8002076:	f7fe fcff 	bl	8000a78 <__aeabi_d2f>
 800207a:	e7f7      	b.n	800206c <_scanf_float+0x400>
 800207c:	2500      	movs	r5, #0
 800207e:	e638      	b.n	8001cf2 <_scanf_float+0x86>
 8002080:	080051be 	.word	0x080051be
 8002084:	0800557f 	.word	0x0800557f

08002088 <std>:
 8002088:	2300      	movs	r3, #0
 800208a:	b510      	push	{r4, lr}
 800208c:	4604      	mov	r4, r0
 800208e:	e9c0 3300 	strd	r3, r3, [r0]
 8002092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002096:	6083      	str	r3, [r0, #8]
 8002098:	8181      	strh	r1, [r0, #12]
 800209a:	6643      	str	r3, [r0, #100]	; 0x64
 800209c:	81c2      	strh	r2, [r0, #14]
 800209e:	6183      	str	r3, [r0, #24]
 80020a0:	4619      	mov	r1, r3
 80020a2:	2208      	movs	r2, #8
 80020a4:	305c      	adds	r0, #92	; 0x5c
 80020a6:	f000 f914 	bl	80022d2 <memset>
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <std+0x58>)
 80020ac:	6224      	str	r4, [r4, #32]
 80020ae:	6263      	str	r3, [r4, #36]	; 0x24
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <std+0x5c>)
 80020b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <std+0x60>)
 80020b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <std+0x64>)
 80020ba:	6323      	str	r3, [r4, #48]	; 0x30
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <std+0x68>)
 80020be:	429c      	cmp	r4, r3
 80020c0:	d006      	beq.n	80020d0 <std+0x48>
 80020c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80020c6:	4294      	cmp	r4, r2
 80020c8:	d002      	beq.n	80020d0 <std+0x48>
 80020ca:	33d0      	adds	r3, #208	; 0xd0
 80020cc:	429c      	cmp	r4, r3
 80020ce:	d105      	bne.n	80020dc <std+0x54>
 80020d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020d8:	f000 b974 	b.w	80023c4 <__retarget_lock_init_recursive>
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	bf00      	nop
 80020e0:	0800224d 	.word	0x0800224d
 80020e4:	0800226f 	.word	0x0800226f
 80020e8:	080022a7 	.word	0x080022a7
 80020ec:	080022cb 	.word	0x080022cb
 80020f0:	20000230 	.word	0x20000230

080020f4 <stdio_exit_handler>:
 80020f4:	4a02      	ldr	r2, [pc, #8]	; (8002100 <stdio_exit_handler+0xc>)
 80020f6:	4903      	ldr	r1, [pc, #12]	; (8002104 <stdio_exit_handler+0x10>)
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <stdio_exit_handler+0x14>)
 80020fa:	f000 b869 	b.w	80021d0 <_fwalk_sglue>
 80020fe:	bf00      	nop
 8002100:	2000000c 	.word	0x2000000c
 8002104:	080039d1 	.word	0x080039d1
 8002108:	20000018 	.word	0x20000018

0800210c <cleanup_stdio>:
 800210c:	6841      	ldr	r1, [r0, #4]
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <cleanup_stdio+0x34>)
 8002110:	b510      	push	{r4, lr}
 8002112:	4299      	cmp	r1, r3
 8002114:	4604      	mov	r4, r0
 8002116:	d001      	beq.n	800211c <cleanup_stdio+0x10>
 8002118:	f001 fc5a 	bl	80039d0 <_fflush_r>
 800211c:	68a1      	ldr	r1, [r4, #8]
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <cleanup_stdio+0x38>)
 8002120:	4299      	cmp	r1, r3
 8002122:	d002      	beq.n	800212a <cleanup_stdio+0x1e>
 8002124:	4620      	mov	r0, r4
 8002126:	f001 fc53 	bl	80039d0 <_fflush_r>
 800212a:	68e1      	ldr	r1, [r4, #12]
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <cleanup_stdio+0x3c>)
 800212e:	4299      	cmp	r1, r3
 8002130:	d004      	beq.n	800213c <cleanup_stdio+0x30>
 8002132:	4620      	mov	r0, r4
 8002134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002138:	f001 bc4a 	b.w	80039d0 <_fflush_r>
 800213c:	bd10      	pop	{r4, pc}
 800213e:	bf00      	nop
 8002140:	20000230 	.word	0x20000230
 8002144:	20000298 	.word	0x20000298
 8002148:	20000300 	.word	0x20000300

0800214c <global_stdio_init.part.0>:
 800214c:	b510      	push	{r4, lr}
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <global_stdio_init.part.0+0x30>)
 8002150:	4c0b      	ldr	r4, [pc, #44]	; (8002180 <global_stdio_init.part.0+0x34>)
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <global_stdio_init.part.0+0x38>)
 8002154:	4620      	mov	r0, r4
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	2104      	movs	r1, #4
 800215a:	2200      	movs	r2, #0
 800215c:	f7ff ff94 	bl	8002088 <std>
 8002160:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002164:	2201      	movs	r2, #1
 8002166:	2109      	movs	r1, #9
 8002168:	f7ff ff8e 	bl	8002088 <std>
 800216c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002170:	2202      	movs	r2, #2
 8002172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002176:	2112      	movs	r1, #18
 8002178:	f7ff bf86 	b.w	8002088 <std>
 800217c:	20000368 	.word	0x20000368
 8002180:	20000230 	.word	0x20000230
 8002184:	080020f5 	.word	0x080020f5

08002188 <__sfp_lock_acquire>:
 8002188:	4801      	ldr	r0, [pc, #4]	; (8002190 <__sfp_lock_acquire+0x8>)
 800218a:	f000 b91c 	b.w	80023c6 <__retarget_lock_acquire_recursive>
 800218e:	bf00      	nop
 8002190:	20000371 	.word	0x20000371

08002194 <__sfp_lock_release>:
 8002194:	4801      	ldr	r0, [pc, #4]	; (800219c <__sfp_lock_release+0x8>)
 8002196:	f000 b917 	b.w	80023c8 <__retarget_lock_release_recursive>
 800219a:	bf00      	nop
 800219c:	20000371 	.word	0x20000371

080021a0 <__sinit>:
 80021a0:	b510      	push	{r4, lr}
 80021a2:	4604      	mov	r4, r0
 80021a4:	f7ff fff0 	bl	8002188 <__sfp_lock_acquire>
 80021a8:	6a23      	ldr	r3, [r4, #32]
 80021aa:	b11b      	cbz	r3, 80021b4 <__sinit+0x14>
 80021ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021b0:	f7ff bff0 	b.w	8002194 <__sfp_lock_release>
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__sinit+0x28>)
 80021b6:	6223      	str	r3, [r4, #32]
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__sinit+0x2c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f5      	bne.n	80021ac <__sinit+0xc>
 80021c0:	f7ff ffc4 	bl	800214c <global_stdio_init.part.0>
 80021c4:	e7f2      	b.n	80021ac <__sinit+0xc>
 80021c6:	bf00      	nop
 80021c8:	0800210d 	.word	0x0800210d
 80021cc:	20000368 	.word	0x20000368

080021d0 <_fwalk_sglue>:
 80021d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021d4:	4607      	mov	r7, r0
 80021d6:	4688      	mov	r8, r1
 80021d8:	4614      	mov	r4, r2
 80021da:	2600      	movs	r6, #0
 80021dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021e0:	f1b9 0901 	subs.w	r9, r9, #1
 80021e4:	d505      	bpl.n	80021f2 <_fwalk_sglue+0x22>
 80021e6:	6824      	ldr	r4, [r4, #0]
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d1f7      	bne.n	80021dc <_fwalk_sglue+0xc>
 80021ec:	4630      	mov	r0, r6
 80021ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021f2:	89ab      	ldrh	r3, [r5, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d907      	bls.n	8002208 <_fwalk_sglue+0x38>
 80021f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021fc:	3301      	adds	r3, #1
 80021fe:	d003      	beq.n	8002208 <_fwalk_sglue+0x38>
 8002200:	4629      	mov	r1, r5
 8002202:	4638      	mov	r0, r7
 8002204:	47c0      	blx	r8
 8002206:	4306      	orrs	r6, r0
 8002208:	3568      	adds	r5, #104	; 0x68
 800220a:	e7e9      	b.n	80021e0 <_fwalk_sglue+0x10>

0800220c <siprintf>:
 800220c:	b40e      	push	{r1, r2, r3}
 800220e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002212:	b500      	push	{lr}
 8002214:	b09c      	sub	sp, #112	; 0x70
 8002216:	ab1d      	add	r3, sp, #116	; 0x74
 8002218:	9002      	str	r0, [sp, #8]
 800221a:	9006      	str	r0, [sp, #24]
 800221c:	9107      	str	r1, [sp, #28]
 800221e:	9104      	str	r1, [sp, #16]
 8002220:	4808      	ldr	r0, [pc, #32]	; (8002244 <siprintf+0x38>)
 8002222:	4909      	ldr	r1, [pc, #36]	; (8002248 <siprintf+0x3c>)
 8002224:	f853 2b04 	ldr.w	r2, [r3], #4
 8002228:	9105      	str	r1, [sp, #20]
 800222a:	6800      	ldr	r0, [r0, #0]
 800222c:	a902      	add	r1, sp, #8
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	f001 f8ba 	bl	80033a8 <_svfiprintf_r>
 8002234:	2200      	movs	r2, #0
 8002236:	9b02      	ldr	r3, [sp, #8]
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	b01c      	add	sp, #112	; 0x70
 800223c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002240:	b003      	add	sp, #12
 8002242:	4770      	bx	lr
 8002244:	20000064 	.word	0x20000064
 8002248:	ffff0208 	.word	0xffff0208

0800224c <__sread>:
 800224c:	b510      	push	{r4, lr}
 800224e:	460c      	mov	r4, r1
 8002250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002254:	f000 f868 	bl	8002328 <_read_r>
 8002258:	2800      	cmp	r0, #0
 800225a:	bfab      	itete	ge
 800225c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800225e:	89a3      	ldrhlt	r3, [r4, #12]
 8002260:	181b      	addge	r3, r3, r0
 8002262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002266:	bfac      	ite	ge
 8002268:	6563      	strge	r3, [r4, #84]	; 0x54
 800226a:	81a3      	strhlt	r3, [r4, #12]
 800226c:	bd10      	pop	{r4, pc}

0800226e <__swrite>:
 800226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002272:	461f      	mov	r7, r3
 8002274:	898b      	ldrh	r3, [r1, #12]
 8002276:	4605      	mov	r5, r0
 8002278:	05db      	lsls	r3, r3, #23
 800227a:	460c      	mov	r4, r1
 800227c:	4616      	mov	r6, r2
 800227e:	d505      	bpl.n	800228c <__swrite+0x1e>
 8002280:	2302      	movs	r3, #2
 8002282:	2200      	movs	r2, #0
 8002284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002288:	f000 f83c 	bl	8002304 <_lseek_r>
 800228c:	89a3      	ldrh	r3, [r4, #12]
 800228e:	4632      	mov	r2, r6
 8002290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002294:	81a3      	strh	r3, [r4, #12]
 8002296:	4628      	mov	r0, r5
 8002298:	463b      	mov	r3, r7
 800229a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800229e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022a2:	f000 b853 	b.w	800234c <_write_r>

080022a6 <__sseek>:
 80022a6:	b510      	push	{r4, lr}
 80022a8:	460c      	mov	r4, r1
 80022aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ae:	f000 f829 	bl	8002304 <_lseek_r>
 80022b2:	1c43      	adds	r3, r0, #1
 80022b4:	89a3      	ldrh	r3, [r4, #12]
 80022b6:	bf15      	itete	ne
 80022b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80022ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022c2:	81a3      	strheq	r3, [r4, #12]
 80022c4:	bf18      	it	ne
 80022c6:	81a3      	strhne	r3, [r4, #12]
 80022c8:	bd10      	pop	{r4, pc}

080022ca <__sclose>:
 80022ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ce:	f000 b809 	b.w	80022e4 <_close_r>

080022d2 <memset>:
 80022d2:	4603      	mov	r3, r0
 80022d4:	4402      	add	r2, r0
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d100      	bne.n	80022dc <memset+0xa>
 80022da:	4770      	bx	lr
 80022dc:	f803 1b01 	strb.w	r1, [r3], #1
 80022e0:	e7f9      	b.n	80022d6 <memset+0x4>
	...

080022e4 <_close_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	2300      	movs	r3, #0
 80022e8:	4d05      	ldr	r5, [pc, #20]	; (8002300 <_close_r+0x1c>)
 80022ea:	4604      	mov	r4, r0
 80022ec:	4608      	mov	r0, r1
 80022ee:	602b      	str	r3, [r5, #0]
 80022f0:	f7fe febb 	bl	800106a <_close>
 80022f4:	1c43      	adds	r3, r0, #1
 80022f6:	d102      	bne.n	80022fe <_close_r+0x1a>
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	b103      	cbz	r3, 80022fe <_close_r+0x1a>
 80022fc:	6023      	str	r3, [r4, #0]
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
 8002300:	2000036c 	.word	0x2000036c

08002304 <_lseek_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4604      	mov	r4, r0
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	2200      	movs	r2, #0
 800230e:	4d05      	ldr	r5, [pc, #20]	; (8002324 <_lseek_r+0x20>)
 8002310:	602a      	str	r2, [r5, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	f7fe fecd 	bl	80010b2 <_lseek>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d102      	bne.n	8002322 <_lseek_r+0x1e>
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	b103      	cbz	r3, 8002322 <_lseek_r+0x1e>
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	2000036c 	.word	0x2000036c

08002328 <_read_r>:
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	4604      	mov	r4, r0
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	2200      	movs	r2, #0
 8002332:	4d05      	ldr	r5, [pc, #20]	; (8002348 <_read_r+0x20>)
 8002334:	602a      	str	r2, [r5, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	f7fe fe5e 	bl	8000ff8 <_read>
 800233c:	1c43      	adds	r3, r0, #1
 800233e:	d102      	bne.n	8002346 <_read_r+0x1e>
 8002340:	682b      	ldr	r3, [r5, #0]
 8002342:	b103      	cbz	r3, 8002346 <_read_r+0x1e>
 8002344:	6023      	str	r3, [r4, #0]
 8002346:	bd38      	pop	{r3, r4, r5, pc}
 8002348:	2000036c 	.word	0x2000036c

0800234c <_write_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	2200      	movs	r2, #0
 8002356:	4d05      	ldr	r5, [pc, #20]	; (800236c <_write_r+0x20>)
 8002358:	602a      	str	r2, [r5, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	f7fe fe69 	bl	8001032 <_write>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	d102      	bne.n	800236a <_write_r+0x1e>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	b103      	cbz	r3, 800236a <_write_r+0x1e>
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	2000036c 	.word	0x2000036c

08002370 <__errno>:
 8002370:	4b01      	ldr	r3, [pc, #4]	; (8002378 <__errno+0x8>)
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000064 	.word	0x20000064

0800237c <__libc_init_array>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	2600      	movs	r6, #0
 8002380:	4d0c      	ldr	r5, [pc, #48]	; (80023b4 <__libc_init_array+0x38>)
 8002382:	4c0d      	ldr	r4, [pc, #52]	; (80023b8 <__libc_init_array+0x3c>)
 8002384:	1b64      	subs	r4, r4, r5
 8002386:	10a4      	asrs	r4, r4, #2
 8002388:	42a6      	cmp	r6, r4
 800238a:	d109      	bne.n	80023a0 <__libc_init_array+0x24>
 800238c:	f002 fee4 	bl	8005158 <_init>
 8002390:	2600      	movs	r6, #0
 8002392:	4d0a      	ldr	r5, [pc, #40]	; (80023bc <__libc_init_array+0x40>)
 8002394:	4c0a      	ldr	r4, [pc, #40]	; (80023c0 <__libc_init_array+0x44>)
 8002396:	1b64      	subs	r4, r4, r5
 8002398:	10a4      	asrs	r4, r4, #2
 800239a:	42a6      	cmp	r6, r4
 800239c:	d105      	bne.n	80023aa <__libc_init_array+0x2e>
 800239e:	bd70      	pop	{r4, r5, r6, pc}
 80023a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a4:	4798      	blx	r3
 80023a6:	3601      	adds	r6, #1
 80023a8:	e7ee      	b.n	8002388 <__libc_init_array+0xc>
 80023aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ae:	4798      	blx	r3
 80023b0:	3601      	adds	r6, #1
 80023b2:	e7f2      	b.n	800239a <__libc_init_array+0x1e>
 80023b4:	08005580 	.word	0x08005580
 80023b8:	08005580 	.word	0x08005580
 80023bc:	08005580 	.word	0x08005580
 80023c0:	08005584 	.word	0x08005584

080023c4 <__retarget_lock_init_recursive>:
 80023c4:	4770      	bx	lr

080023c6 <__retarget_lock_acquire_recursive>:
 80023c6:	4770      	bx	lr

080023c8 <__retarget_lock_release_recursive>:
 80023c8:	4770      	bx	lr
	...

080023cc <nanf>:
 80023cc:	4800      	ldr	r0, [pc, #0]	; (80023d0 <nanf+0x4>)
 80023ce:	4770      	bx	lr
 80023d0:	7fc00000 	.word	0x7fc00000

080023d4 <_free_r>:
 80023d4:	b538      	push	{r3, r4, r5, lr}
 80023d6:	4605      	mov	r5, r0
 80023d8:	2900      	cmp	r1, #0
 80023da:	d040      	beq.n	800245e <_free_r+0x8a>
 80023dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023e0:	1f0c      	subs	r4, r1, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bfb8      	it	lt
 80023e6:	18e4      	addlt	r4, r4, r3
 80023e8:	f000 f8dc 	bl	80025a4 <__malloc_lock>
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <_free_r+0x8c>)
 80023ee:	6813      	ldr	r3, [r2, #0]
 80023f0:	b933      	cbnz	r3, 8002400 <_free_r+0x2c>
 80023f2:	6063      	str	r3, [r4, #4]
 80023f4:	6014      	str	r4, [r2, #0]
 80023f6:	4628      	mov	r0, r5
 80023f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023fc:	f000 b8d8 	b.w	80025b0 <__malloc_unlock>
 8002400:	42a3      	cmp	r3, r4
 8002402:	d908      	bls.n	8002416 <_free_r+0x42>
 8002404:	6820      	ldr	r0, [r4, #0]
 8002406:	1821      	adds	r1, r4, r0
 8002408:	428b      	cmp	r3, r1
 800240a:	bf01      	itttt	eq
 800240c:	6819      	ldreq	r1, [r3, #0]
 800240e:	685b      	ldreq	r3, [r3, #4]
 8002410:	1809      	addeq	r1, r1, r0
 8002412:	6021      	streq	r1, [r4, #0]
 8002414:	e7ed      	b.n	80023f2 <_free_r+0x1e>
 8002416:	461a      	mov	r2, r3
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	b10b      	cbz	r3, 8002420 <_free_r+0x4c>
 800241c:	42a3      	cmp	r3, r4
 800241e:	d9fa      	bls.n	8002416 <_free_r+0x42>
 8002420:	6811      	ldr	r1, [r2, #0]
 8002422:	1850      	adds	r0, r2, r1
 8002424:	42a0      	cmp	r0, r4
 8002426:	d10b      	bne.n	8002440 <_free_r+0x6c>
 8002428:	6820      	ldr	r0, [r4, #0]
 800242a:	4401      	add	r1, r0
 800242c:	1850      	adds	r0, r2, r1
 800242e:	4283      	cmp	r3, r0
 8002430:	6011      	str	r1, [r2, #0]
 8002432:	d1e0      	bne.n	80023f6 <_free_r+0x22>
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4408      	add	r0, r1
 800243a:	6010      	str	r0, [r2, #0]
 800243c:	6053      	str	r3, [r2, #4]
 800243e:	e7da      	b.n	80023f6 <_free_r+0x22>
 8002440:	d902      	bls.n	8002448 <_free_r+0x74>
 8002442:	230c      	movs	r3, #12
 8002444:	602b      	str	r3, [r5, #0]
 8002446:	e7d6      	b.n	80023f6 <_free_r+0x22>
 8002448:	6820      	ldr	r0, [r4, #0]
 800244a:	1821      	adds	r1, r4, r0
 800244c:	428b      	cmp	r3, r1
 800244e:	bf01      	itttt	eq
 8002450:	6819      	ldreq	r1, [r3, #0]
 8002452:	685b      	ldreq	r3, [r3, #4]
 8002454:	1809      	addeq	r1, r1, r0
 8002456:	6021      	streq	r1, [r4, #0]
 8002458:	6063      	str	r3, [r4, #4]
 800245a:	6054      	str	r4, [r2, #4]
 800245c:	e7cb      	b.n	80023f6 <_free_r+0x22>
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	20000374 	.word	0x20000374

08002464 <sbrk_aligned>:
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	4e0e      	ldr	r6, [pc, #56]	; (80024a0 <sbrk_aligned+0x3c>)
 8002468:	460c      	mov	r4, r1
 800246a:	6831      	ldr	r1, [r6, #0]
 800246c:	4605      	mov	r5, r0
 800246e:	b911      	cbnz	r1, 8002476 <sbrk_aligned+0x12>
 8002470:	f001 fb02 	bl	8003a78 <_sbrk_r>
 8002474:	6030      	str	r0, [r6, #0]
 8002476:	4621      	mov	r1, r4
 8002478:	4628      	mov	r0, r5
 800247a:	f001 fafd 	bl	8003a78 <_sbrk_r>
 800247e:	1c43      	adds	r3, r0, #1
 8002480:	d00a      	beq.n	8002498 <sbrk_aligned+0x34>
 8002482:	1cc4      	adds	r4, r0, #3
 8002484:	f024 0403 	bic.w	r4, r4, #3
 8002488:	42a0      	cmp	r0, r4
 800248a:	d007      	beq.n	800249c <sbrk_aligned+0x38>
 800248c:	1a21      	subs	r1, r4, r0
 800248e:	4628      	mov	r0, r5
 8002490:	f001 faf2 	bl	8003a78 <_sbrk_r>
 8002494:	3001      	adds	r0, #1
 8002496:	d101      	bne.n	800249c <sbrk_aligned+0x38>
 8002498:	f04f 34ff 	mov.w	r4, #4294967295
 800249c:	4620      	mov	r0, r4
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	20000378 	.word	0x20000378

080024a4 <_malloc_r>:
 80024a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024a8:	1ccd      	adds	r5, r1, #3
 80024aa:	f025 0503 	bic.w	r5, r5, #3
 80024ae:	3508      	adds	r5, #8
 80024b0:	2d0c      	cmp	r5, #12
 80024b2:	bf38      	it	cc
 80024b4:	250c      	movcc	r5, #12
 80024b6:	2d00      	cmp	r5, #0
 80024b8:	4607      	mov	r7, r0
 80024ba:	db01      	blt.n	80024c0 <_malloc_r+0x1c>
 80024bc:	42a9      	cmp	r1, r5
 80024be:	d905      	bls.n	80024cc <_malloc_r+0x28>
 80024c0:	230c      	movs	r3, #12
 80024c2:	2600      	movs	r6, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4630      	mov	r0, r6
 80024c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80025a0 <_malloc_r+0xfc>
 80024d0:	f000 f868 	bl	80025a4 <__malloc_lock>
 80024d4:	f8d8 3000 	ldr.w	r3, [r8]
 80024d8:	461c      	mov	r4, r3
 80024da:	bb5c      	cbnz	r4, 8002534 <_malloc_r+0x90>
 80024dc:	4629      	mov	r1, r5
 80024de:	4638      	mov	r0, r7
 80024e0:	f7ff ffc0 	bl	8002464 <sbrk_aligned>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	4604      	mov	r4, r0
 80024e8:	d155      	bne.n	8002596 <_malloc_r+0xf2>
 80024ea:	f8d8 4000 	ldr.w	r4, [r8]
 80024ee:	4626      	mov	r6, r4
 80024f0:	2e00      	cmp	r6, #0
 80024f2:	d145      	bne.n	8002580 <_malloc_r+0xdc>
 80024f4:	2c00      	cmp	r4, #0
 80024f6:	d048      	beq.n	800258a <_malloc_r+0xe6>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	4631      	mov	r1, r6
 80024fc:	4638      	mov	r0, r7
 80024fe:	eb04 0903 	add.w	r9, r4, r3
 8002502:	f001 fab9 	bl	8003a78 <_sbrk_r>
 8002506:	4581      	cmp	r9, r0
 8002508:	d13f      	bne.n	800258a <_malloc_r+0xe6>
 800250a:	6821      	ldr	r1, [r4, #0]
 800250c:	4638      	mov	r0, r7
 800250e:	1a6d      	subs	r5, r5, r1
 8002510:	4629      	mov	r1, r5
 8002512:	f7ff ffa7 	bl	8002464 <sbrk_aligned>
 8002516:	3001      	adds	r0, #1
 8002518:	d037      	beq.n	800258a <_malloc_r+0xe6>
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	442b      	add	r3, r5
 800251e:	6023      	str	r3, [r4, #0]
 8002520:	f8d8 3000 	ldr.w	r3, [r8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d038      	beq.n	800259a <_malloc_r+0xf6>
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	42a2      	cmp	r2, r4
 800252c:	d12b      	bne.n	8002586 <_malloc_r+0xe2>
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	e00f      	b.n	8002554 <_malloc_r+0xb0>
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	1b52      	subs	r2, r2, r5
 8002538:	d41f      	bmi.n	800257a <_malloc_r+0xd6>
 800253a:	2a0b      	cmp	r2, #11
 800253c:	d917      	bls.n	800256e <_malloc_r+0xca>
 800253e:	1961      	adds	r1, r4, r5
 8002540:	42a3      	cmp	r3, r4
 8002542:	6025      	str	r5, [r4, #0]
 8002544:	bf18      	it	ne
 8002546:	6059      	strne	r1, [r3, #4]
 8002548:	6863      	ldr	r3, [r4, #4]
 800254a:	bf08      	it	eq
 800254c:	f8c8 1000 	streq.w	r1, [r8]
 8002550:	5162      	str	r2, [r4, r5]
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	4638      	mov	r0, r7
 8002556:	f104 060b 	add.w	r6, r4, #11
 800255a:	f000 f829 	bl	80025b0 <__malloc_unlock>
 800255e:	f026 0607 	bic.w	r6, r6, #7
 8002562:	1d23      	adds	r3, r4, #4
 8002564:	1af2      	subs	r2, r6, r3
 8002566:	d0ae      	beq.n	80024c6 <_malloc_r+0x22>
 8002568:	1b9b      	subs	r3, r3, r6
 800256a:	50a3      	str	r3, [r4, r2]
 800256c:	e7ab      	b.n	80024c6 <_malloc_r+0x22>
 800256e:	42a3      	cmp	r3, r4
 8002570:	6862      	ldr	r2, [r4, #4]
 8002572:	d1dd      	bne.n	8002530 <_malloc_r+0x8c>
 8002574:	f8c8 2000 	str.w	r2, [r8]
 8002578:	e7ec      	b.n	8002554 <_malloc_r+0xb0>
 800257a:	4623      	mov	r3, r4
 800257c:	6864      	ldr	r4, [r4, #4]
 800257e:	e7ac      	b.n	80024da <_malloc_r+0x36>
 8002580:	4634      	mov	r4, r6
 8002582:	6876      	ldr	r6, [r6, #4]
 8002584:	e7b4      	b.n	80024f0 <_malloc_r+0x4c>
 8002586:	4613      	mov	r3, r2
 8002588:	e7cc      	b.n	8002524 <_malloc_r+0x80>
 800258a:	230c      	movs	r3, #12
 800258c:	4638      	mov	r0, r7
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	f000 f80e 	bl	80025b0 <__malloc_unlock>
 8002594:	e797      	b.n	80024c6 <_malloc_r+0x22>
 8002596:	6025      	str	r5, [r4, #0]
 8002598:	e7dc      	b.n	8002554 <_malloc_r+0xb0>
 800259a:	605b      	str	r3, [r3, #4]
 800259c:	deff      	udf	#255	; 0xff
 800259e:	bf00      	nop
 80025a0:	20000374 	.word	0x20000374

080025a4 <__malloc_lock>:
 80025a4:	4801      	ldr	r0, [pc, #4]	; (80025ac <__malloc_lock+0x8>)
 80025a6:	f7ff bf0e 	b.w	80023c6 <__retarget_lock_acquire_recursive>
 80025aa:	bf00      	nop
 80025ac:	20000370 	.word	0x20000370

080025b0 <__malloc_unlock>:
 80025b0:	4801      	ldr	r0, [pc, #4]	; (80025b8 <__malloc_unlock+0x8>)
 80025b2:	f7ff bf09 	b.w	80023c8 <__retarget_lock_release_recursive>
 80025b6:	bf00      	nop
 80025b8:	20000370 	.word	0x20000370

080025bc <sulp>:
 80025bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c0:	460f      	mov	r7, r1
 80025c2:	4690      	mov	r8, r2
 80025c4:	f002 f962 	bl	800488c <__ulp>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	f1b8 0f00 	cmp.w	r8, #0
 80025d0:	d011      	beq.n	80025f6 <sulp+0x3a>
 80025d2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80025d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80025da:	2b00      	cmp	r3, #0
 80025dc:	dd0b      	ble.n	80025f6 <sulp+0x3a>
 80025de:	2400      	movs	r4, #0
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80025e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80025ea:	4622      	mov	r2, r4
 80025ec:	462b      	mov	r3, r5
 80025ee:	f7fd ff73 	bl	80004d8 <__aeabi_dmul>
 80025f2:	4604      	mov	r4, r0
 80025f4:	460d      	mov	r5, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002600 <_strtod_l>:
 8002600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002604:	b09f      	sub	sp, #124	; 0x7c
 8002606:	9217      	str	r2, [sp, #92]	; 0x5c
 8002608:	2200      	movs	r2, #0
 800260a:	4604      	mov	r4, r0
 800260c:	921a      	str	r2, [sp, #104]	; 0x68
 800260e:	460d      	mov	r5, r1
 8002610:	f04f 0800 	mov.w	r8, #0
 8002614:	f04f 0900 	mov.w	r9, #0
 8002618:	460a      	mov	r2, r1
 800261a:	9219      	str	r2, [sp, #100]	; 0x64
 800261c:	7811      	ldrb	r1, [r2, #0]
 800261e:	292b      	cmp	r1, #43	; 0x2b
 8002620:	d04a      	beq.n	80026b8 <_strtod_l+0xb8>
 8002622:	d838      	bhi.n	8002696 <_strtod_l+0x96>
 8002624:	290d      	cmp	r1, #13
 8002626:	d832      	bhi.n	800268e <_strtod_l+0x8e>
 8002628:	2908      	cmp	r1, #8
 800262a:	d832      	bhi.n	8002692 <_strtod_l+0x92>
 800262c:	2900      	cmp	r1, #0
 800262e:	d03b      	beq.n	80026a8 <_strtod_l+0xa8>
 8002630:	2200      	movs	r2, #0
 8002632:	920e      	str	r2, [sp, #56]	; 0x38
 8002634:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8002636:	7832      	ldrb	r2, [r6, #0]
 8002638:	2a30      	cmp	r2, #48	; 0x30
 800263a:	f040 80b2 	bne.w	80027a2 <_strtod_l+0x1a2>
 800263e:	7872      	ldrb	r2, [r6, #1]
 8002640:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002644:	2a58      	cmp	r2, #88	; 0x58
 8002646:	d16e      	bne.n	8002726 <_strtod_l+0x126>
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800264c:	4620      	mov	r0, r4
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	ab1a      	add	r3, sp, #104	; 0x68
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4a8c      	ldr	r2, [pc, #560]	; (8002888 <_strtod_l+0x288>)
 8002656:	ab1b      	add	r3, sp, #108	; 0x6c
 8002658:	a919      	add	r1, sp, #100	; 0x64
 800265a:	f001 faa7 	bl	8003bac <__gethex>
 800265e:	f010 070f 	ands.w	r7, r0, #15
 8002662:	4605      	mov	r5, r0
 8002664:	d005      	beq.n	8002672 <_strtod_l+0x72>
 8002666:	2f06      	cmp	r7, #6
 8002668:	d128      	bne.n	80026bc <_strtod_l+0xbc>
 800266a:	2300      	movs	r3, #0
 800266c:	3601      	adds	r6, #1
 800266e:	9619      	str	r6, [sp, #100]	; 0x64
 8002670:	930e      	str	r3, [sp, #56]	; 0x38
 8002672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 85a0 	bne.w	80031ba <_strtod_l+0xbba>
 800267a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800267c:	b1cb      	cbz	r3, 80026b2 <_strtod_l+0xb2>
 800267e:	4642      	mov	r2, r8
 8002680:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	b01f      	add	sp, #124	; 0x7c
 800268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268e:	2920      	cmp	r1, #32
 8002690:	d1ce      	bne.n	8002630 <_strtod_l+0x30>
 8002692:	3201      	adds	r2, #1
 8002694:	e7c1      	b.n	800261a <_strtod_l+0x1a>
 8002696:	292d      	cmp	r1, #45	; 0x2d
 8002698:	d1ca      	bne.n	8002630 <_strtod_l+0x30>
 800269a:	2101      	movs	r1, #1
 800269c:	910e      	str	r1, [sp, #56]	; 0x38
 800269e:	1c51      	adds	r1, r2, #1
 80026a0:	9119      	str	r1, [sp, #100]	; 0x64
 80026a2:	7852      	ldrb	r2, [r2, #1]
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d1c5      	bne.n	8002634 <_strtod_l+0x34>
 80026a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80026aa:	9519      	str	r5, [sp, #100]	; 0x64
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 8582 	bne.w	80031b6 <_strtod_l+0xbb6>
 80026b2:	4642      	mov	r2, r8
 80026b4:	464b      	mov	r3, r9
 80026b6:	e7e5      	b.n	8002684 <_strtod_l+0x84>
 80026b8:	2100      	movs	r1, #0
 80026ba:	e7ef      	b.n	800269c <_strtod_l+0x9c>
 80026bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80026be:	b13a      	cbz	r2, 80026d0 <_strtod_l+0xd0>
 80026c0:	2135      	movs	r1, #53	; 0x35
 80026c2:	a81c      	add	r0, sp, #112	; 0x70
 80026c4:	f002 f9ce 	bl	8004a64 <__copybits>
 80026c8:	4620      	mov	r0, r4
 80026ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 80026cc:	f001 fdb2 	bl	8004234 <_Bfree>
 80026d0:	3f01      	subs	r7, #1
 80026d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80026d4:	2f04      	cmp	r7, #4
 80026d6:	d806      	bhi.n	80026e6 <_strtod_l+0xe6>
 80026d8:	e8df f007 	tbb	[pc, r7]
 80026dc:	201d0314 	.word	0x201d0314
 80026e0:	14          	.byte	0x14
 80026e1:	00          	.byte	0x00
 80026e2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80026e6:	05e9      	lsls	r1, r5, #23
 80026e8:	bf48      	it	mi
 80026ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80026ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80026f2:	0d1b      	lsrs	r3, r3, #20
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1bb      	bne.n	8002672 <_strtod_l+0x72>
 80026fa:	f7ff fe39 	bl	8002370 <__errno>
 80026fe:	2322      	movs	r3, #34	; 0x22
 8002700:	6003      	str	r3, [r0, #0]
 8002702:	e7b6      	b.n	8002672 <_strtod_l+0x72>
 8002704:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8002708:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800270c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002710:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8002714:	e7e7      	b.n	80026e6 <_strtod_l+0xe6>
 8002716:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800288c <_strtod_l+0x28c>
 800271a:	e7e4      	b.n	80026e6 <_strtod_l+0xe6>
 800271c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8002720:	f04f 38ff 	mov.w	r8, #4294967295
 8002724:	e7df      	b.n	80026e6 <_strtod_l+0xe6>
 8002726:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	9219      	str	r2, [sp, #100]	; 0x64
 800272c:	785b      	ldrb	r3, [r3, #1]
 800272e:	2b30      	cmp	r3, #48	; 0x30
 8002730:	d0f9      	beq.n	8002726 <_strtod_l+0x126>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d09d      	beq.n	8002672 <_strtod_l+0x72>
 8002736:	2301      	movs	r3, #1
 8002738:	f04f 0a00 	mov.w	sl, #0
 800273c:	220a      	movs	r2, #10
 800273e:	46d3      	mov	fp, sl
 8002740:	9305      	str	r3, [sp, #20]
 8002742:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002744:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8002748:	930b      	str	r3, [sp, #44]	; 0x2c
 800274a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800274c:	7806      	ldrb	r6, [r0, #0]
 800274e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8002752:	b2d9      	uxtb	r1, r3
 8002754:	2909      	cmp	r1, #9
 8002756:	d926      	bls.n	80027a6 <_strtod_l+0x1a6>
 8002758:	2201      	movs	r2, #1
 800275a:	494d      	ldr	r1, [pc, #308]	; (8002890 <_strtod_l+0x290>)
 800275c:	f001 f97a 	bl	8003a54 <strncmp>
 8002760:	2800      	cmp	r0, #0
 8002762:	d030      	beq.n	80027c6 <_strtod_l+0x1c6>
 8002764:	2000      	movs	r0, #0
 8002766:	4632      	mov	r2, r6
 8002768:	4603      	mov	r3, r0
 800276a:	465e      	mov	r6, fp
 800276c:	9008      	str	r0, [sp, #32]
 800276e:	2a65      	cmp	r2, #101	; 0x65
 8002770:	d001      	beq.n	8002776 <_strtod_l+0x176>
 8002772:	2a45      	cmp	r2, #69	; 0x45
 8002774:	d113      	bne.n	800279e <_strtod_l+0x19e>
 8002776:	b91e      	cbnz	r6, 8002780 <_strtod_l+0x180>
 8002778:	9a05      	ldr	r2, [sp, #20]
 800277a:	4302      	orrs	r2, r0
 800277c:	d094      	beq.n	80026a8 <_strtod_l+0xa8>
 800277e:	2600      	movs	r6, #0
 8002780:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8002782:	1c6a      	adds	r2, r5, #1
 8002784:	9219      	str	r2, [sp, #100]	; 0x64
 8002786:	786a      	ldrb	r2, [r5, #1]
 8002788:	2a2b      	cmp	r2, #43	; 0x2b
 800278a:	d074      	beq.n	8002876 <_strtod_l+0x276>
 800278c:	2a2d      	cmp	r2, #45	; 0x2d
 800278e:	d078      	beq.n	8002882 <_strtod_l+0x282>
 8002790:	f04f 0c00 	mov.w	ip, #0
 8002794:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8002798:	2909      	cmp	r1, #9
 800279a:	d97f      	bls.n	800289c <_strtod_l+0x29c>
 800279c:	9519      	str	r5, [sp, #100]	; 0x64
 800279e:	2700      	movs	r7, #0
 80027a0:	e09e      	b.n	80028e0 <_strtod_l+0x2e0>
 80027a2:	2300      	movs	r3, #0
 80027a4:	e7c8      	b.n	8002738 <_strtod_l+0x138>
 80027a6:	f1bb 0f08 	cmp.w	fp, #8
 80027aa:	bfd8      	it	le
 80027ac:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80027ae:	f100 0001 	add.w	r0, r0, #1
 80027b2:	bfd6      	itet	le
 80027b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80027b8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80027bc:	930a      	strle	r3, [sp, #40]	; 0x28
 80027be:	f10b 0b01 	add.w	fp, fp, #1
 80027c2:	9019      	str	r0, [sp, #100]	; 0x64
 80027c4:	e7c1      	b.n	800274a <_strtod_l+0x14a>
 80027c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	9219      	str	r2, [sp, #100]	; 0x64
 80027cc:	785a      	ldrb	r2, [r3, #1]
 80027ce:	f1bb 0f00 	cmp.w	fp, #0
 80027d2:	d037      	beq.n	8002844 <_strtod_l+0x244>
 80027d4:	465e      	mov	r6, fp
 80027d6:	9008      	str	r0, [sp, #32]
 80027d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d912      	bls.n	8002806 <_strtod_l+0x206>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e7c4      	b.n	800276e <_strtod_l+0x16e>
 80027e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80027e6:	3001      	adds	r0, #1
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	9219      	str	r2, [sp, #100]	; 0x64
 80027ec:	785a      	ldrb	r2, [r3, #1]
 80027ee:	2a30      	cmp	r2, #48	; 0x30
 80027f0:	d0f8      	beq.n	80027e4 <_strtod_l+0x1e4>
 80027f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	f200 84e4 	bhi.w	80031c4 <_strtod_l+0xbc4>
 80027fc:	9008      	str	r0, [sp, #32]
 80027fe:	2000      	movs	r0, #0
 8002800:	4606      	mov	r6, r0
 8002802:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002804:	930b      	str	r3, [sp, #44]	; 0x2c
 8002806:	3a30      	subs	r2, #48	; 0x30
 8002808:	f100 0301 	add.w	r3, r0, #1
 800280c:	d014      	beq.n	8002838 <_strtod_l+0x238>
 800280e:	9908      	ldr	r1, [sp, #32]
 8002810:	eb00 0c06 	add.w	ip, r0, r6
 8002814:	4419      	add	r1, r3
 8002816:	9108      	str	r1, [sp, #32]
 8002818:	4633      	mov	r3, r6
 800281a:	210a      	movs	r1, #10
 800281c:	4563      	cmp	r3, ip
 800281e:	d113      	bne.n	8002848 <_strtod_l+0x248>
 8002820:	1833      	adds	r3, r6, r0
 8002822:	2b08      	cmp	r3, #8
 8002824:	f106 0601 	add.w	r6, r6, #1
 8002828:	4406      	add	r6, r0
 800282a:	dc1a      	bgt.n	8002862 <_strtod_l+0x262>
 800282c:	230a      	movs	r3, #10
 800282e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002830:	fb03 2301 	mla	r3, r3, r1, r2
 8002834:	930a      	str	r3, [sp, #40]	; 0x28
 8002836:	2300      	movs	r3, #0
 8002838:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800283a:	4618      	mov	r0, r3
 800283c:	1c51      	adds	r1, r2, #1
 800283e:	9119      	str	r1, [sp, #100]	; 0x64
 8002840:	7852      	ldrb	r2, [r2, #1]
 8002842:	e7c9      	b.n	80027d8 <_strtod_l+0x1d8>
 8002844:	4658      	mov	r0, fp
 8002846:	e7d2      	b.n	80027ee <_strtod_l+0x1ee>
 8002848:	2b08      	cmp	r3, #8
 800284a:	f103 0301 	add.w	r3, r3, #1
 800284e:	dc03      	bgt.n	8002858 <_strtod_l+0x258>
 8002850:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002852:	434f      	muls	r7, r1
 8002854:	970a      	str	r7, [sp, #40]	; 0x28
 8002856:	e7e1      	b.n	800281c <_strtod_l+0x21c>
 8002858:	2b10      	cmp	r3, #16
 800285a:	bfd8      	it	le
 800285c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8002860:	e7dc      	b.n	800281c <_strtod_l+0x21c>
 8002862:	2e10      	cmp	r6, #16
 8002864:	bfdc      	itt	le
 8002866:	230a      	movle	r3, #10
 8002868:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800286c:	e7e3      	b.n	8002836 <_strtod_l+0x236>
 800286e:	2300      	movs	r3, #0
 8002870:	9308      	str	r3, [sp, #32]
 8002872:	2301      	movs	r3, #1
 8002874:	e780      	b.n	8002778 <_strtod_l+0x178>
 8002876:	f04f 0c00 	mov.w	ip, #0
 800287a:	1caa      	adds	r2, r5, #2
 800287c:	9219      	str	r2, [sp, #100]	; 0x64
 800287e:	78aa      	ldrb	r2, [r5, #2]
 8002880:	e788      	b.n	8002794 <_strtod_l+0x194>
 8002882:	f04f 0c01 	mov.w	ip, #1
 8002886:	e7f8      	b.n	800287a <_strtod_l+0x27a>
 8002888:	080051d4 	.word	0x080051d4
 800288c:	7ff00000 	.word	0x7ff00000
 8002890:	080051c3 	.word	0x080051c3
 8002894:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002896:	1c51      	adds	r1, r2, #1
 8002898:	9119      	str	r1, [sp, #100]	; 0x64
 800289a:	7852      	ldrb	r2, [r2, #1]
 800289c:	2a30      	cmp	r2, #48	; 0x30
 800289e:	d0f9      	beq.n	8002894 <_strtod_l+0x294>
 80028a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80028a4:	2908      	cmp	r1, #8
 80028a6:	f63f af7a 	bhi.w	800279e <_strtod_l+0x19e>
 80028aa:	3a30      	subs	r2, #48	; 0x30
 80028ac:	9209      	str	r2, [sp, #36]	; 0x24
 80028ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80028b0:	920c      	str	r2, [sp, #48]	; 0x30
 80028b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80028b4:	1c57      	adds	r7, r2, #1
 80028b6:	9719      	str	r7, [sp, #100]	; 0x64
 80028b8:	7852      	ldrb	r2, [r2, #1]
 80028ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80028be:	f1be 0f09 	cmp.w	lr, #9
 80028c2:	d938      	bls.n	8002936 <_strtod_l+0x336>
 80028c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028c6:	1a7f      	subs	r7, r7, r1
 80028c8:	2f08      	cmp	r7, #8
 80028ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80028ce:	dc03      	bgt.n	80028d8 <_strtod_l+0x2d8>
 80028d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028d2:	428f      	cmp	r7, r1
 80028d4:	bfa8      	it	ge
 80028d6:	460f      	movge	r7, r1
 80028d8:	f1bc 0f00 	cmp.w	ip, #0
 80028dc:	d000      	beq.n	80028e0 <_strtod_l+0x2e0>
 80028de:	427f      	negs	r7, r7
 80028e0:	2e00      	cmp	r6, #0
 80028e2:	d14f      	bne.n	8002984 <_strtod_l+0x384>
 80028e4:	9905      	ldr	r1, [sp, #20]
 80028e6:	4301      	orrs	r1, r0
 80028e8:	f47f aec3 	bne.w	8002672 <_strtod_l+0x72>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f aedb 	bne.w	80026a8 <_strtod_l+0xa8>
 80028f2:	2a69      	cmp	r2, #105	; 0x69
 80028f4:	d029      	beq.n	800294a <_strtod_l+0x34a>
 80028f6:	dc26      	bgt.n	8002946 <_strtod_l+0x346>
 80028f8:	2a49      	cmp	r2, #73	; 0x49
 80028fa:	d026      	beq.n	800294a <_strtod_l+0x34a>
 80028fc:	2a4e      	cmp	r2, #78	; 0x4e
 80028fe:	f47f aed3 	bne.w	80026a8 <_strtod_l+0xa8>
 8002902:	499a      	ldr	r1, [pc, #616]	; (8002b6c <_strtod_l+0x56c>)
 8002904:	a819      	add	r0, sp, #100	; 0x64
 8002906:	f001 fb93 	bl	8004030 <__match>
 800290a:	2800      	cmp	r0, #0
 800290c:	f43f aecc 	beq.w	80026a8 <_strtod_l+0xa8>
 8002910:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b28      	cmp	r3, #40	; 0x28
 8002916:	d12f      	bne.n	8002978 <_strtod_l+0x378>
 8002918:	4995      	ldr	r1, [pc, #596]	; (8002b70 <_strtod_l+0x570>)
 800291a:	aa1c      	add	r2, sp, #112	; 0x70
 800291c:	a819      	add	r0, sp, #100	; 0x64
 800291e:	f001 fb9b 	bl	8004058 <__hexnan>
 8002922:	2805      	cmp	r0, #5
 8002924:	d128      	bne.n	8002978 <_strtod_l+0x378>
 8002926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002928:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800292c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8002930:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8002934:	e69d      	b.n	8002672 <_strtod_l+0x72>
 8002936:	210a      	movs	r1, #10
 8002938:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800293a:	fb01 2107 	mla	r1, r1, r7, r2
 800293e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002942:	9209      	str	r2, [sp, #36]	; 0x24
 8002944:	e7b5      	b.n	80028b2 <_strtod_l+0x2b2>
 8002946:	2a6e      	cmp	r2, #110	; 0x6e
 8002948:	e7d9      	b.n	80028fe <_strtod_l+0x2fe>
 800294a:	498a      	ldr	r1, [pc, #552]	; (8002b74 <_strtod_l+0x574>)
 800294c:	a819      	add	r0, sp, #100	; 0x64
 800294e:	f001 fb6f 	bl	8004030 <__match>
 8002952:	2800      	cmp	r0, #0
 8002954:	f43f aea8 	beq.w	80026a8 <_strtod_l+0xa8>
 8002958:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800295a:	4987      	ldr	r1, [pc, #540]	; (8002b78 <_strtod_l+0x578>)
 800295c:	3b01      	subs	r3, #1
 800295e:	a819      	add	r0, sp, #100	; 0x64
 8002960:	9319      	str	r3, [sp, #100]	; 0x64
 8002962:	f001 fb65 	bl	8004030 <__match>
 8002966:	b910      	cbnz	r0, 800296e <_strtod_l+0x36e>
 8002968:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800296a:	3301      	adds	r3, #1
 800296c:	9319      	str	r3, [sp, #100]	; 0x64
 800296e:	f04f 0800 	mov.w	r8, #0
 8002972:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8002b7c <_strtod_l+0x57c>
 8002976:	e67c      	b.n	8002672 <_strtod_l+0x72>
 8002978:	4881      	ldr	r0, [pc, #516]	; (8002b80 <_strtod_l+0x580>)
 800297a:	f001 f8a9 	bl	8003ad0 <nan>
 800297e:	4680      	mov	r8, r0
 8002980:	4689      	mov	r9, r1
 8002982:	e676      	b.n	8002672 <_strtod_l+0x72>
 8002984:	9b08      	ldr	r3, [sp, #32]
 8002986:	f1bb 0f00 	cmp.w	fp, #0
 800298a:	bf08      	it	eq
 800298c:	46b3      	moveq	fp, r6
 800298e:	1afb      	subs	r3, r7, r3
 8002990:	2e10      	cmp	r6, #16
 8002992:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002994:	4635      	mov	r5, r6
 8002996:	9309      	str	r3, [sp, #36]	; 0x24
 8002998:	bfa8      	it	ge
 800299a:	2510      	movge	r5, #16
 800299c:	f7fd fd22 	bl	80003e4 <__aeabi_ui2d>
 80029a0:	2e09      	cmp	r6, #9
 80029a2:	4680      	mov	r8, r0
 80029a4:	4689      	mov	r9, r1
 80029a6:	dd13      	ble.n	80029d0 <_strtod_l+0x3d0>
 80029a8:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <_strtod_l+0x584>)
 80029aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80029ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80029b2:	f7fd fd91 	bl	80004d8 <__aeabi_dmul>
 80029b6:	4680      	mov	r8, r0
 80029b8:	4650      	mov	r0, sl
 80029ba:	4689      	mov	r9, r1
 80029bc:	f7fd fd12 	bl	80003e4 <__aeabi_ui2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4640      	mov	r0, r8
 80029c6:	4649      	mov	r1, r9
 80029c8:	f7fd fbd0 	bl	800016c <__adddf3>
 80029cc:	4680      	mov	r8, r0
 80029ce:	4689      	mov	r9, r1
 80029d0:	2e0f      	cmp	r6, #15
 80029d2:	dc36      	bgt.n	8002a42 <_strtod_l+0x442>
 80029d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f43f ae4b 	beq.w	8002672 <_strtod_l+0x72>
 80029dc:	dd22      	ble.n	8002a24 <_strtod_l+0x424>
 80029de:	2b16      	cmp	r3, #22
 80029e0:	dc09      	bgt.n	80029f6 <_strtod_l+0x3f6>
 80029e2:	4968      	ldr	r1, [pc, #416]	; (8002b84 <_strtod_l+0x584>)
 80029e4:	4642      	mov	r2, r8
 80029e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80029ea:	464b      	mov	r3, r9
 80029ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029f0:	f7fd fd72 	bl	80004d8 <__aeabi_dmul>
 80029f4:	e7c3      	b.n	800297e <_strtod_l+0x37e>
 80029f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029f8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80029fc:	4293      	cmp	r3, r2
 80029fe:	db20      	blt.n	8002a42 <_strtod_l+0x442>
 8002a00:	4c60      	ldr	r4, [pc, #384]	; (8002b84 <_strtod_l+0x584>)
 8002a02:	f1c6 060f 	rsb	r6, r6, #15
 8002a06:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8002a0a:	4642      	mov	r2, r8
 8002a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a10:	464b      	mov	r3, r9
 8002a12:	f7fd fd61 	bl	80004d8 <__aeabi_dmul>
 8002a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a18:	1b9e      	subs	r6, r3, r6
 8002a1a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8002a1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002a22:	e7e5      	b.n	80029f0 <_strtod_l+0x3f0>
 8002a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a26:	3316      	adds	r3, #22
 8002a28:	db0b      	blt.n	8002a42 <_strtod_l+0x442>
 8002a2a:	9b08      	ldr	r3, [sp, #32]
 8002a2c:	4640      	mov	r0, r8
 8002a2e:	1bdf      	subs	r7, r3, r7
 8002a30:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <_strtod_l+0x584>)
 8002a32:	4649      	mov	r1, r9
 8002a34:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a3c:	f7fd fe76 	bl	800072c <__aeabi_ddiv>
 8002a40:	e79d      	b.n	800297e <_strtod_l+0x37e>
 8002a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a44:	1b75      	subs	r5, r6, r5
 8002a46:	441d      	add	r5, r3
 8002a48:	2d00      	cmp	r5, #0
 8002a4a:	dd70      	ble.n	8002b2e <_strtod_l+0x52e>
 8002a4c:	f015 030f 	ands.w	r3, r5, #15
 8002a50:	d00a      	beq.n	8002a68 <_strtod_l+0x468>
 8002a52:	494c      	ldr	r1, [pc, #304]	; (8002b84 <_strtod_l+0x584>)
 8002a54:	4642      	mov	r2, r8
 8002a56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a5e:	464b      	mov	r3, r9
 8002a60:	f7fd fd3a 	bl	80004d8 <__aeabi_dmul>
 8002a64:	4680      	mov	r8, r0
 8002a66:	4689      	mov	r9, r1
 8002a68:	f035 050f 	bics.w	r5, r5, #15
 8002a6c:	d04d      	beq.n	8002b0a <_strtod_l+0x50a>
 8002a6e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8002a72:	dd22      	ble.n	8002aba <_strtod_l+0x4ba>
 8002a74:	2600      	movs	r6, #0
 8002a76:	46b3      	mov	fp, r6
 8002a78:	960b      	str	r6, [sp, #44]	; 0x2c
 8002a7a:	9608      	str	r6, [sp, #32]
 8002a7c:	2322      	movs	r3, #34	; 0x22
 8002a7e:	f04f 0800 	mov.w	r8, #0
 8002a82:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8002b7c <_strtod_l+0x57c>
 8002a86:	6023      	str	r3, [r4, #0]
 8002a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f43f adf1 	beq.w	8002672 <_strtod_l+0x72>
 8002a90:	4620      	mov	r0, r4
 8002a92:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002a94:	f001 fbce 	bl	8004234 <_Bfree>
 8002a98:	4620      	mov	r0, r4
 8002a9a:	9908      	ldr	r1, [sp, #32]
 8002a9c:	f001 fbca 	bl	8004234 <_Bfree>
 8002aa0:	4659      	mov	r1, fp
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f001 fbc6 	bl	8004234 <_Bfree>
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002aac:	f001 fbc2 	bl	8004234 <_Bfree>
 8002ab0:	4631      	mov	r1, r6
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f001 fbbe 	bl	8004234 <_Bfree>
 8002ab8:	e5db      	b.n	8002672 <_strtod_l+0x72>
 8002aba:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <_strtod_l+0x588>)
 8002abc:	4640      	mov	r0, r8
 8002abe:	9305      	str	r3, [sp, #20]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	469a      	mov	sl, r3
 8002ac6:	112d      	asrs	r5, r5, #4
 8002ac8:	2d01      	cmp	r5, #1
 8002aca:	dc21      	bgt.n	8002b10 <_strtod_l+0x510>
 8002acc:	b10b      	cbz	r3, 8002ad2 <_strtod_l+0x4d2>
 8002ace:	4680      	mov	r8, r0
 8002ad0:	4689      	mov	r9, r1
 8002ad2:	492d      	ldr	r1, [pc, #180]	; (8002b88 <_strtod_l+0x588>)
 8002ad4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8002ad8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002adc:	4642      	mov	r2, r8
 8002ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	f7fd fcf8 	bl	80004d8 <__aeabi_dmul>
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <_strtod_l+0x57c>)
 8002aea:	460a      	mov	r2, r1
 8002aec:	400b      	ands	r3, r1
 8002aee:	4927      	ldr	r1, [pc, #156]	; (8002b8c <_strtod_l+0x58c>)
 8002af0:	4680      	mov	r8, r0
 8002af2:	428b      	cmp	r3, r1
 8002af4:	d8be      	bhi.n	8002a74 <_strtod_l+0x474>
 8002af6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8002afa:	428b      	cmp	r3, r1
 8002afc:	bf86      	itte	hi
 8002afe:	f04f 38ff 	movhi.w	r8, #4294967295
 8002b02:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8002b90 <_strtod_l+0x590>
 8002b06:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9305      	str	r3, [sp, #20]
 8002b0e:	e07b      	b.n	8002c08 <_strtod_l+0x608>
 8002b10:	07ea      	lsls	r2, r5, #31
 8002b12:	d505      	bpl.n	8002b20 <_strtod_l+0x520>
 8002b14:	9b05      	ldr	r3, [sp, #20]
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f7fd fcdd 	bl	80004d8 <__aeabi_dmul>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	9a05      	ldr	r2, [sp, #20]
 8002b22:	f10a 0a01 	add.w	sl, sl, #1
 8002b26:	3208      	adds	r2, #8
 8002b28:	106d      	asrs	r5, r5, #1
 8002b2a:	9205      	str	r2, [sp, #20]
 8002b2c:	e7cc      	b.n	8002ac8 <_strtod_l+0x4c8>
 8002b2e:	d0ec      	beq.n	8002b0a <_strtod_l+0x50a>
 8002b30:	426d      	negs	r5, r5
 8002b32:	f015 020f 	ands.w	r2, r5, #15
 8002b36:	d00a      	beq.n	8002b4e <_strtod_l+0x54e>
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <_strtod_l+0x584>)
 8002b3a:	4640      	mov	r0, r8
 8002b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b40:	4649      	mov	r1, r9
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fdf1 	bl	800072c <__aeabi_ddiv>
 8002b4a:	4680      	mov	r8, r0
 8002b4c:	4689      	mov	r9, r1
 8002b4e:	112d      	asrs	r5, r5, #4
 8002b50:	d0db      	beq.n	8002b0a <_strtod_l+0x50a>
 8002b52:	2d1f      	cmp	r5, #31
 8002b54:	dd1e      	ble.n	8002b94 <_strtod_l+0x594>
 8002b56:	2600      	movs	r6, #0
 8002b58:	46b3      	mov	fp, r6
 8002b5a:	960b      	str	r6, [sp, #44]	; 0x2c
 8002b5c:	9608      	str	r6, [sp, #32]
 8002b5e:	2322      	movs	r3, #34	; 0x22
 8002b60:	f04f 0800 	mov.w	r8, #0
 8002b64:	f04f 0900 	mov.w	r9, #0
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	e78d      	b.n	8002a88 <_strtod_l+0x488>
 8002b6c:	080051ce 	.word	0x080051ce
 8002b70:	080051e8 	.word	0x080051e8
 8002b74:	080051c5 	.word	0x080051c5
 8002b78:	080051c8 	.word	0x080051c8
 8002b7c:	7ff00000 	.word	0x7ff00000
 8002b80:	0800557f 	.word	0x0800557f
 8002b84:	08005470 	.word	0x08005470
 8002b88:	08005448 	.word	0x08005448
 8002b8c:	7ca00000 	.word	0x7ca00000
 8002b90:	7fefffff 	.word	0x7fefffff
 8002b94:	f015 0310 	ands.w	r3, r5, #16
 8002b98:	bf18      	it	ne
 8002b9a:	236a      	movne	r3, #106	; 0x6a
 8002b9c:	4640      	mov	r0, r8
 8002b9e:	9305      	str	r3, [sp, #20]
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8002e70 <_strtod_l+0x870>
 8002ba8:	07ea      	lsls	r2, r5, #31
 8002baa:	d504      	bpl.n	8002bb6 <_strtod_l+0x5b6>
 8002bac:	e9da 2300 	ldrd	r2, r3, [sl]
 8002bb0:	f7fd fc92 	bl	80004d8 <__aeabi_dmul>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	106d      	asrs	r5, r5, #1
 8002bb8:	f10a 0a08 	add.w	sl, sl, #8
 8002bbc:	d1f4      	bne.n	8002ba8 <_strtod_l+0x5a8>
 8002bbe:	b10b      	cbz	r3, 8002bc4 <_strtod_l+0x5c4>
 8002bc0:	4680      	mov	r8, r0
 8002bc2:	4689      	mov	r9, r1
 8002bc4:	9b05      	ldr	r3, [sp, #20]
 8002bc6:	b1bb      	cbz	r3, 8002bf8 <_strtod_l+0x5f8>
 8002bc8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8002bcc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	dd10      	ble.n	8002bf8 <_strtod_l+0x5f8>
 8002bd6:	2b1f      	cmp	r3, #31
 8002bd8:	f340 8128 	ble.w	8002e2c <_strtod_l+0x82c>
 8002bdc:	2b34      	cmp	r3, #52	; 0x34
 8002bde:	bfd8      	it	le
 8002be0:	f04f 33ff 	movle.w	r3, #4294967295
 8002be4:	f04f 0800 	mov.w	r8, #0
 8002be8:	bfcf      	iteee	gt
 8002bea:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8002bee:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8002bf2:	4093      	lslle	r3, r2
 8002bf4:	ea03 0901 	andle.w	r9, r3, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	4640      	mov	r0, r8
 8002bfe:	4649      	mov	r1, r9
 8002c00:	f7fd fed2 	bl	80009a8 <__aeabi_dcmpeq>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d1a6      	bne.n	8002b56 <_strtod_l+0x556>
 8002c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c0a:	465a      	mov	r2, fp
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4633      	mov	r3, r6
 8002c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c14:	f001 fb76 	bl	8004304 <__s2b>
 8002c18:	900b      	str	r0, [sp, #44]	; 0x2c
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	f43f af2a 	beq.w	8002a74 <_strtod_l+0x474>
 8002c20:	2600      	movs	r6, #0
 8002c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c24:	9b08      	ldr	r3, [sp, #32]
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	eba3 0307 	sub.w	r3, r3, r7
 8002c2c:	bfa8      	it	ge
 8002c2e:	2300      	movge	r3, #0
 8002c30:	46b3      	mov	fp, r6
 8002c32:	9312      	str	r3, [sp, #72]	; 0x48
 8002c34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8002c38:	9316      	str	r3, [sp, #88]	; 0x58
 8002c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	f001 fab8 	bl	80041b4 <_Balloc>
 8002c44:	9008      	str	r0, [sp, #32]
 8002c46:	2800      	cmp	r0, #0
 8002c48:	f43f af18 	beq.w	8002a7c <_strtod_l+0x47c>
 8002c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c4e:	300c      	adds	r0, #12
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	f103 010c 	add.w	r1, r3, #12
 8002c56:	3202      	adds	r2, #2
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	f000 ff2b 	bl	8003ab4 <memcpy>
 8002c5e:	ab1c      	add	r3, sp, #112	; 0x70
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	ab1b      	add	r3, sp, #108	; 0x6c
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	4642      	mov	r2, r8
 8002c68:	464b      	mov	r3, r9
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002c70:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8002c74:	f001 fe72 	bl	800495c <__d2b>
 8002c78:	901a      	str	r0, [sp, #104]	; 0x68
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	f43f aefe 	beq.w	8002a7c <_strtod_l+0x47c>
 8002c80:	2101      	movs	r1, #1
 8002c82:	4620      	mov	r0, r4
 8002c84:	f001 fbd6 	bl	8004434 <__i2b>
 8002c88:	4683      	mov	fp, r0
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	f43f aef6 	beq.w	8002a7c <_strtod_l+0x47c>
 8002c90:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8002c92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002c94:	2f00      	cmp	r7, #0
 8002c96:	bfab      	itete	ge
 8002c98:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8002c9a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8002c9c:	eb07 0a03 	addge.w	sl, r7, r3
 8002ca0:	1bdd      	sublt	r5, r3, r7
 8002ca2:	9b05      	ldr	r3, [sp, #20]
 8002ca4:	bfa8      	it	ge
 8002ca6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8002ca8:	eba7 0703 	sub.w	r7, r7, r3
 8002cac:	4417      	add	r7, r2
 8002cae:	4b71      	ldr	r3, [pc, #452]	; (8002e74 <_strtod_l+0x874>)
 8002cb0:	f107 37ff 	add.w	r7, r7, #4294967295
 8002cb4:	bfb8      	it	lt
 8002cb6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8002cc0:	f280 80c7 	bge.w	8002e52 <_strtod_l+0x852>
 8002cc4:	1bdb      	subs	r3, r3, r7
 8002cc6:	2b1f      	cmp	r3, #31
 8002cc8:	f04f 0101 	mov.w	r1, #1
 8002ccc:	eba2 0203 	sub.w	r2, r2, r3
 8002cd0:	f300 80b3 	bgt.w	8002e3a <_strtod_l+0x83a>
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8002cde:	eb0a 0702 	add.w	r7, sl, r2
 8002ce2:	9b05      	ldr	r3, [sp, #20]
 8002ce4:	45ba      	cmp	sl, r7
 8002ce6:	4415      	add	r5, r2
 8002ce8:	441d      	add	r5, r3
 8002cea:	4653      	mov	r3, sl
 8002cec:	bfa8      	it	ge
 8002cee:	463b      	movge	r3, r7
 8002cf0:	42ab      	cmp	r3, r5
 8002cf2:	bfa8      	it	ge
 8002cf4:	462b      	movge	r3, r5
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bfc2      	ittt	gt
 8002cfa:	1aff      	subgt	r7, r7, r3
 8002cfc:	1aed      	subgt	r5, r5, r3
 8002cfe:	ebaa 0a03 	subgt.w	sl, sl, r3
 8002d02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	dd17      	ble.n	8002d38 <_strtod_l+0x738>
 8002d08:	4659      	mov	r1, fp
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f001 fc4f 	bl	80045b0 <__pow5mult>
 8002d12:	4683      	mov	fp, r0
 8002d14:	2800      	cmp	r0, #0
 8002d16:	f43f aeb1 	beq.w	8002a7c <_strtod_l+0x47c>
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f001 fb9e 	bl	8004460 <__multiply>
 8002d24:	900a      	str	r0, [sp, #40]	; 0x28
 8002d26:	2800      	cmp	r0, #0
 8002d28:	f43f aea8 	beq.w	8002a7c <_strtod_l+0x47c>
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002d30:	f001 fa80 	bl	8004234 <_Bfree>
 8002d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d36:	931a      	str	r3, [sp, #104]	; 0x68
 8002d38:	2f00      	cmp	r7, #0
 8002d3a:	f300 808f 	bgt.w	8002e5c <_strtod_l+0x85c>
 8002d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	dd08      	ble.n	8002d56 <_strtod_l+0x756>
 8002d44:	4620      	mov	r0, r4
 8002d46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002d48:	9908      	ldr	r1, [sp, #32]
 8002d4a:	f001 fc31 	bl	80045b0 <__pow5mult>
 8002d4e:	9008      	str	r0, [sp, #32]
 8002d50:	2800      	cmp	r0, #0
 8002d52:	f43f ae93 	beq.w	8002a7c <_strtod_l+0x47c>
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	dd08      	ble.n	8002d6c <_strtod_l+0x76c>
 8002d5a:	462a      	mov	r2, r5
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	9908      	ldr	r1, [sp, #32]
 8002d60:	f001 fc80 	bl	8004664 <__lshift>
 8002d64:	9008      	str	r0, [sp, #32]
 8002d66:	2800      	cmp	r0, #0
 8002d68:	f43f ae88 	beq.w	8002a7c <_strtod_l+0x47c>
 8002d6c:	f1ba 0f00 	cmp.w	sl, #0
 8002d70:	dd08      	ble.n	8002d84 <_strtod_l+0x784>
 8002d72:	4659      	mov	r1, fp
 8002d74:	4652      	mov	r2, sl
 8002d76:	4620      	mov	r0, r4
 8002d78:	f001 fc74 	bl	8004664 <__lshift>
 8002d7c:	4683      	mov	fp, r0
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	f43f ae7c 	beq.w	8002a7c <_strtod_l+0x47c>
 8002d84:	4620      	mov	r0, r4
 8002d86:	9a08      	ldr	r2, [sp, #32]
 8002d88:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002d8a:	f001 fcf3 	bl	8004774 <__mdiff>
 8002d8e:	4606      	mov	r6, r0
 8002d90:	2800      	cmp	r0, #0
 8002d92:	f43f ae73 	beq.w	8002a7c <_strtod_l+0x47c>
 8002d96:	2500      	movs	r5, #0
 8002d98:	68c3      	ldr	r3, [r0, #12]
 8002d9a:	4659      	mov	r1, fp
 8002d9c:	60c5      	str	r5, [r0, #12]
 8002d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8002da0:	f001 fccc 	bl	800473c <__mcmp>
 8002da4:	42a8      	cmp	r0, r5
 8002da6:	da6b      	bge.n	8002e80 <_strtod_l+0x880>
 8002da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002daa:	ea53 0308 	orrs.w	r3, r3, r8
 8002dae:	f040 808f 	bne.w	8002ed0 <_strtod_l+0x8d0>
 8002db2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 808a 	bne.w	8002ed0 <_strtod_l+0x8d0>
 8002dbc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002dc0:	0d1b      	lsrs	r3, r3, #20
 8002dc2:	051b      	lsls	r3, r3, #20
 8002dc4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8002dc8:	f240 8082 	bls.w	8002ed0 <_strtod_l+0x8d0>
 8002dcc:	6973      	ldr	r3, [r6, #20]
 8002dce:	b913      	cbnz	r3, 8002dd6 <_strtod_l+0x7d6>
 8002dd0:	6933      	ldr	r3, [r6, #16]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	dd7c      	ble.n	8002ed0 <_strtod_l+0x8d0>
 8002dd6:	4631      	mov	r1, r6
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f001 fc42 	bl	8004664 <__lshift>
 8002de0:	4659      	mov	r1, fp
 8002de2:	4606      	mov	r6, r0
 8002de4:	f001 fcaa 	bl	800473c <__mcmp>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	dd71      	ble.n	8002ed0 <_strtod_l+0x8d0>
 8002dec:	9905      	ldr	r1, [sp, #20]
 8002dee:	464b      	mov	r3, r9
 8002df0:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <_strtod_l+0x878>)
 8002df2:	2900      	cmp	r1, #0
 8002df4:	f000 808d 	beq.w	8002f12 <_strtod_l+0x912>
 8002df8:	ea02 0109 	and.w	r1, r2, r9
 8002dfc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8002e00:	f300 8087 	bgt.w	8002f12 <_strtod_l+0x912>
 8002e04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8002e08:	f77f aea9 	ble.w	8002b5e <_strtod_l+0x55e>
 8002e0c:	4640      	mov	r0, r8
 8002e0e:	4649      	mov	r1, r9
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <_strtod_l+0x87c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	f7fd fb60 	bl	80004d8 <__aeabi_dmul>
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <_strtod_l+0x878>)
 8002e1a:	4680      	mov	r8, r0
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	4689      	mov	r9, r1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f47f ae35 	bne.w	8002a90 <_strtod_l+0x490>
 8002e26:	2322      	movs	r3, #34	; 0x22
 8002e28:	6023      	str	r3, [r4, #0]
 8002e2a:	e631      	b.n	8002a90 <_strtod_l+0x490>
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	ea03 0808 	and.w	r8, r3, r8
 8002e38:	e6de      	b.n	8002bf8 <_strtod_l+0x5f8>
 8002e3a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8002e3e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8002e42:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8002e46:	37e2      	adds	r7, #226	; 0xe2
 8002e48:	fa01 f307 	lsl.w	r3, r1, r7
 8002e4c:	9310      	str	r3, [sp, #64]	; 0x40
 8002e4e:	9113      	str	r1, [sp, #76]	; 0x4c
 8002e50:	e745      	b.n	8002cde <_strtod_l+0x6de>
 8002e52:	2300      	movs	r3, #0
 8002e54:	9310      	str	r3, [sp, #64]	; 0x40
 8002e56:	2301      	movs	r3, #1
 8002e58:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e5a:	e740      	b.n	8002cde <_strtod_l+0x6de>
 8002e5c:	463a      	mov	r2, r7
 8002e5e:	4620      	mov	r0, r4
 8002e60:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002e62:	f001 fbff 	bl	8004664 <__lshift>
 8002e66:	901a      	str	r0, [sp, #104]	; 0x68
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	f47f af68 	bne.w	8002d3e <_strtod_l+0x73e>
 8002e6e:	e605      	b.n	8002a7c <_strtod_l+0x47c>
 8002e70:	08005200 	.word	0x08005200
 8002e74:	fffffc02 	.word	0xfffffc02
 8002e78:	7ff00000 	.word	0x7ff00000
 8002e7c:	39500000 	.word	0x39500000
 8002e80:	46ca      	mov	sl, r9
 8002e82:	d165      	bne.n	8002f50 <_strtod_l+0x950>
 8002e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002e8a:	b352      	cbz	r2, 8002ee2 <_strtod_l+0x8e2>
 8002e8c:	4a9e      	ldr	r2, [pc, #632]	; (8003108 <_strtod_l+0xb08>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12a      	bne.n	8002ee8 <_strtod_l+0x8e8>
 8002e92:	9b05      	ldr	r3, [sp, #20]
 8002e94:	4641      	mov	r1, r8
 8002e96:	b1fb      	cbz	r3, 8002ed8 <_strtod_l+0x8d8>
 8002e98:	4b9c      	ldr	r3, [pc, #624]	; (800310c <_strtod_l+0xb0c>)
 8002e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9e:	ea09 0303 	and.w	r3, r9, r3
 8002ea2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8002ea6:	d81a      	bhi.n	8002ede <_strtod_l+0x8de>
 8002ea8:	0d1b      	lsrs	r3, r3, #20
 8002eaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	4299      	cmp	r1, r3
 8002eb4:	d118      	bne.n	8002ee8 <_strtod_l+0x8e8>
 8002eb6:	4b96      	ldr	r3, [pc, #600]	; (8003110 <_strtod_l+0xb10>)
 8002eb8:	459a      	cmp	sl, r3
 8002eba:	d102      	bne.n	8002ec2 <_strtod_l+0x8c2>
 8002ebc:	3101      	adds	r1, #1
 8002ebe:	f43f addd 	beq.w	8002a7c <_strtod_l+0x47c>
 8002ec2:	f04f 0800 	mov.w	r8, #0
 8002ec6:	4b91      	ldr	r3, [pc, #580]	; (800310c <_strtod_l+0xb0c>)
 8002ec8:	ea0a 0303 	and.w	r3, sl, r3
 8002ecc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8002ed0:	9b05      	ldr	r3, [sp, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d19a      	bne.n	8002e0c <_strtod_l+0x80c>
 8002ed6:	e5db      	b.n	8002a90 <_strtod_l+0x490>
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e7e9      	b.n	8002eb2 <_strtod_l+0x8b2>
 8002ede:	4613      	mov	r3, r2
 8002ee0:	e7e7      	b.n	8002eb2 <_strtod_l+0x8b2>
 8002ee2:	ea53 0308 	orrs.w	r3, r3, r8
 8002ee6:	d081      	beq.n	8002dec <_strtod_l+0x7ec>
 8002ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002eea:	b1e3      	cbz	r3, 8002f26 <_strtod_l+0x926>
 8002eec:	ea13 0f0a 	tst.w	r3, sl
 8002ef0:	d0ee      	beq.n	8002ed0 <_strtod_l+0x8d0>
 8002ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	9a05      	ldr	r2, [sp, #20]
 8002efa:	b1c3      	cbz	r3, 8002f2e <_strtod_l+0x92e>
 8002efc:	f7ff fb5e 	bl	80025bc <sulp>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002f06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002f08:	f7fd f930 	bl	800016c <__adddf3>
 8002f0c:	4680      	mov	r8, r0
 8002f0e:	4689      	mov	r9, r1
 8002f10:	e7de      	b.n	8002ed0 <_strtod_l+0x8d0>
 8002f12:	4013      	ands	r3, r2
 8002f14:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002f18:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8002f1c:	f04f 38ff 	mov.w	r8, #4294967295
 8002f20:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8002f24:	e7d4      	b.n	8002ed0 <_strtod_l+0x8d0>
 8002f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f28:	ea13 0f08 	tst.w	r3, r8
 8002f2c:	e7e0      	b.n	8002ef0 <_strtod_l+0x8f0>
 8002f2e:	f7ff fb45 	bl	80025bc <sulp>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002f38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002f3a:	f7fd f915 	bl	8000168 <__aeabi_dsub>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2300      	movs	r3, #0
 8002f42:	4680      	mov	r8, r0
 8002f44:	4689      	mov	r9, r1
 8002f46:	f7fd fd2f 	bl	80009a8 <__aeabi_dcmpeq>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d0c0      	beq.n	8002ed0 <_strtod_l+0x8d0>
 8002f4e:	e606      	b.n	8002b5e <_strtod_l+0x55e>
 8002f50:	4659      	mov	r1, fp
 8002f52:	4630      	mov	r0, r6
 8002f54:	f001 fd58 	bl	8004a08 <__ratio>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002f60:	2200      	movs	r2, #0
 8002f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f66:	f7fd fd33 	bl	80009d0 <__aeabi_dcmple>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d06f      	beq.n	800304e <_strtod_l+0xa4e>
 8002f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d17c      	bne.n	800306e <_strtod_l+0xa6e>
 8002f74:	f1b8 0f00 	cmp.w	r8, #0
 8002f78:	d159      	bne.n	800302e <_strtod_l+0xa2e>
 8002f7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d17b      	bne.n	800307a <_strtod_l+0xa7a>
 8002f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f86:	2200      	movs	r2, #0
 8002f88:	4b62      	ldr	r3, [pc, #392]	; (8003114 <_strtod_l+0xb14>)
 8002f8a:	f7fd fd17 	bl	80009bc <__aeabi_dcmplt>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d15a      	bne.n	8003048 <_strtod_l+0xa48>
 8002f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f96:	2200      	movs	r2, #0
 8002f98:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <_strtod_l+0xb18>)
 8002f9a:	f7fd fa9d 	bl	80004d8 <__aeabi_dmul>
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	460f      	mov	r7, r1
 8002fa2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8002fa6:	9506      	str	r5, [sp, #24]
 8002fa8:	9307      	str	r3, [sp, #28]
 8002faa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002fae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002fb2:	4b56      	ldr	r3, [pc, #344]	; (800310c <_strtod_l+0xb0c>)
 8002fb4:	4a55      	ldr	r2, [pc, #340]	; (800310c <_strtod_l+0xb0c>)
 8002fb6:	ea0a 0303 	and.w	r3, sl, r3
 8002fba:	9313      	str	r3, [sp, #76]	; 0x4c
 8002fbc:	4b57      	ldr	r3, [pc, #348]	; (800311c <_strtod_l+0xb1c>)
 8002fbe:	ea0a 0202 	and.w	r2, sl, r2
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	f040 80b0 	bne.w	8003128 <_strtod_l+0xb28>
 8002fc8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8002fcc:	4640      	mov	r0, r8
 8002fce:	4649      	mov	r1, r9
 8002fd0:	f001 fc5c 	bl	800488c <__ulp>
 8002fd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002fd8:	f7fd fa7e 	bl	80004d8 <__aeabi_dmul>
 8002fdc:	4642      	mov	r2, r8
 8002fde:	464b      	mov	r3, r9
 8002fe0:	f7fd f8c4 	bl	800016c <__adddf3>
 8002fe4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800310c <_strtod_l+0xb0c>
 8002fe8:	4a4d      	ldr	r2, [pc, #308]	; (8003120 <_strtod_l+0xb20>)
 8002fea:	ea01 0a0a 	and.w	sl, r1, sl
 8002fee:	4592      	cmp	sl, r2
 8002ff0:	4680      	mov	r8, r0
 8002ff2:	d948      	bls.n	8003086 <_strtod_l+0xa86>
 8002ff4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002ff6:	4b46      	ldr	r3, [pc, #280]	; (8003110 <_strtod_l+0xb10>)
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d103      	bne.n	8003004 <_strtod_l+0xa04>
 8002ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ffe:	3301      	adds	r3, #1
 8003000:	f43f ad3c 	beq.w	8002a7c <_strtod_l+0x47c>
 8003004:	f04f 38ff 	mov.w	r8, #4294967295
 8003008:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8003110 <_strtod_l+0xb10>
 800300c:	4620      	mov	r0, r4
 800300e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003010:	f001 f910 	bl	8004234 <_Bfree>
 8003014:	4620      	mov	r0, r4
 8003016:	9908      	ldr	r1, [sp, #32]
 8003018:	f001 f90c 	bl	8004234 <_Bfree>
 800301c:	4659      	mov	r1, fp
 800301e:	4620      	mov	r0, r4
 8003020:	f001 f908 	bl	8004234 <_Bfree>
 8003024:	4631      	mov	r1, r6
 8003026:	4620      	mov	r0, r4
 8003028:	f001 f904 	bl	8004234 <_Bfree>
 800302c:	e605      	b.n	8002c3a <_strtod_l+0x63a>
 800302e:	f1b8 0f01 	cmp.w	r8, #1
 8003032:	d103      	bne.n	800303c <_strtod_l+0xa3c>
 8003034:	f1b9 0f00 	cmp.w	r9, #0
 8003038:	f43f ad91 	beq.w	8002b5e <_strtod_l+0x55e>
 800303c:	2200      	movs	r2, #0
 800303e:	4b39      	ldr	r3, [pc, #228]	; (8003124 <_strtod_l+0xb24>)
 8003040:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003042:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003046:	e016      	b.n	8003076 <_strtod_l+0xa76>
 8003048:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800304a:	4f33      	ldr	r7, [pc, #204]	; (8003118 <_strtod_l+0xb18>)
 800304c:	e7a9      	b.n	8002fa2 <_strtod_l+0x9a2>
 800304e:	4b32      	ldr	r3, [pc, #200]	; (8003118 <_strtod_l+0xb18>)
 8003050:	2200      	movs	r2, #0
 8003052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003056:	f7fd fa3f 	bl	80004d8 <__aeabi_dmul>
 800305a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800305c:	4605      	mov	r5, r0
 800305e:	460f      	mov	r7, r1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d09e      	beq.n	8002fa2 <_strtod_l+0x9a2>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800306c:	e79d      	b.n	8002faa <_strtod_l+0x9aa>
 800306e:	2200      	movs	r2, #0
 8003070:	4b28      	ldr	r3, [pc, #160]	; (8003114 <_strtod_l+0xb14>)
 8003072:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003076:	4f27      	ldr	r7, [pc, #156]	; (8003114 <_strtod_l+0xb14>)
 8003078:	e797      	b.n	8002faa <_strtod_l+0x9aa>
 800307a:	2200      	movs	r2, #0
 800307c:	4b29      	ldr	r3, [pc, #164]	; (8003124 <_strtod_l+0xb24>)
 800307e:	4645      	mov	r5, r8
 8003080:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003084:	e7f7      	b.n	8003076 <_strtod_l+0xa76>
 8003086:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800308a:	9b05      	ldr	r3, [sp, #20]
 800308c:	46ca      	mov	sl, r9
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1bc      	bne.n	800300c <_strtod_l+0xa0c>
 8003092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003096:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003098:	0d1b      	lsrs	r3, r3, #20
 800309a:	051b      	lsls	r3, r3, #20
 800309c:	429a      	cmp	r2, r3
 800309e:	d1b5      	bne.n	800300c <_strtod_l+0xa0c>
 80030a0:	4628      	mov	r0, r5
 80030a2:	4639      	mov	r1, r7
 80030a4:	f7fd fd38 	bl	8000b18 <__aeabi_d2lz>
 80030a8:	f7fd f9e8 	bl	800047c <__aeabi_l2d>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4628      	mov	r0, r5
 80030b2:	4639      	mov	r1, r7
 80030b4:	f7fd f858 	bl	8000168 <__aeabi_dsub>
 80030b8:	460b      	mov	r3, r1
 80030ba:	4602      	mov	r2, r0
 80030bc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80030c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80030c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030c6:	ea4a 0a08 	orr.w	sl, sl, r8
 80030ca:	ea5a 0a03 	orrs.w	sl, sl, r3
 80030ce:	d06c      	beq.n	80031aa <_strtod_l+0xbaa>
 80030d0:	a309      	add	r3, pc, #36	; (adr r3, 80030f8 <_strtod_l+0xaf8>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd fc71 	bl	80009bc <__aeabi_dcmplt>
 80030da:	2800      	cmp	r0, #0
 80030dc:	f47f acd8 	bne.w	8002a90 <_strtod_l+0x490>
 80030e0:	a307      	add	r3, pc, #28	; (adr r3, 8003100 <_strtod_l+0xb00>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80030ea:	f7fd fc85 	bl	80009f8 <__aeabi_dcmpgt>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d08c      	beq.n	800300c <_strtod_l+0xa0c>
 80030f2:	e4cd      	b.n	8002a90 <_strtod_l+0x490>
 80030f4:	f3af 8000 	nop.w
 80030f8:	94a03595 	.word	0x94a03595
 80030fc:	3fdfffff 	.word	0x3fdfffff
 8003100:	35afe535 	.word	0x35afe535
 8003104:	3fe00000 	.word	0x3fe00000
 8003108:	000fffff 	.word	0x000fffff
 800310c:	7ff00000 	.word	0x7ff00000
 8003110:	7fefffff 	.word	0x7fefffff
 8003114:	3ff00000 	.word	0x3ff00000
 8003118:	3fe00000 	.word	0x3fe00000
 800311c:	7fe00000 	.word	0x7fe00000
 8003120:	7c9fffff 	.word	0x7c9fffff
 8003124:	bff00000 	.word	0xbff00000
 8003128:	9b05      	ldr	r3, [sp, #20]
 800312a:	b333      	cbz	r3, 800317a <_strtod_l+0xb7a>
 800312c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800312e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003132:	d822      	bhi.n	800317a <_strtod_l+0xb7a>
 8003134:	a328      	add	r3, pc, #160	; (adr r3, 80031d8 <_strtod_l+0xbd8>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	4628      	mov	r0, r5
 800313c:	4639      	mov	r1, r7
 800313e:	f7fd fc47 	bl	80009d0 <__aeabi_dcmple>
 8003142:	b1a0      	cbz	r0, 800316e <_strtod_l+0xb6e>
 8003144:	4639      	mov	r1, r7
 8003146:	4628      	mov	r0, r5
 8003148:	f7fd fc76 	bl	8000a38 <__aeabi_d2uiz>
 800314c:	2801      	cmp	r0, #1
 800314e:	bf38      	it	cc
 8003150:	2001      	movcc	r0, #1
 8003152:	f7fd f947 	bl	80003e4 <__aeabi_ui2d>
 8003156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003158:	4605      	mov	r5, r0
 800315a:	460f      	mov	r7, r1
 800315c:	bb03      	cbnz	r3, 80031a0 <_strtod_l+0xba0>
 800315e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003162:	9014      	str	r0, [sp, #80]	; 0x50
 8003164:	9315      	str	r3, [sp, #84]	; 0x54
 8003166:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800316a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800316e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003172:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	9311      	str	r3, [sp, #68]	; 0x44
 800317a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800317c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800317e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8003182:	f001 fb83 	bl	800488c <__ulp>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4640      	mov	r0, r8
 800318c:	4649      	mov	r1, r9
 800318e:	f7fd f9a3 	bl	80004d8 <__aeabi_dmul>
 8003192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003196:	f7fc ffe9 	bl	800016c <__adddf3>
 800319a:	4680      	mov	r8, r0
 800319c:	4689      	mov	r9, r1
 800319e:	e774      	b.n	800308a <_strtod_l+0xa8a>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80031a8:	e7dd      	b.n	8003166 <_strtod_l+0xb66>
 80031aa:	a30d      	add	r3, pc, #52	; (adr r3, 80031e0 <_strtod_l+0xbe0>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd fc04 	bl	80009bc <__aeabi_dcmplt>
 80031b4:	e79b      	b.n	80030ee <_strtod_l+0xaee>
 80031b6:	2300      	movs	r3, #0
 80031b8:	930e      	str	r3, [sp, #56]	; 0x38
 80031ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	f7ff ba5b 	b.w	800267a <_strtod_l+0x7a>
 80031c4:	2a65      	cmp	r2, #101	; 0x65
 80031c6:	f43f ab52 	beq.w	800286e <_strtod_l+0x26e>
 80031ca:	2a45      	cmp	r2, #69	; 0x45
 80031cc:	f43f ab4f 	beq.w	800286e <_strtod_l+0x26e>
 80031d0:	2301      	movs	r3, #1
 80031d2:	f7ff bb87 	b.w	80028e4 <_strtod_l+0x2e4>
 80031d6:	bf00      	nop
 80031d8:	ffc00000 	.word	0xffc00000
 80031dc:	41dfffff 	.word	0x41dfffff
 80031e0:	94a03595 	.word	0x94a03595
 80031e4:	3fcfffff 	.word	0x3fcfffff

080031e8 <_strtod_r>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <_strtod_r+0x8>)
 80031ea:	f7ff ba09 	b.w	8002600 <_strtod_l>
 80031ee:	bf00      	nop
 80031f0:	20000068 	.word	0x20000068

080031f4 <_strtol_l.constprop.0>:
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031fa:	4686      	mov	lr, r0
 80031fc:	4690      	mov	r8, r2
 80031fe:	d001      	beq.n	8003204 <_strtol_l.constprop.0+0x10>
 8003200:	2b24      	cmp	r3, #36	; 0x24
 8003202:	d906      	bls.n	8003212 <_strtol_l.constprop.0+0x1e>
 8003204:	f7ff f8b4 	bl	8002370 <__errno>
 8003208:	2316      	movs	r3, #22
 800320a:	6003      	str	r3, [r0, #0]
 800320c:	2000      	movs	r0, #0
 800320e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003212:	460d      	mov	r5, r1
 8003214:	4835      	ldr	r0, [pc, #212]	; (80032ec <_strtol_l.constprop.0+0xf8>)
 8003216:	462a      	mov	r2, r5
 8003218:	f815 4b01 	ldrb.w	r4, [r5], #1
 800321c:	5d06      	ldrb	r6, [r0, r4]
 800321e:	f016 0608 	ands.w	r6, r6, #8
 8003222:	d1f8      	bne.n	8003216 <_strtol_l.constprop.0+0x22>
 8003224:	2c2d      	cmp	r4, #45	; 0x2d
 8003226:	d12e      	bne.n	8003286 <_strtol_l.constprop.0+0x92>
 8003228:	2601      	movs	r6, #1
 800322a:	782c      	ldrb	r4, [r5, #0]
 800322c:	1c95      	adds	r5, r2, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d057      	beq.n	80032e2 <_strtol_l.constprop.0+0xee>
 8003232:	2b10      	cmp	r3, #16
 8003234:	d109      	bne.n	800324a <_strtol_l.constprop.0+0x56>
 8003236:	2c30      	cmp	r4, #48	; 0x30
 8003238:	d107      	bne.n	800324a <_strtol_l.constprop.0+0x56>
 800323a:	782a      	ldrb	r2, [r5, #0]
 800323c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003240:	2a58      	cmp	r2, #88	; 0x58
 8003242:	d149      	bne.n	80032d8 <_strtol_l.constprop.0+0xe4>
 8003244:	2310      	movs	r3, #16
 8003246:	786c      	ldrb	r4, [r5, #1]
 8003248:	3502      	adds	r5, #2
 800324a:	2200      	movs	r2, #0
 800324c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003250:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003254:	fbbc f9f3 	udiv	r9, ip, r3
 8003258:	4610      	mov	r0, r2
 800325a:	fb03 ca19 	mls	sl, r3, r9, ip
 800325e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003262:	2f09      	cmp	r7, #9
 8003264:	d814      	bhi.n	8003290 <_strtol_l.constprop.0+0x9c>
 8003266:	463c      	mov	r4, r7
 8003268:	42a3      	cmp	r3, r4
 800326a:	dd20      	ble.n	80032ae <_strtol_l.constprop.0+0xba>
 800326c:	1c57      	adds	r7, r2, #1
 800326e:	d007      	beq.n	8003280 <_strtol_l.constprop.0+0x8c>
 8003270:	4581      	cmp	r9, r0
 8003272:	d319      	bcc.n	80032a8 <_strtol_l.constprop.0+0xb4>
 8003274:	d101      	bne.n	800327a <_strtol_l.constprop.0+0x86>
 8003276:	45a2      	cmp	sl, r4
 8003278:	db16      	blt.n	80032a8 <_strtol_l.constprop.0+0xb4>
 800327a:	2201      	movs	r2, #1
 800327c:	fb00 4003 	mla	r0, r0, r3, r4
 8003280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003284:	e7eb      	b.n	800325e <_strtol_l.constprop.0+0x6a>
 8003286:	2c2b      	cmp	r4, #43	; 0x2b
 8003288:	bf04      	itt	eq
 800328a:	782c      	ldrbeq	r4, [r5, #0]
 800328c:	1c95      	addeq	r5, r2, #2
 800328e:	e7ce      	b.n	800322e <_strtol_l.constprop.0+0x3a>
 8003290:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003294:	2f19      	cmp	r7, #25
 8003296:	d801      	bhi.n	800329c <_strtol_l.constprop.0+0xa8>
 8003298:	3c37      	subs	r4, #55	; 0x37
 800329a:	e7e5      	b.n	8003268 <_strtol_l.constprop.0+0x74>
 800329c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80032a0:	2f19      	cmp	r7, #25
 80032a2:	d804      	bhi.n	80032ae <_strtol_l.constprop.0+0xba>
 80032a4:	3c57      	subs	r4, #87	; 0x57
 80032a6:	e7df      	b.n	8003268 <_strtol_l.constprop.0+0x74>
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	e7e8      	b.n	8003280 <_strtol_l.constprop.0+0x8c>
 80032ae:	1c53      	adds	r3, r2, #1
 80032b0:	d108      	bne.n	80032c4 <_strtol_l.constprop.0+0xd0>
 80032b2:	2322      	movs	r3, #34	; 0x22
 80032b4:	4660      	mov	r0, ip
 80032b6:	f8ce 3000 	str.w	r3, [lr]
 80032ba:	f1b8 0f00 	cmp.w	r8, #0
 80032be:	d0a6      	beq.n	800320e <_strtol_l.constprop.0+0x1a>
 80032c0:	1e69      	subs	r1, r5, #1
 80032c2:	e006      	b.n	80032d2 <_strtol_l.constprop.0+0xde>
 80032c4:	b106      	cbz	r6, 80032c8 <_strtol_l.constprop.0+0xd4>
 80032c6:	4240      	negs	r0, r0
 80032c8:	f1b8 0f00 	cmp.w	r8, #0
 80032cc:	d09f      	beq.n	800320e <_strtol_l.constprop.0+0x1a>
 80032ce:	2a00      	cmp	r2, #0
 80032d0:	d1f6      	bne.n	80032c0 <_strtol_l.constprop.0+0xcc>
 80032d2:	f8c8 1000 	str.w	r1, [r8]
 80032d6:	e79a      	b.n	800320e <_strtol_l.constprop.0+0x1a>
 80032d8:	2430      	movs	r4, #48	; 0x30
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1b5      	bne.n	800324a <_strtol_l.constprop.0+0x56>
 80032de:	2308      	movs	r3, #8
 80032e0:	e7b3      	b.n	800324a <_strtol_l.constprop.0+0x56>
 80032e2:	2c30      	cmp	r4, #48	; 0x30
 80032e4:	d0a9      	beq.n	800323a <_strtol_l.constprop.0+0x46>
 80032e6:	230a      	movs	r3, #10
 80032e8:	e7af      	b.n	800324a <_strtol_l.constprop.0+0x56>
 80032ea:	bf00      	nop
 80032ec:	08005229 	.word	0x08005229

080032f0 <_strtol_r>:
 80032f0:	f7ff bf80 	b.w	80031f4 <_strtol_l.constprop.0>

080032f4 <__ssputs_r>:
 80032f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f8:	461f      	mov	r7, r3
 80032fa:	688e      	ldr	r6, [r1, #8]
 80032fc:	4682      	mov	sl, r0
 80032fe:	42be      	cmp	r6, r7
 8003300:	460c      	mov	r4, r1
 8003302:	4690      	mov	r8, r2
 8003304:	680b      	ldr	r3, [r1, #0]
 8003306:	d82c      	bhi.n	8003362 <__ssputs_r+0x6e>
 8003308:	898a      	ldrh	r2, [r1, #12]
 800330a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800330e:	d026      	beq.n	800335e <__ssputs_r+0x6a>
 8003310:	6965      	ldr	r5, [r4, #20]
 8003312:	6909      	ldr	r1, [r1, #16]
 8003314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003318:	eba3 0901 	sub.w	r9, r3, r1
 800331c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003320:	1c7b      	adds	r3, r7, #1
 8003322:	444b      	add	r3, r9
 8003324:	106d      	asrs	r5, r5, #1
 8003326:	429d      	cmp	r5, r3
 8003328:	bf38      	it	cc
 800332a:	461d      	movcc	r5, r3
 800332c:	0553      	lsls	r3, r2, #21
 800332e:	d527      	bpl.n	8003380 <__ssputs_r+0x8c>
 8003330:	4629      	mov	r1, r5
 8003332:	f7ff f8b7 	bl	80024a4 <_malloc_r>
 8003336:	4606      	mov	r6, r0
 8003338:	b360      	cbz	r0, 8003394 <__ssputs_r+0xa0>
 800333a:	464a      	mov	r2, r9
 800333c:	6921      	ldr	r1, [r4, #16]
 800333e:	f000 fbb9 	bl	8003ab4 <memcpy>
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	81a3      	strh	r3, [r4, #12]
 800334e:	6126      	str	r6, [r4, #16]
 8003350:	444e      	add	r6, r9
 8003352:	6026      	str	r6, [r4, #0]
 8003354:	463e      	mov	r6, r7
 8003356:	6165      	str	r5, [r4, #20]
 8003358:	eba5 0509 	sub.w	r5, r5, r9
 800335c:	60a5      	str	r5, [r4, #8]
 800335e:	42be      	cmp	r6, r7
 8003360:	d900      	bls.n	8003364 <__ssputs_r+0x70>
 8003362:	463e      	mov	r6, r7
 8003364:	4632      	mov	r2, r6
 8003366:	4641      	mov	r1, r8
 8003368:	6820      	ldr	r0, [r4, #0]
 800336a:	f000 fb59 	bl	8003a20 <memmove>
 800336e:	2000      	movs	r0, #0
 8003370:	68a3      	ldr	r3, [r4, #8]
 8003372:	1b9b      	subs	r3, r3, r6
 8003374:	60a3      	str	r3, [r4, #8]
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	4433      	add	r3, r6
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003380:	462a      	mov	r2, r5
 8003382:	f001 fbb3 	bl	8004aec <_realloc_r>
 8003386:	4606      	mov	r6, r0
 8003388:	2800      	cmp	r0, #0
 800338a:	d1e0      	bne.n	800334e <__ssputs_r+0x5a>
 800338c:	4650      	mov	r0, sl
 800338e:	6921      	ldr	r1, [r4, #16]
 8003390:	f7ff f820 	bl	80023d4 <_free_r>
 8003394:	230c      	movs	r3, #12
 8003396:	f8ca 3000 	str.w	r3, [sl]
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a4:	81a3      	strh	r3, [r4, #12]
 80033a6:	e7e9      	b.n	800337c <__ssputs_r+0x88>

080033a8 <_svfiprintf_r>:
 80033a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ac:	4698      	mov	r8, r3
 80033ae:	898b      	ldrh	r3, [r1, #12]
 80033b0:	4607      	mov	r7, r0
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	460d      	mov	r5, r1
 80033b6:	4614      	mov	r4, r2
 80033b8:	b09d      	sub	sp, #116	; 0x74
 80033ba:	d50e      	bpl.n	80033da <_svfiprintf_r+0x32>
 80033bc:	690b      	ldr	r3, [r1, #16]
 80033be:	b963      	cbnz	r3, 80033da <_svfiprintf_r+0x32>
 80033c0:	2140      	movs	r1, #64	; 0x40
 80033c2:	f7ff f86f 	bl	80024a4 <_malloc_r>
 80033c6:	6028      	str	r0, [r5, #0]
 80033c8:	6128      	str	r0, [r5, #16]
 80033ca:	b920      	cbnz	r0, 80033d6 <_svfiprintf_r+0x2e>
 80033cc:	230c      	movs	r3, #12
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	e0d0      	b.n	8003578 <_svfiprintf_r+0x1d0>
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	616b      	str	r3, [r5, #20]
 80033da:	2300      	movs	r3, #0
 80033dc:	9309      	str	r3, [sp, #36]	; 0x24
 80033de:	2320      	movs	r3, #32
 80033e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033e4:	2330      	movs	r3, #48	; 0x30
 80033e6:	f04f 0901 	mov.w	r9, #1
 80033ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003590 <_svfiprintf_r+0x1e8>
 80033f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033f6:	4623      	mov	r3, r4
 80033f8:	469a      	mov	sl, r3
 80033fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033fe:	b10a      	cbz	r2, 8003404 <_svfiprintf_r+0x5c>
 8003400:	2a25      	cmp	r2, #37	; 0x25
 8003402:	d1f9      	bne.n	80033f8 <_svfiprintf_r+0x50>
 8003404:	ebba 0b04 	subs.w	fp, sl, r4
 8003408:	d00b      	beq.n	8003422 <_svfiprintf_r+0x7a>
 800340a:	465b      	mov	r3, fp
 800340c:	4622      	mov	r2, r4
 800340e:	4629      	mov	r1, r5
 8003410:	4638      	mov	r0, r7
 8003412:	f7ff ff6f 	bl	80032f4 <__ssputs_r>
 8003416:	3001      	adds	r0, #1
 8003418:	f000 80a9 	beq.w	800356e <_svfiprintf_r+0x1c6>
 800341c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800341e:	445a      	add	r2, fp
 8003420:	9209      	str	r2, [sp, #36]	; 0x24
 8003422:	f89a 3000 	ldrb.w	r3, [sl]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80a1 	beq.w	800356e <_svfiprintf_r+0x1c6>
 800342c:	2300      	movs	r3, #0
 800342e:	f04f 32ff 	mov.w	r2, #4294967295
 8003432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003436:	f10a 0a01 	add.w	sl, sl, #1
 800343a:	9304      	str	r3, [sp, #16]
 800343c:	9307      	str	r3, [sp, #28]
 800343e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003442:	931a      	str	r3, [sp, #104]	; 0x68
 8003444:	4654      	mov	r4, sl
 8003446:	2205      	movs	r2, #5
 8003448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800344c:	4850      	ldr	r0, [pc, #320]	; (8003590 <_svfiprintf_r+0x1e8>)
 800344e:	f000 fb23 	bl	8003a98 <memchr>
 8003452:	9a04      	ldr	r2, [sp, #16]
 8003454:	b9d8      	cbnz	r0, 800348e <_svfiprintf_r+0xe6>
 8003456:	06d0      	lsls	r0, r2, #27
 8003458:	bf44      	itt	mi
 800345a:	2320      	movmi	r3, #32
 800345c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003460:	0711      	lsls	r1, r2, #28
 8003462:	bf44      	itt	mi
 8003464:	232b      	movmi	r3, #43	; 0x2b
 8003466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800346a:	f89a 3000 	ldrb.w	r3, [sl]
 800346e:	2b2a      	cmp	r3, #42	; 0x2a
 8003470:	d015      	beq.n	800349e <_svfiprintf_r+0xf6>
 8003472:	4654      	mov	r4, sl
 8003474:	2000      	movs	r0, #0
 8003476:	f04f 0c0a 	mov.w	ip, #10
 800347a:	9a07      	ldr	r2, [sp, #28]
 800347c:	4621      	mov	r1, r4
 800347e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003482:	3b30      	subs	r3, #48	; 0x30
 8003484:	2b09      	cmp	r3, #9
 8003486:	d94d      	bls.n	8003524 <_svfiprintf_r+0x17c>
 8003488:	b1b0      	cbz	r0, 80034b8 <_svfiprintf_r+0x110>
 800348a:	9207      	str	r2, [sp, #28]
 800348c:	e014      	b.n	80034b8 <_svfiprintf_r+0x110>
 800348e:	eba0 0308 	sub.w	r3, r0, r8
 8003492:	fa09 f303 	lsl.w	r3, r9, r3
 8003496:	4313      	orrs	r3, r2
 8003498:	46a2      	mov	sl, r4
 800349a:	9304      	str	r3, [sp, #16]
 800349c:	e7d2      	b.n	8003444 <_svfiprintf_r+0x9c>
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	1d19      	adds	r1, r3, #4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	9103      	str	r1, [sp, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bfbb      	ittet	lt
 80034aa:	425b      	neglt	r3, r3
 80034ac:	f042 0202 	orrlt.w	r2, r2, #2
 80034b0:	9307      	strge	r3, [sp, #28]
 80034b2:	9307      	strlt	r3, [sp, #28]
 80034b4:	bfb8      	it	lt
 80034b6:	9204      	strlt	r2, [sp, #16]
 80034b8:	7823      	ldrb	r3, [r4, #0]
 80034ba:	2b2e      	cmp	r3, #46	; 0x2e
 80034bc:	d10c      	bne.n	80034d8 <_svfiprintf_r+0x130>
 80034be:	7863      	ldrb	r3, [r4, #1]
 80034c0:	2b2a      	cmp	r3, #42	; 0x2a
 80034c2:	d134      	bne.n	800352e <_svfiprintf_r+0x186>
 80034c4:	9b03      	ldr	r3, [sp, #12]
 80034c6:	3402      	adds	r4, #2
 80034c8:	1d1a      	adds	r2, r3, #4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	9203      	str	r2, [sp, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bfb8      	it	lt
 80034d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80034d6:	9305      	str	r3, [sp, #20]
 80034d8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003594 <_svfiprintf_r+0x1ec>
 80034dc:	2203      	movs	r2, #3
 80034de:	4650      	mov	r0, sl
 80034e0:	7821      	ldrb	r1, [r4, #0]
 80034e2:	f000 fad9 	bl	8003a98 <memchr>
 80034e6:	b138      	cbz	r0, 80034f8 <_svfiprintf_r+0x150>
 80034e8:	2240      	movs	r2, #64	; 0x40
 80034ea:	9b04      	ldr	r3, [sp, #16]
 80034ec:	eba0 000a 	sub.w	r0, r0, sl
 80034f0:	4082      	lsls	r2, r0
 80034f2:	4313      	orrs	r3, r2
 80034f4:	3401      	adds	r4, #1
 80034f6:	9304      	str	r3, [sp, #16]
 80034f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034fc:	2206      	movs	r2, #6
 80034fe:	4826      	ldr	r0, [pc, #152]	; (8003598 <_svfiprintf_r+0x1f0>)
 8003500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003504:	f000 fac8 	bl	8003a98 <memchr>
 8003508:	2800      	cmp	r0, #0
 800350a:	d038      	beq.n	800357e <_svfiprintf_r+0x1d6>
 800350c:	4b23      	ldr	r3, [pc, #140]	; (800359c <_svfiprintf_r+0x1f4>)
 800350e:	bb1b      	cbnz	r3, 8003558 <_svfiprintf_r+0x1b0>
 8003510:	9b03      	ldr	r3, [sp, #12]
 8003512:	3307      	adds	r3, #7
 8003514:	f023 0307 	bic.w	r3, r3, #7
 8003518:	3308      	adds	r3, #8
 800351a:	9303      	str	r3, [sp, #12]
 800351c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800351e:	4433      	add	r3, r6
 8003520:	9309      	str	r3, [sp, #36]	; 0x24
 8003522:	e768      	b.n	80033f6 <_svfiprintf_r+0x4e>
 8003524:	460c      	mov	r4, r1
 8003526:	2001      	movs	r0, #1
 8003528:	fb0c 3202 	mla	r2, ip, r2, r3
 800352c:	e7a6      	b.n	800347c <_svfiprintf_r+0xd4>
 800352e:	2300      	movs	r3, #0
 8003530:	f04f 0c0a 	mov.w	ip, #10
 8003534:	4619      	mov	r1, r3
 8003536:	3401      	adds	r4, #1
 8003538:	9305      	str	r3, [sp, #20]
 800353a:	4620      	mov	r0, r4
 800353c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003540:	3a30      	subs	r2, #48	; 0x30
 8003542:	2a09      	cmp	r2, #9
 8003544:	d903      	bls.n	800354e <_svfiprintf_r+0x1a6>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0c6      	beq.n	80034d8 <_svfiprintf_r+0x130>
 800354a:	9105      	str	r1, [sp, #20]
 800354c:	e7c4      	b.n	80034d8 <_svfiprintf_r+0x130>
 800354e:	4604      	mov	r4, r0
 8003550:	2301      	movs	r3, #1
 8003552:	fb0c 2101 	mla	r1, ip, r1, r2
 8003556:	e7f0      	b.n	800353a <_svfiprintf_r+0x192>
 8003558:	ab03      	add	r3, sp, #12
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	462a      	mov	r2, r5
 800355e:	4638      	mov	r0, r7
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <_svfiprintf_r+0x1f8>)
 8003562:	a904      	add	r1, sp, #16
 8003564:	f3af 8000 	nop.w
 8003568:	1c42      	adds	r2, r0, #1
 800356a:	4606      	mov	r6, r0
 800356c:	d1d6      	bne.n	800351c <_svfiprintf_r+0x174>
 800356e:	89ab      	ldrh	r3, [r5, #12]
 8003570:	065b      	lsls	r3, r3, #25
 8003572:	f53f af2d 	bmi.w	80033d0 <_svfiprintf_r+0x28>
 8003576:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003578:	b01d      	add	sp, #116	; 0x74
 800357a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357e:	ab03      	add	r3, sp, #12
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	462a      	mov	r2, r5
 8003584:	4638      	mov	r0, r7
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <_svfiprintf_r+0x1f8>)
 8003588:	a904      	add	r1, sp, #16
 800358a:	f000 f87d 	bl	8003688 <_printf_i>
 800358e:	e7eb      	b.n	8003568 <_svfiprintf_r+0x1c0>
 8003590:	08005329 	.word	0x08005329
 8003594:	0800532f 	.word	0x0800532f
 8003598:	08005333 	.word	0x08005333
 800359c:	00000000 	.word	0x00000000
 80035a0:	080032f5 	.word	0x080032f5

080035a4 <_printf_common>:
 80035a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a8:	4616      	mov	r6, r2
 80035aa:	4699      	mov	r9, r3
 80035ac:	688a      	ldr	r2, [r1, #8]
 80035ae:	690b      	ldr	r3, [r1, #16]
 80035b0:	4607      	mov	r7, r0
 80035b2:	4293      	cmp	r3, r2
 80035b4:	bfb8      	it	lt
 80035b6:	4613      	movlt	r3, r2
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035be:	460c      	mov	r4, r1
 80035c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035c4:	b10a      	cbz	r2, 80035ca <_printf_common+0x26>
 80035c6:	3301      	adds	r3, #1
 80035c8:	6033      	str	r3, [r6, #0]
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	0699      	lsls	r1, r3, #26
 80035ce:	bf42      	ittt	mi
 80035d0:	6833      	ldrmi	r3, [r6, #0]
 80035d2:	3302      	addmi	r3, #2
 80035d4:	6033      	strmi	r3, [r6, #0]
 80035d6:	6825      	ldr	r5, [r4, #0]
 80035d8:	f015 0506 	ands.w	r5, r5, #6
 80035dc:	d106      	bne.n	80035ec <_printf_common+0x48>
 80035de:	f104 0a19 	add.w	sl, r4, #25
 80035e2:	68e3      	ldr	r3, [r4, #12]
 80035e4:	6832      	ldr	r2, [r6, #0]
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	dc2b      	bgt.n	8003644 <_printf_common+0xa0>
 80035ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035f0:	1e13      	subs	r3, r2, #0
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	bf18      	it	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	0692      	lsls	r2, r2, #26
 80035fa:	d430      	bmi.n	800365e <_printf_common+0xba>
 80035fc:	4649      	mov	r1, r9
 80035fe:	4638      	mov	r0, r7
 8003600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003604:	47c0      	blx	r8
 8003606:	3001      	adds	r0, #1
 8003608:	d023      	beq.n	8003652 <_printf_common+0xae>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	6922      	ldr	r2, [r4, #16]
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf14      	ite	ne
 8003616:	2500      	movne	r5, #0
 8003618:	6833      	ldreq	r3, [r6, #0]
 800361a:	f04f 0600 	mov.w	r6, #0
 800361e:	bf08      	it	eq
 8003620:	68e5      	ldreq	r5, [r4, #12]
 8003622:	f104 041a 	add.w	r4, r4, #26
 8003626:	bf08      	it	eq
 8003628:	1aed      	subeq	r5, r5, r3
 800362a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800362e:	bf08      	it	eq
 8003630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003634:	4293      	cmp	r3, r2
 8003636:	bfc4      	itt	gt
 8003638:	1a9b      	subgt	r3, r3, r2
 800363a:	18ed      	addgt	r5, r5, r3
 800363c:	42b5      	cmp	r5, r6
 800363e:	d11a      	bne.n	8003676 <_printf_common+0xd2>
 8003640:	2000      	movs	r0, #0
 8003642:	e008      	b.n	8003656 <_printf_common+0xb2>
 8003644:	2301      	movs	r3, #1
 8003646:	4652      	mov	r2, sl
 8003648:	4649      	mov	r1, r9
 800364a:	4638      	mov	r0, r7
 800364c:	47c0      	blx	r8
 800364e:	3001      	adds	r0, #1
 8003650:	d103      	bne.n	800365a <_printf_common+0xb6>
 8003652:	f04f 30ff 	mov.w	r0, #4294967295
 8003656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365a:	3501      	adds	r5, #1
 800365c:	e7c1      	b.n	80035e2 <_printf_common+0x3e>
 800365e:	2030      	movs	r0, #48	; 0x30
 8003660:	18e1      	adds	r1, r4, r3
 8003662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800366c:	4422      	add	r2, r4
 800366e:	3302      	adds	r3, #2
 8003670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003674:	e7c2      	b.n	80035fc <_printf_common+0x58>
 8003676:	2301      	movs	r3, #1
 8003678:	4622      	mov	r2, r4
 800367a:	4649      	mov	r1, r9
 800367c:	4638      	mov	r0, r7
 800367e:	47c0      	blx	r8
 8003680:	3001      	adds	r0, #1
 8003682:	d0e6      	beq.n	8003652 <_printf_common+0xae>
 8003684:	3601      	adds	r6, #1
 8003686:	e7d9      	b.n	800363c <_printf_common+0x98>

08003688 <_printf_i>:
 8003688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	7e0f      	ldrb	r7, [r1, #24]
 800368e:	4691      	mov	r9, r2
 8003690:	2f78      	cmp	r7, #120	; 0x78
 8003692:	4680      	mov	r8, r0
 8003694:	460c      	mov	r4, r1
 8003696:	469a      	mov	sl, r3
 8003698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800369a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800369e:	d807      	bhi.n	80036b0 <_printf_i+0x28>
 80036a0:	2f62      	cmp	r7, #98	; 0x62
 80036a2:	d80a      	bhi.n	80036ba <_printf_i+0x32>
 80036a4:	2f00      	cmp	r7, #0
 80036a6:	f000 80d5 	beq.w	8003854 <_printf_i+0x1cc>
 80036aa:	2f58      	cmp	r7, #88	; 0x58
 80036ac:	f000 80c1 	beq.w	8003832 <_printf_i+0x1aa>
 80036b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036b8:	e03a      	b.n	8003730 <_printf_i+0xa8>
 80036ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036be:	2b15      	cmp	r3, #21
 80036c0:	d8f6      	bhi.n	80036b0 <_printf_i+0x28>
 80036c2:	a101      	add	r1, pc, #4	; (adr r1, 80036c8 <_printf_i+0x40>)
 80036c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036c8:	08003721 	.word	0x08003721
 80036cc:	08003735 	.word	0x08003735
 80036d0:	080036b1 	.word	0x080036b1
 80036d4:	080036b1 	.word	0x080036b1
 80036d8:	080036b1 	.word	0x080036b1
 80036dc:	080036b1 	.word	0x080036b1
 80036e0:	08003735 	.word	0x08003735
 80036e4:	080036b1 	.word	0x080036b1
 80036e8:	080036b1 	.word	0x080036b1
 80036ec:	080036b1 	.word	0x080036b1
 80036f0:	080036b1 	.word	0x080036b1
 80036f4:	0800383b 	.word	0x0800383b
 80036f8:	08003761 	.word	0x08003761
 80036fc:	080037f5 	.word	0x080037f5
 8003700:	080036b1 	.word	0x080036b1
 8003704:	080036b1 	.word	0x080036b1
 8003708:	0800385d 	.word	0x0800385d
 800370c:	080036b1 	.word	0x080036b1
 8003710:	08003761 	.word	0x08003761
 8003714:	080036b1 	.word	0x080036b1
 8003718:	080036b1 	.word	0x080036b1
 800371c:	080037fd 	.word	0x080037fd
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	1d1a      	adds	r2, r3, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	602a      	str	r2, [r5, #0]
 8003728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800372c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003730:	2301      	movs	r3, #1
 8003732:	e0a0      	b.n	8003876 <_printf_i+0x1ee>
 8003734:	6820      	ldr	r0, [r4, #0]
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	0607      	lsls	r7, r0, #24
 800373a:	f103 0104 	add.w	r1, r3, #4
 800373e:	6029      	str	r1, [r5, #0]
 8003740:	d501      	bpl.n	8003746 <_printf_i+0xbe>
 8003742:	681e      	ldr	r6, [r3, #0]
 8003744:	e003      	b.n	800374e <_printf_i+0xc6>
 8003746:	0646      	lsls	r6, r0, #25
 8003748:	d5fb      	bpl.n	8003742 <_printf_i+0xba>
 800374a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800374e:	2e00      	cmp	r6, #0
 8003750:	da03      	bge.n	800375a <_printf_i+0xd2>
 8003752:	232d      	movs	r3, #45	; 0x2d
 8003754:	4276      	negs	r6, r6
 8003756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800375a:	230a      	movs	r3, #10
 800375c:	4859      	ldr	r0, [pc, #356]	; (80038c4 <_printf_i+0x23c>)
 800375e:	e012      	b.n	8003786 <_printf_i+0xfe>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	6820      	ldr	r0, [r4, #0]
 8003764:	1d19      	adds	r1, r3, #4
 8003766:	6029      	str	r1, [r5, #0]
 8003768:	0605      	lsls	r5, r0, #24
 800376a:	d501      	bpl.n	8003770 <_printf_i+0xe8>
 800376c:	681e      	ldr	r6, [r3, #0]
 800376e:	e002      	b.n	8003776 <_printf_i+0xee>
 8003770:	0641      	lsls	r1, r0, #25
 8003772:	d5fb      	bpl.n	800376c <_printf_i+0xe4>
 8003774:	881e      	ldrh	r6, [r3, #0]
 8003776:	2f6f      	cmp	r7, #111	; 0x6f
 8003778:	bf0c      	ite	eq
 800377a:	2308      	moveq	r3, #8
 800377c:	230a      	movne	r3, #10
 800377e:	4851      	ldr	r0, [pc, #324]	; (80038c4 <_printf_i+0x23c>)
 8003780:	2100      	movs	r1, #0
 8003782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003786:	6865      	ldr	r5, [r4, #4]
 8003788:	2d00      	cmp	r5, #0
 800378a:	bfa8      	it	ge
 800378c:	6821      	ldrge	r1, [r4, #0]
 800378e:	60a5      	str	r5, [r4, #8]
 8003790:	bfa4      	itt	ge
 8003792:	f021 0104 	bicge.w	r1, r1, #4
 8003796:	6021      	strge	r1, [r4, #0]
 8003798:	b90e      	cbnz	r6, 800379e <_printf_i+0x116>
 800379a:	2d00      	cmp	r5, #0
 800379c:	d04b      	beq.n	8003836 <_printf_i+0x1ae>
 800379e:	4615      	mov	r5, r2
 80037a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80037a4:	fb03 6711 	mls	r7, r3, r1, r6
 80037a8:	5dc7      	ldrb	r7, [r0, r7]
 80037aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037ae:	4637      	mov	r7, r6
 80037b0:	42bb      	cmp	r3, r7
 80037b2:	460e      	mov	r6, r1
 80037b4:	d9f4      	bls.n	80037a0 <_printf_i+0x118>
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d10b      	bne.n	80037d2 <_printf_i+0x14a>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	07de      	lsls	r6, r3, #31
 80037be:	d508      	bpl.n	80037d2 <_printf_i+0x14a>
 80037c0:	6923      	ldr	r3, [r4, #16]
 80037c2:	6861      	ldr	r1, [r4, #4]
 80037c4:	4299      	cmp	r1, r3
 80037c6:	bfde      	ittt	le
 80037c8:	2330      	movle	r3, #48	; 0x30
 80037ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037d2:	1b52      	subs	r2, r2, r5
 80037d4:	6122      	str	r2, [r4, #16]
 80037d6:	464b      	mov	r3, r9
 80037d8:	4621      	mov	r1, r4
 80037da:	4640      	mov	r0, r8
 80037dc:	f8cd a000 	str.w	sl, [sp]
 80037e0:	aa03      	add	r2, sp, #12
 80037e2:	f7ff fedf 	bl	80035a4 <_printf_common>
 80037e6:	3001      	adds	r0, #1
 80037e8:	d14a      	bne.n	8003880 <_printf_i+0x1f8>
 80037ea:	f04f 30ff 	mov.w	r0, #4294967295
 80037ee:	b004      	add	sp, #16
 80037f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	f043 0320 	orr.w	r3, r3, #32
 80037fa:	6023      	str	r3, [r4, #0]
 80037fc:	2778      	movs	r7, #120	; 0x78
 80037fe:	4832      	ldr	r0, [pc, #200]	; (80038c8 <_printf_i+0x240>)
 8003800:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	6829      	ldr	r1, [r5, #0]
 8003808:	061f      	lsls	r7, r3, #24
 800380a:	f851 6b04 	ldr.w	r6, [r1], #4
 800380e:	d402      	bmi.n	8003816 <_printf_i+0x18e>
 8003810:	065f      	lsls	r7, r3, #25
 8003812:	bf48      	it	mi
 8003814:	b2b6      	uxthmi	r6, r6
 8003816:	07df      	lsls	r7, r3, #31
 8003818:	bf48      	it	mi
 800381a:	f043 0320 	orrmi.w	r3, r3, #32
 800381e:	6029      	str	r1, [r5, #0]
 8003820:	bf48      	it	mi
 8003822:	6023      	strmi	r3, [r4, #0]
 8003824:	b91e      	cbnz	r6, 800382e <_printf_i+0x1a6>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	f023 0320 	bic.w	r3, r3, #32
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	2310      	movs	r3, #16
 8003830:	e7a6      	b.n	8003780 <_printf_i+0xf8>
 8003832:	4824      	ldr	r0, [pc, #144]	; (80038c4 <_printf_i+0x23c>)
 8003834:	e7e4      	b.n	8003800 <_printf_i+0x178>
 8003836:	4615      	mov	r5, r2
 8003838:	e7bd      	b.n	80037b6 <_printf_i+0x12e>
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	6826      	ldr	r6, [r4, #0]
 800383e:	1d18      	adds	r0, r3, #4
 8003840:	6961      	ldr	r1, [r4, #20]
 8003842:	6028      	str	r0, [r5, #0]
 8003844:	0635      	lsls	r5, r6, #24
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	d501      	bpl.n	800384e <_printf_i+0x1c6>
 800384a:	6019      	str	r1, [r3, #0]
 800384c:	e002      	b.n	8003854 <_printf_i+0x1cc>
 800384e:	0670      	lsls	r0, r6, #25
 8003850:	d5fb      	bpl.n	800384a <_printf_i+0x1c2>
 8003852:	8019      	strh	r1, [r3, #0]
 8003854:	2300      	movs	r3, #0
 8003856:	4615      	mov	r5, r2
 8003858:	6123      	str	r3, [r4, #16]
 800385a:	e7bc      	b.n	80037d6 <_printf_i+0x14e>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	2100      	movs	r1, #0
 8003860:	1d1a      	adds	r2, r3, #4
 8003862:	602a      	str	r2, [r5, #0]
 8003864:	681d      	ldr	r5, [r3, #0]
 8003866:	6862      	ldr	r2, [r4, #4]
 8003868:	4628      	mov	r0, r5
 800386a:	f000 f915 	bl	8003a98 <memchr>
 800386e:	b108      	cbz	r0, 8003874 <_printf_i+0x1ec>
 8003870:	1b40      	subs	r0, r0, r5
 8003872:	6060      	str	r0, [r4, #4]
 8003874:	6863      	ldr	r3, [r4, #4]
 8003876:	6123      	str	r3, [r4, #16]
 8003878:	2300      	movs	r3, #0
 800387a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800387e:	e7aa      	b.n	80037d6 <_printf_i+0x14e>
 8003880:	462a      	mov	r2, r5
 8003882:	4649      	mov	r1, r9
 8003884:	4640      	mov	r0, r8
 8003886:	6923      	ldr	r3, [r4, #16]
 8003888:	47d0      	blx	sl
 800388a:	3001      	adds	r0, #1
 800388c:	d0ad      	beq.n	80037ea <_printf_i+0x162>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	079b      	lsls	r3, r3, #30
 8003892:	d413      	bmi.n	80038bc <_printf_i+0x234>
 8003894:	68e0      	ldr	r0, [r4, #12]
 8003896:	9b03      	ldr	r3, [sp, #12]
 8003898:	4298      	cmp	r0, r3
 800389a:	bfb8      	it	lt
 800389c:	4618      	movlt	r0, r3
 800389e:	e7a6      	b.n	80037ee <_printf_i+0x166>
 80038a0:	2301      	movs	r3, #1
 80038a2:	4632      	mov	r2, r6
 80038a4:	4649      	mov	r1, r9
 80038a6:	4640      	mov	r0, r8
 80038a8:	47d0      	blx	sl
 80038aa:	3001      	adds	r0, #1
 80038ac:	d09d      	beq.n	80037ea <_printf_i+0x162>
 80038ae:	3501      	adds	r5, #1
 80038b0:	68e3      	ldr	r3, [r4, #12]
 80038b2:	9903      	ldr	r1, [sp, #12]
 80038b4:	1a5b      	subs	r3, r3, r1
 80038b6:	42ab      	cmp	r3, r5
 80038b8:	dcf2      	bgt.n	80038a0 <_printf_i+0x218>
 80038ba:	e7eb      	b.n	8003894 <_printf_i+0x20c>
 80038bc:	2500      	movs	r5, #0
 80038be:	f104 0619 	add.w	r6, r4, #25
 80038c2:	e7f5      	b.n	80038b0 <_printf_i+0x228>
 80038c4:	0800533a 	.word	0x0800533a
 80038c8:	0800534b 	.word	0x0800534b

080038cc <__sflush_r>:
 80038cc:	898a      	ldrh	r2, [r1, #12]
 80038ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d0:	4605      	mov	r5, r0
 80038d2:	0710      	lsls	r0, r2, #28
 80038d4:	460c      	mov	r4, r1
 80038d6:	d457      	bmi.n	8003988 <__sflush_r+0xbc>
 80038d8:	684b      	ldr	r3, [r1, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	dc04      	bgt.n	80038e8 <__sflush_r+0x1c>
 80038de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	dc01      	bgt.n	80038e8 <__sflush_r+0x1c>
 80038e4:	2000      	movs	r0, #0
 80038e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038ea:	2e00      	cmp	r6, #0
 80038ec:	d0fa      	beq.n	80038e4 <__sflush_r+0x18>
 80038ee:	2300      	movs	r3, #0
 80038f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038f4:	682f      	ldr	r7, [r5, #0]
 80038f6:	6a21      	ldr	r1, [r4, #32]
 80038f8:	602b      	str	r3, [r5, #0]
 80038fa:	d032      	beq.n	8003962 <__sflush_r+0x96>
 80038fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	075a      	lsls	r2, r3, #29
 8003902:	d505      	bpl.n	8003910 <__sflush_r+0x44>
 8003904:	6863      	ldr	r3, [r4, #4]
 8003906:	1ac0      	subs	r0, r0, r3
 8003908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800390a:	b10b      	cbz	r3, 8003910 <__sflush_r+0x44>
 800390c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800390e:	1ac0      	subs	r0, r0, r3
 8003910:	2300      	movs	r3, #0
 8003912:	4602      	mov	r2, r0
 8003914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003916:	4628      	mov	r0, r5
 8003918:	6a21      	ldr	r1, [r4, #32]
 800391a:	47b0      	blx	r6
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	d106      	bne.n	8003930 <__sflush_r+0x64>
 8003922:	6829      	ldr	r1, [r5, #0]
 8003924:	291d      	cmp	r1, #29
 8003926:	d82b      	bhi.n	8003980 <__sflush_r+0xb4>
 8003928:	4a28      	ldr	r2, [pc, #160]	; (80039cc <__sflush_r+0x100>)
 800392a:	410a      	asrs	r2, r1
 800392c:	07d6      	lsls	r6, r2, #31
 800392e:	d427      	bmi.n	8003980 <__sflush_r+0xb4>
 8003930:	2200      	movs	r2, #0
 8003932:	6062      	str	r2, [r4, #4]
 8003934:	6922      	ldr	r2, [r4, #16]
 8003936:	04d9      	lsls	r1, r3, #19
 8003938:	6022      	str	r2, [r4, #0]
 800393a:	d504      	bpl.n	8003946 <__sflush_r+0x7a>
 800393c:	1c42      	adds	r2, r0, #1
 800393e:	d101      	bne.n	8003944 <__sflush_r+0x78>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b903      	cbnz	r3, 8003946 <__sflush_r+0x7a>
 8003944:	6560      	str	r0, [r4, #84]	; 0x54
 8003946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003948:	602f      	str	r7, [r5, #0]
 800394a:	2900      	cmp	r1, #0
 800394c:	d0ca      	beq.n	80038e4 <__sflush_r+0x18>
 800394e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003952:	4299      	cmp	r1, r3
 8003954:	d002      	beq.n	800395c <__sflush_r+0x90>
 8003956:	4628      	mov	r0, r5
 8003958:	f7fe fd3c 	bl	80023d4 <_free_r>
 800395c:	2000      	movs	r0, #0
 800395e:	6360      	str	r0, [r4, #52]	; 0x34
 8003960:	e7c1      	b.n	80038e6 <__sflush_r+0x1a>
 8003962:	2301      	movs	r3, #1
 8003964:	4628      	mov	r0, r5
 8003966:	47b0      	blx	r6
 8003968:	1c41      	adds	r1, r0, #1
 800396a:	d1c8      	bne.n	80038fe <__sflush_r+0x32>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0c5      	beq.n	80038fe <__sflush_r+0x32>
 8003972:	2b1d      	cmp	r3, #29
 8003974:	d001      	beq.n	800397a <__sflush_r+0xae>
 8003976:	2b16      	cmp	r3, #22
 8003978:	d101      	bne.n	800397e <__sflush_r+0xb2>
 800397a:	602f      	str	r7, [r5, #0]
 800397c:	e7b2      	b.n	80038e4 <__sflush_r+0x18>
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003984:	81a3      	strh	r3, [r4, #12]
 8003986:	e7ae      	b.n	80038e6 <__sflush_r+0x1a>
 8003988:	690f      	ldr	r7, [r1, #16]
 800398a:	2f00      	cmp	r7, #0
 800398c:	d0aa      	beq.n	80038e4 <__sflush_r+0x18>
 800398e:	0793      	lsls	r3, r2, #30
 8003990:	bf18      	it	ne
 8003992:	2300      	movne	r3, #0
 8003994:	680e      	ldr	r6, [r1, #0]
 8003996:	bf08      	it	eq
 8003998:	694b      	ldreq	r3, [r1, #20]
 800399a:	1bf6      	subs	r6, r6, r7
 800399c:	600f      	str	r7, [r1, #0]
 800399e:	608b      	str	r3, [r1, #8]
 80039a0:	2e00      	cmp	r6, #0
 80039a2:	dd9f      	ble.n	80038e4 <__sflush_r+0x18>
 80039a4:	4633      	mov	r3, r6
 80039a6:	463a      	mov	r2, r7
 80039a8:	4628      	mov	r0, r5
 80039aa:	6a21      	ldr	r1, [r4, #32]
 80039ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80039b0:	47e0      	blx	ip
 80039b2:	2800      	cmp	r0, #0
 80039b4:	dc06      	bgt.n	80039c4 <__sflush_r+0xf8>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c0:	81a3      	strh	r3, [r4, #12]
 80039c2:	e790      	b.n	80038e6 <__sflush_r+0x1a>
 80039c4:	4407      	add	r7, r0
 80039c6:	1a36      	subs	r6, r6, r0
 80039c8:	e7ea      	b.n	80039a0 <__sflush_r+0xd4>
 80039ca:	bf00      	nop
 80039cc:	dfbffffe 	.word	0xdfbffffe

080039d0 <_fflush_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	690b      	ldr	r3, [r1, #16]
 80039d4:	4605      	mov	r5, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	b913      	cbnz	r3, 80039e0 <_fflush_r+0x10>
 80039da:	2500      	movs	r5, #0
 80039dc:	4628      	mov	r0, r5
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	b118      	cbz	r0, 80039ea <_fflush_r+0x1a>
 80039e2:	6a03      	ldr	r3, [r0, #32]
 80039e4:	b90b      	cbnz	r3, 80039ea <_fflush_r+0x1a>
 80039e6:	f7fe fbdb 	bl	80021a0 <__sinit>
 80039ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f3      	beq.n	80039da <_fflush_r+0xa>
 80039f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039f4:	07d0      	lsls	r0, r2, #31
 80039f6:	d404      	bmi.n	8003a02 <_fflush_r+0x32>
 80039f8:	0599      	lsls	r1, r3, #22
 80039fa:	d402      	bmi.n	8003a02 <_fflush_r+0x32>
 80039fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039fe:	f7fe fce2 	bl	80023c6 <__retarget_lock_acquire_recursive>
 8003a02:	4628      	mov	r0, r5
 8003a04:	4621      	mov	r1, r4
 8003a06:	f7ff ff61 	bl	80038cc <__sflush_r>
 8003a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	07da      	lsls	r2, r3, #31
 8003a10:	d4e4      	bmi.n	80039dc <_fflush_r+0xc>
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	059b      	lsls	r3, r3, #22
 8003a16:	d4e1      	bmi.n	80039dc <_fflush_r+0xc>
 8003a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a1a:	f7fe fcd5 	bl	80023c8 <__retarget_lock_release_recursive>
 8003a1e:	e7dd      	b.n	80039dc <_fflush_r+0xc>

08003a20 <memmove>:
 8003a20:	4288      	cmp	r0, r1
 8003a22:	b510      	push	{r4, lr}
 8003a24:	eb01 0402 	add.w	r4, r1, r2
 8003a28:	d902      	bls.n	8003a30 <memmove+0x10>
 8003a2a:	4284      	cmp	r4, r0
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	d807      	bhi.n	8003a40 <memmove+0x20>
 8003a30:	1e43      	subs	r3, r0, #1
 8003a32:	42a1      	cmp	r1, r4
 8003a34:	d008      	beq.n	8003a48 <memmove+0x28>
 8003a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a3e:	e7f8      	b.n	8003a32 <memmove+0x12>
 8003a40:	4601      	mov	r1, r0
 8003a42:	4402      	add	r2, r0
 8003a44:	428a      	cmp	r2, r1
 8003a46:	d100      	bne.n	8003a4a <memmove+0x2a>
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a52:	e7f7      	b.n	8003a44 <memmove+0x24>

08003a54 <strncmp>:
 8003a54:	b510      	push	{r4, lr}
 8003a56:	b16a      	cbz	r2, 8003a74 <strncmp+0x20>
 8003a58:	3901      	subs	r1, #1
 8003a5a:	1884      	adds	r4, r0, r2
 8003a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d103      	bne.n	8003a70 <strncmp+0x1c>
 8003a68:	42a0      	cmp	r0, r4
 8003a6a:	d001      	beq.n	8003a70 <strncmp+0x1c>
 8003a6c:	2a00      	cmp	r2, #0
 8003a6e:	d1f5      	bne.n	8003a5c <strncmp+0x8>
 8003a70:	1ad0      	subs	r0, r2, r3
 8003a72:	bd10      	pop	{r4, pc}
 8003a74:	4610      	mov	r0, r2
 8003a76:	e7fc      	b.n	8003a72 <strncmp+0x1e>

08003a78 <_sbrk_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4d05      	ldr	r5, [pc, #20]	; (8003a94 <_sbrk_r+0x1c>)
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	f7fd fb22 	bl	80010cc <_sbrk>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d102      	bne.n	8003a92 <_sbrk_r+0x1a>
 8003a8c:	682b      	ldr	r3, [r5, #0]
 8003a8e:	b103      	cbz	r3, 8003a92 <_sbrk_r+0x1a>
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
 8003a94:	2000036c 	.word	0x2000036c

08003a98 <memchr>:
 8003a98:	4603      	mov	r3, r0
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	b2c9      	uxtb	r1, r1
 8003a9e:	4402      	add	r2, r0
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	d101      	bne.n	8003aaa <memchr+0x12>
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e003      	b.n	8003ab2 <memchr+0x1a>
 8003aaa:	7804      	ldrb	r4, [r0, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	428c      	cmp	r4, r1
 8003ab0:	d1f6      	bne.n	8003aa0 <memchr+0x8>
 8003ab2:	bd10      	pop	{r4, pc}

08003ab4 <memcpy>:
 8003ab4:	440a      	add	r2, r1
 8003ab6:	4291      	cmp	r1, r2
 8003ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003abc:	d100      	bne.n	8003ac0 <memcpy+0xc>
 8003abe:	4770      	bx	lr
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ac6:	4291      	cmp	r1, r2
 8003ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003acc:	d1f9      	bne.n	8003ac2 <memcpy+0xe>
 8003ace:	bd10      	pop	{r4, pc}

08003ad0 <nan>:
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	4901      	ldr	r1, [pc, #4]	; (8003ad8 <nan+0x8>)
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	7ff80000 	.word	0x7ff80000

08003adc <rshift>:
 8003adc:	6903      	ldr	r3, [r0, #16]
 8003ade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ae2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8003ae6:	f100 0414 	add.w	r4, r0, #20
 8003aea:	ea4f 1261 	mov.w	r2, r1, asr #5
 8003aee:	dd46      	ble.n	8003b7e <rshift+0xa2>
 8003af0:	f011 011f 	ands.w	r1, r1, #31
 8003af4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8003af8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8003afc:	d10c      	bne.n	8003b18 <rshift+0x3c>
 8003afe:	4629      	mov	r1, r5
 8003b00:	f100 0710 	add.w	r7, r0, #16
 8003b04:	42b1      	cmp	r1, r6
 8003b06:	d335      	bcc.n	8003b74 <rshift+0x98>
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	1eea      	subs	r2, r5, #3
 8003b0e:	4296      	cmp	r6, r2
 8003b10:	bf38      	it	cc
 8003b12:	2300      	movcc	r3, #0
 8003b14:	4423      	add	r3, r4
 8003b16:	e015      	b.n	8003b44 <rshift+0x68>
 8003b18:	46a1      	mov	r9, r4
 8003b1a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8003b1e:	f1c1 0820 	rsb	r8, r1, #32
 8003b22:	40cf      	lsrs	r7, r1
 8003b24:	f105 0e04 	add.w	lr, r5, #4
 8003b28:	4576      	cmp	r6, lr
 8003b2a:	46f4      	mov	ip, lr
 8003b2c:	d816      	bhi.n	8003b5c <rshift+0x80>
 8003b2e:	1a9a      	subs	r2, r3, r2
 8003b30:	0092      	lsls	r2, r2, #2
 8003b32:	3a04      	subs	r2, #4
 8003b34:	3501      	adds	r5, #1
 8003b36:	42ae      	cmp	r6, r5
 8003b38:	bf38      	it	cc
 8003b3a:	2200      	movcc	r2, #0
 8003b3c:	18a3      	adds	r3, r4, r2
 8003b3e:	50a7      	str	r7, [r4, r2]
 8003b40:	b107      	cbz	r7, 8003b44 <rshift+0x68>
 8003b42:	3304      	adds	r3, #4
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	eba3 0204 	sub.w	r2, r3, r4
 8003b4a:	bf08      	it	eq
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8003b52:	6102      	str	r2, [r0, #16]
 8003b54:	bf08      	it	eq
 8003b56:	6143      	streq	r3, [r0, #20]
 8003b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b5c:	f8dc c000 	ldr.w	ip, [ip]
 8003b60:	fa0c fc08 	lsl.w	ip, ip, r8
 8003b64:	ea4c 0707 	orr.w	r7, ip, r7
 8003b68:	f849 7b04 	str.w	r7, [r9], #4
 8003b6c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003b70:	40cf      	lsrs	r7, r1
 8003b72:	e7d9      	b.n	8003b28 <rshift+0x4c>
 8003b74:	f851 cb04 	ldr.w	ip, [r1], #4
 8003b78:	f847 cf04 	str.w	ip, [r7, #4]!
 8003b7c:	e7c2      	b.n	8003b04 <rshift+0x28>
 8003b7e:	4623      	mov	r3, r4
 8003b80:	e7e0      	b.n	8003b44 <rshift+0x68>

08003b82 <__hexdig_fun>:
 8003b82:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d802      	bhi.n	8003b90 <__hexdig_fun+0xe>
 8003b8a:	3820      	subs	r0, #32
 8003b8c:	b2c0      	uxtb	r0, r0
 8003b8e:	4770      	bx	lr
 8003b90:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d801      	bhi.n	8003b9c <__hexdig_fun+0x1a>
 8003b98:	3847      	subs	r0, #71	; 0x47
 8003b9a:	e7f7      	b.n	8003b8c <__hexdig_fun+0xa>
 8003b9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d801      	bhi.n	8003ba8 <__hexdig_fun+0x26>
 8003ba4:	3827      	subs	r0, #39	; 0x27
 8003ba6:	e7f1      	b.n	8003b8c <__hexdig_fun+0xa>
 8003ba8:	2000      	movs	r0, #0
 8003baa:	4770      	bx	lr

08003bac <__gethex>:
 8003bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	4681      	mov	r9, r0
 8003bb2:	468a      	mov	sl, r1
 8003bb4:	4617      	mov	r7, r2
 8003bb6:	680a      	ldr	r2, [r1, #0]
 8003bb8:	b085      	sub	sp, #20
 8003bba:	f102 0b02 	add.w	fp, r2, #2
 8003bbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003bc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003bc6:	9302      	str	r3, [sp, #8]
 8003bc8:	32fe      	adds	r2, #254	; 0xfe
 8003bca:	eb02 030b 	add.w	r3, r2, fp
 8003bce:	46d8      	mov	r8, fp
 8003bd0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2830      	cmp	r0, #48	; 0x30
 8003bd8:	d0f7      	beq.n	8003bca <__gethex+0x1e>
 8003bda:	f7ff ffd2 	bl	8003b82 <__hexdig_fun>
 8003bde:	4604      	mov	r4, r0
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d138      	bne.n	8003c56 <__gethex+0xaa>
 8003be4:	2201      	movs	r2, #1
 8003be6:	4640      	mov	r0, r8
 8003be8:	49a7      	ldr	r1, [pc, #668]	; (8003e88 <__gethex+0x2dc>)
 8003bea:	f7ff ff33 	bl	8003a54 <strncmp>
 8003bee:	4606      	mov	r6, r0
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d169      	bne.n	8003cc8 <__gethex+0x11c>
 8003bf4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8003bf8:	465d      	mov	r5, fp
 8003bfa:	f7ff ffc2 	bl	8003b82 <__hexdig_fun>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d064      	beq.n	8003ccc <__gethex+0x120>
 8003c02:	465a      	mov	r2, fp
 8003c04:	7810      	ldrb	r0, [r2, #0]
 8003c06:	4690      	mov	r8, r2
 8003c08:	2830      	cmp	r0, #48	; 0x30
 8003c0a:	f102 0201 	add.w	r2, r2, #1
 8003c0e:	d0f9      	beq.n	8003c04 <__gethex+0x58>
 8003c10:	f7ff ffb7 	bl	8003b82 <__hexdig_fun>
 8003c14:	2301      	movs	r3, #1
 8003c16:	fab0 f480 	clz	r4, r0
 8003c1a:	465e      	mov	r6, fp
 8003c1c:	0964      	lsrs	r4, r4, #5
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	4642      	mov	r2, r8
 8003c22:	4615      	mov	r5, r2
 8003c24:	7828      	ldrb	r0, [r5, #0]
 8003c26:	3201      	adds	r2, #1
 8003c28:	f7ff ffab 	bl	8003b82 <__hexdig_fun>
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d1f8      	bne.n	8003c22 <__gethex+0x76>
 8003c30:	2201      	movs	r2, #1
 8003c32:	4628      	mov	r0, r5
 8003c34:	4994      	ldr	r1, [pc, #592]	; (8003e88 <__gethex+0x2dc>)
 8003c36:	f7ff ff0d 	bl	8003a54 <strncmp>
 8003c3a:	b978      	cbnz	r0, 8003c5c <__gethex+0xb0>
 8003c3c:	b946      	cbnz	r6, 8003c50 <__gethex+0xa4>
 8003c3e:	1c6e      	adds	r6, r5, #1
 8003c40:	4632      	mov	r2, r6
 8003c42:	4615      	mov	r5, r2
 8003c44:	7828      	ldrb	r0, [r5, #0]
 8003c46:	3201      	adds	r2, #1
 8003c48:	f7ff ff9b 	bl	8003b82 <__hexdig_fun>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1f8      	bne.n	8003c42 <__gethex+0x96>
 8003c50:	1b73      	subs	r3, r6, r5
 8003c52:	009e      	lsls	r6, r3, #2
 8003c54:	e004      	b.n	8003c60 <__gethex+0xb4>
 8003c56:	2400      	movs	r4, #0
 8003c58:	4626      	mov	r6, r4
 8003c5a:	e7e1      	b.n	8003c20 <__gethex+0x74>
 8003c5c:	2e00      	cmp	r6, #0
 8003c5e:	d1f7      	bne.n	8003c50 <__gethex+0xa4>
 8003c60:	782b      	ldrb	r3, [r5, #0]
 8003c62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c66:	2b50      	cmp	r3, #80	; 0x50
 8003c68:	d13d      	bne.n	8003ce6 <__gethex+0x13a>
 8003c6a:	786b      	ldrb	r3, [r5, #1]
 8003c6c:	2b2b      	cmp	r3, #43	; 0x2b
 8003c6e:	d02f      	beq.n	8003cd0 <__gethex+0x124>
 8003c70:	2b2d      	cmp	r3, #45	; 0x2d
 8003c72:	d031      	beq.n	8003cd8 <__gethex+0x12c>
 8003c74:	f04f 0b00 	mov.w	fp, #0
 8003c78:	1c69      	adds	r1, r5, #1
 8003c7a:	7808      	ldrb	r0, [r1, #0]
 8003c7c:	f7ff ff81 	bl	8003b82 <__hexdig_fun>
 8003c80:	1e42      	subs	r2, r0, #1
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	2a18      	cmp	r2, #24
 8003c86:	d82e      	bhi.n	8003ce6 <__gethex+0x13a>
 8003c88:	f1a0 0210 	sub.w	r2, r0, #16
 8003c8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003c90:	f7ff ff77 	bl	8003b82 <__hexdig_fun>
 8003c94:	f100 3cff 	add.w	ip, r0, #4294967295
 8003c98:	fa5f fc8c 	uxtb.w	ip, ip
 8003c9c:	f1bc 0f18 	cmp.w	ip, #24
 8003ca0:	d91d      	bls.n	8003cde <__gethex+0x132>
 8003ca2:	f1bb 0f00 	cmp.w	fp, #0
 8003ca6:	d000      	beq.n	8003caa <__gethex+0xfe>
 8003ca8:	4252      	negs	r2, r2
 8003caa:	4416      	add	r6, r2
 8003cac:	f8ca 1000 	str.w	r1, [sl]
 8003cb0:	b1dc      	cbz	r4, 8003cea <__gethex+0x13e>
 8003cb2:	9b01      	ldr	r3, [sp, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf14      	ite	ne
 8003cb8:	f04f 0800 	movne.w	r8, #0
 8003cbc:	f04f 0806 	moveq.w	r8, #6
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	b005      	add	sp, #20
 8003cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc8:	4645      	mov	r5, r8
 8003cca:	4626      	mov	r6, r4
 8003ccc:	2401      	movs	r4, #1
 8003cce:	e7c7      	b.n	8003c60 <__gethex+0xb4>
 8003cd0:	f04f 0b00 	mov.w	fp, #0
 8003cd4:	1ca9      	adds	r1, r5, #2
 8003cd6:	e7d0      	b.n	8003c7a <__gethex+0xce>
 8003cd8:	f04f 0b01 	mov.w	fp, #1
 8003cdc:	e7fa      	b.n	8003cd4 <__gethex+0x128>
 8003cde:	230a      	movs	r3, #10
 8003ce0:	fb03 0002 	mla	r0, r3, r2, r0
 8003ce4:	e7d0      	b.n	8003c88 <__gethex+0xdc>
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	e7e0      	b.n	8003cac <__gethex+0x100>
 8003cea:	4621      	mov	r1, r4
 8003cec:	eba5 0308 	sub.w	r3, r5, r8
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	2b07      	cmp	r3, #7
 8003cf4:	dc0a      	bgt.n	8003d0c <__gethex+0x160>
 8003cf6:	4648      	mov	r0, r9
 8003cf8:	f000 fa5c 	bl	80041b4 <_Balloc>
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	b940      	cbnz	r0, 8003d12 <__gethex+0x166>
 8003d00:	4602      	mov	r2, r0
 8003d02:	21e4      	movs	r1, #228	; 0xe4
 8003d04:	4b61      	ldr	r3, [pc, #388]	; (8003e8c <__gethex+0x2e0>)
 8003d06:	4862      	ldr	r0, [pc, #392]	; (8003e90 <__gethex+0x2e4>)
 8003d08:	f000 ff2c 	bl	8004b64 <__assert_func>
 8003d0c:	3101      	adds	r1, #1
 8003d0e:	105b      	asrs	r3, r3, #1
 8003d10:	e7ef      	b.n	8003cf2 <__gethex+0x146>
 8003d12:	2300      	movs	r3, #0
 8003d14:	469b      	mov	fp, r3
 8003d16:	f100 0a14 	add.w	sl, r0, #20
 8003d1a:	f8cd a004 	str.w	sl, [sp, #4]
 8003d1e:	45a8      	cmp	r8, r5
 8003d20:	d344      	bcc.n	8003dac <__gethex+0x200>
 8003d22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003d26:	4658      	mov	r0, fp
 8003d28:	f848 bb04 	str.w	fp, [r8], #4
 8003d2c:	eba8 080a 	sub.w	r8, r8, sl
 8003d30:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8003d34:	6122      	str	r2, [r4, #16]
 8003d36:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8003d3a:	f000 fb2d 	bl	8004398 <__hi0bits>
 8003d3e:	683d      	ldr	r5, [r7, #0]
 8003d40:	eba8 0800 	sub.w	r8, r8, r0
 8003d44:	45a8      	cmp	r8, r5
 8003d46:	dd59      	ble.n	8003dfc <__gethex+0x250>
 8003d48:	eba8 0805 	sub.w	r8, r8, r5
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f000 feab 	bl	8004aaa <__any_on>
 8003d54:	4683      	mov	fp, r0
 8003d56:	b1b8      	cbz	r0, 8003d88 <__gethex+0x1dc>
 8003d58:	f04f 0b01 	mov.w	fp, #1
 8003d5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8003d60:	1159      	asrs	r1, r3, #5
 8003d62:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8003d66:	f003 021f 	and.w	r2, r3, #31
 8003d6a:	fa0b f202 	lsl.w	r2, fp, r2
 8003d6e:	420a      	tst	r2, r1
 8003d70:	d00a      	beq.n	8003d88 <__gethex+0x1dc>
 8003d72:	455b      	cmp	r3, fp
 8003d74:	dd06      	ble.n	8003d84 <__gethex+0x1d8>
 8003d76:	4620      	mov	r0, r4
 8003d78:	f1a8 0102 	sub.w	r1, r8, #2
 8003d7c:	f000 fe95 	bl	8004aaa <__any_on>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d138      	bne.n	8003df6 <__gethex+0x24a>
 8003d84:	f04f 0b02 	mov.w	fp, #2
 8003d88:	4641      	mov	r1, r8
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fea6 	bl	8003adc <rshift>
 8003d90:	4446      	add	r6, r8
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	42b3      	cmp	r3, r6
 8003d96:	da41      	bge.n	8003e1c <__gethex+0x270>
 8003d98:	4621      	mov	r1, r4
 8003d9a:	4648      	mov	r0, r9
 8003d9c:	f000 fa4a 	bl	8004234 <_Bfree>
 8003da0:	2300      	movs	r3, #0
 8003da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003da4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e789      	b.n	8003cc0 <__gethex+0x114>
 8003dac:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8003db0:	2a2e      	cmp	r2, #46	; 0x2e
 8003db2:	d014      	beq.n	8003dde <__gethex+0x232>
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d106      	bne.n	8003dc6 <__gethex+0x21a>
 8003db8:	9b01      	ldr	r3, [sp, #4]
 8003dba:	f843 bb04 	str.w	fp, [r3], #4
 8003dbe:	f04f 0b00 	mov.w	fp, #0
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	465b      	mov	r3, fp
 8003dc6:	7828      	ldrb	r0, [r5, #0]
 8003dc8:	9303      	str	r3, [sp, #12]
 8003dca:	f7ff feda 	bl	8003b82 <__hexdig_fun>
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	f000 000f 	and.w	r0, r0, #15
 8003dd4:	4098      	lsls	r0, r3
 8003dd6:	ea4b 0b00 	orr.w	fp, fp, r0
 8003dda:	3304      	adds	r3, #4
 8003ddc:	e79f      	b.n	8003d1e <__gethex+0x172>
 8003dde:	45a8      	cmp	r8, r5
 8003de0:	d8e8      	bhi.n	8003db4 <__gethex+0x208>
 8003de2:	2201      	movs	r2, #1
 8003de4:	4628      	mov	r0, r5
 8003de6:	4928      	ldr	r1, [pc, #160]	; (8003e88 <__gethex+0x2dc>)
 8003de8:	9303      	str	r3, [sp, #12]
 8003dea:	f7ff fe33 	bl	8003a54 <strncmp>
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d1df      	bne.n	8003db4 <__gethex+0x208>
 8003df4:	e793      	b.n	8003d1e <__gethex+0x172>
 8003df6:	f04f 0b03 	mov.w	fp, #3
 8003dfa:	e7c5      	b.n	8003d88 <__gethex+0x1dc>
 8003dfc:	da0b      	bge.n	8003e16 <__gethex+0x26a>
 8003dfe:	eba5 0808 	sub.w	r8, r5, r8
 8003e02:	4621      	mov	r1, r4
 8003e04:	4642      	mov	r2, r8
 8003e06:	4648      	mov	r0, r9
 8003e08:	f000 fc2c 	bl	8004664 <__lshift>
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	eba6 0608 	sub.w	r6, r6, r8
 8003e12:	f100 0a14 	add.w	sl, r0, #20
 8003e16:	f04f 0b00 	mov.w	fp, #0
 8003e1a:	e7ba      	b.n	8003d92 <__gethex+0x1e6>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	42b3      	cmp	r3, r6
 8003e20:	dd74      	ble.n	8003f0c <__gethex+0x360>
 8003e22:	1b9e      	subs	r6, r3, r6
 8003e24:	42b5      	cmp	r5, r6
 8003e26:	dc35      	bgt.n	8003e94 <__gethex+0x2e8>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d023      	beq.n	8003e76 <__gethex+0x2ca>
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d025      	beq.n	8003e7e <__gethex+0x2d2>
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d115      	bne.n	8003e62 <__gethex+0x2b6>
 8003e36:	42b5      	cmp	r5, r6
 8003e38:	d113      	bne.n	8003e62 <__gethex+0x2b6>
 8003e3a:	2d01      	cmp	r5, #1
 8003e3c:	d10b      	bne.n	8003e56 <__gethex+0x2aa>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	9a02      	ldr	r2, [sp, #8]
 8003e42:	f04f 0862 	mov.w	r8, #98	; 0x62
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	2301      	movs	r3, #1
 8003e4a:	6123      	str	r3, [r4, #16]
 8003e4c:	f8ca 3000 	str.w	r3, [sl]
 8003e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e52:	601c      	str	r4, [r3, #0]
 8003e54:	e734      	b.n	8003cc0 <__gethex+0x114>
 8003e56:	4620      	mov	r0, r4
 8003e58:	1e69      	subs	r1, r5, #1
 8003e5a:	f000 fe26 	bl	8004aaa <__any_on>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d1ed      	bne.n	8003e3e <__gethex+0x292>
 8003e62:	4621      	mov	r1, r4
 8003e64:	4648      	mov	r0, r9
 8003e66:	f000 f9e5 	bl	8004234 <_Bfree>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e6e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e724      	b.n	8003cc0 <__gethex+0x114>
 8003e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f2      	bne.n	8003e62 <__gethex+0x2b6>
 8003e7c:	e7df      	b.n	8003e3e <__gethex+0x292>
 8003e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1dc      	bne.n	8003e3e <__gethex+0x292>
 8003e84:	e7ed      	b.n	8003e62 <__gethex+0x2b6>
 8003e86:	bf00      	nop
 8003e88:	080051c3 	.word	0x080051c3
 8003e8c:	08005364 	.word	0x08005364
 8003e90:	08005375 	.word	0x08005375
 8003e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8003e98:	f1bb 0f00 	cmp.w	fp, #0
 8003e9c:	d133      	bne.n	8003f06 <__gethex+0x35a>
 8003e9e:	f1b8 0f00 	cmp.w	r8, #0
 8003ea2:	d004      	beq.n	8003eae <__gethex+0x302>
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f000 fdff 	bl	8004aaa <__any_on>
 8003eac:	4683      	mov	fp, r0
 8003eae:	2301      	movs	r3, #1
 8003eb0:	ea4f 1268 	mov.w	r2, r8, asr #5
 8003eb4:	f008 081f 	and.w	r8, r8, #31
 8003eb8:	fa03 f308 	lsl.w	r3, r3, r8
 8003ebc:	f04f 0802 	mov.w	r8, #2
 8003ec0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4213      	tst	r3, r2
 8003ec8:	4620      	mov	r0, r4
 8003eca:	bf18      	it	ne
 8003ecc:	f04b 0b02 	orrne.w	fp, fp, #2
 8003ed0:	1bad      	subs	r5, r5, r6
 8003ed2:	f7ff fe03 	bl	8003adc <rshift>
 8003ed6:	687e      	ldr	r6, [r7, #4]
 8003ed8:	f1bb 0f00 	cmp.w	fp, #0
 8003edc:	d04a      	beq.n	8003f74 <__gethex+0x3c8>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d016      	beq.n	8003f12 <__gethex+0x366>
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d018      	beq.n	8003f1a <__gethex+0x36e>
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d109      	bne.n	8003f00 <__gethex+0x354>
 8003eec:	f01b 0f02 	tst.w	fp, #2
 8003ef0:	d006      	beq.n	8003f00 <__gethex+0x354>
 8003ef2:	f8da 3000 	ldr.w	r3, [sl]
 8003ef6:	ea4b 0b03 	orr.w	fp, fp, r3
 8003efa:	f01b 0f01 	tst.w	fp, #1
 8003efe:	d10f      	bne.n	8003f20 <__gethex+0x374>
 8003f00:	f048 0810 	orr.w	r8, r8, #16
 8003f04:	e036      	b.n	8003f74 <__gethex+0x3c8>
 8003f06:	f04f 0b01 	mov.w	fp, #1
 8003f0a:	e7d0      	b.n	8003eae <__gethex+0x302>
 8003f0c:	f04f 0801 	mov.w	r8, #1
 8003f10:	e7e2      	b.n	8003ed8 <__gethex+0x32c>
 8003f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f14:	f1c3 0301 	rsb	r3, r3, #1
 8003f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ef      	beq.n	8003f00 <__gethex+0x354>
 8003f20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8003f24:	f104 0214 	add.w	r2, r4, #20
 8003f28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8003f34:	4694      	mov	ip, r2
 8003f36:	f852 1b04 	ldr.w	r1, [r2], #4
 8003f3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003f3e:	d01e      	beq.n	8003f7e <__gethex+0x3d2>
 8003f40:	3101      	adds	r1, #1
 8003f42:	f8cc 1000 	str.w	r1, [ip]
 8003f46:	f1b8 0f02 	cmp.w	r8, #2
 8003f4a:	f104 0214 	add.w	r2, r4, #20
 8003f4e:	d13d      	bne.n	8003fcc <__gethex+0x420>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	42ab      	cmp	r3, r5
 8003f56:	d10b      	bne.n	8003f70 <__gethex+0x3c4>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	1169      	asrs	r1, r5, #5
 8003f5c:	f005 051f 	and.w	r5, r5, #31
 8003f60:	fa03 f505 	lsl.w	r5, r3, r5
 8003f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003f68:	421d      	tst	r5, r3
 8003f6a:	bf18      	it	ne
 8003f6c:	f04f 0801 	movne.w	r8, #1
 8003f70:	f048 0820 	orr.w	r8, r8, #32
 8003f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f76:	601c      	str	r4, [r3, #0]
 8003f78:	9b02      	ldr	r3, [sp, #8]
 8003f7a:	601e      	str	r6, [r3, #0]
 8003f7c:	e6a0      	b.n	8003cc0 <__gethex+0x114>
 8003f7e:	4290      	cmp	r0, r2
 8003f80:	f842 3c04 	str.w	r3, [r2, #-4]
 8003f84:	d8d6      	bhi.n	8003f34 <__gethex+0x388>
 8003f86:	68a2      	ldr	r2, [r4, #8]
 8003f88:	4593      	cmp	fp, r2
 8003f8a:	db17      	blt.n	8003fbc <__gethex+0x410>
 8003f8c:	6861      	ldr	r1, [r4, #4]
 8003f8e:	4648      	mov	r0, r9
 8003f90:	3101      	adds	r1, #1
 8003f92:	f000 f90f 	bl	80041b4 <_Balloc>
 8003f96:	4682      	mov	sl, r0
 8003f98:	b918      	cbnz	r0, 8003fa2 <__gethex+0x3f6>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	2184      	movs	r1, #132	; 0x84
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <__gethex+0x45c>)
 8003fa0:	e6b1      	b.n	8003d06 <__gethex+0x15a>
 8003fa2:	6922      	ldr	r2, [r4, #16]
 8003fa4:	f104 010c 	add.w	r1, r4, #12
 8003fa8:	3202      	adds	r2, #2
 8003faa:	0092      	lsls	r2, r2, #2
 8003fac:	300c      	adds	r0, #12
 8003fae:	f7ff fd81 	bl	8003ab4 <memcpy>
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	4648      	mov	r0, r9
 8003fb6:	f000 f93d 	bl	8004234 <_Bfree>
 8003fba:	4654      	mov	r4, sl
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	1c51      	adds	r1, r2, #1
 8003fc0:	6121      	str	r1, [r4, #16]
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003fc8:	6151      	str	r1, [r2, #20]
 8003fca:	e7bc      	b.n	8003f46 <__gethex+0x39a>
 8003fcc:	6921      	ldr	r1, [r4, #16]
 8003fce:	4559      	cmp	r1, fp
 8003fd0:	dd0b      	ble.n	8003fea <__gethex+0x43e>
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f7ff fd81 	bl	8003adc <rshift>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3601      	adds	r6, #1
 8003fde:	42b3      	cmp	r3, r6
 8003fe0:	f6ff aeda 	blt.w	8003d98 <__gethex+0x1ec>
 8003fe4:	f04f 0801 	mov.w	r8, #1
 8003fe8:	e7c2      	b.n	8003f70 <__gethex+0x3c4>
 8003fea:	f015 051f 	ands.w	r5, r5, #31
 8003fee:	d0f9      	beq.n	8003fe4 <__gethex+0x438>
 8003ff0:	9b01      	ldr	r3, [sp, #4]
 8003ff2:	f1c5 0520 	rsb	r5, r5, #32
 8003ff6:	441a      	add	r2, r3
 8003ff8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8003ffc:	f000 f9cc 	bl	8004398 <__hi0bits>
 8004000:	42a8      	cmp	r0, r5
 8004002:	dbe6      	blt.n	8003fd2 <__gethex+0x426>
 8004004:	e7ee      	b.n	8003fe4 <__gethex+0x438>
 8004006:	bf00      	nop
 8004008:	08005364 	.word	0x08005364

0800400c <L_shift>:
 800400c:	f1c2 0208 	rsb	r2, r2, #8
 8004010:	0092      	lsls	r2, r2, #2
 8004012:	b570      	push	{r4, r5, r6, lr}
 8004014:	f1c2 0620 	rsb	r6, r2, #32
 8004018:	6843      	ldr	r3, [r0, #4]
 800401a:	6804      	ldr	r4, [r0, #0]
 800401c:	fa03 f506 	lsl.w	r5, r3, r6
 8004020:	432c      	orrs	r4, r5
 8004022:	40d3      	lsrs	r3, r2
 8004024:	6004      	str	r4, [r0, #0]
 8004026:	f840 3f04 	str.w	r3, [r0, #4]!
 800402a:	4288      	cmp	r0, r1
 800402c:	d3f4      	bcc.n	8004018 <L_shift+0xc>
 800402e:	bd70      	pop	{r4, r5, r6, pc}

08004030 <__match>:
 8004030:	b530      	push	{r4, r5, lr}
 8004032:	6803      	ldr	r3, [r0, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800403a:	b914      	cbnz	r4, 8004042 <__match+0x12>
 800403c:	6003      	str	r3, [r0, #0]
 800403e:	2001      	movs	r0, #1
 8004040:	bd30      	pop	{r4, r5, pc}
 8004042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004046:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800404a:	2d19      	cmp	r5, #25
 800404c:	bf98      	it	ls
 800404e:	3220      	addls	r2, #32
 8004050:	42a2      	cmp	r2, r4
 8004052:	d0f0      	beq.n	8004036 <__match+0x6>
 8004054:	2000      	movs	r0, #0
 8004056:	e7f3      	b.n	8004040 <__match+0x10>

08004058 <__hexnan>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	2500      	movs	r5, #0
 800405e:	680b      	ldr	r3, [r1, #0]
 8004060:	4682      	mov	sl, r0
 8004062:	115e      	asrs	r6, r3, #5
 8004064:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004068:	f013 031f 	ands.w	r3, r3, #31
 800406c:	bf18      	it	ne
 800406e:	3604      	addne	r6, #4
 8004070:	1f37      	subs	r7, r6, #4
 8004072:	4690      	mov	r8, r2
 8004074:	46b9      	mov	r9, r7
 8004076:	463c      	mov	r4, r7
 8004078:	46ab      	mov	fp, r5
 800407a:	b087      	sub	sp, #28
 800407c:	6801      	ldr	r1, [r0, #0]
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	f846 5c04 	str.w	r5, [r6, #-4]
 8004084:	9502      	str	r5, [sp, #8]
 8004086:	784a      	ldrb	r2, [r1, #1]
 8004088:	1c4b      	adds	r3, r1, #1
 800408a:	9303      	str	r3, [sp, #12]
 800408c:	b342      	cbz	r2, 80040e0 <__hexnan+0x88>
 800408e:	4610      	mov	r0, r2
 8004090:	9105      	str	r1, [sp, #20]
 8004092:	9204      	str	r2, [sp, #16]
 8004094:	f7ff fd75 	bl	8003b82 <__hexdig_fun>
 8004098:	2800      	cmp	r0, #0
 800409a:	d14f      	bne.n	800413c <__hexnan+0xe4>
 800409c:	9a04      	ldr	r2, [sp, #16]
 800409e:	9905      	ldr	r1, [sp, #20]
 80040a0:	2a20      	cmp	r2, #32
 80040a2:	d818      	bhi.n	80040d6 <__hexnan+0x7e>
 80040a4:	9b02      	ldr	r3, [sp, #8]
 80040a6:	459b      	cmp	fp, r3
 80040a8:	dd13      	ble.n	80040d2 <__hexnan+0x7a>
 80040aa:	454c      	cmp	r4, r9
 80040ac:	d206      	bcs.n	80040bc <__hexnan+0x64>
 80040ae:	2d07      	cmp	r5, #7
 80040b0:	dc04      	bgt.n	80040bc <__hexnan+0x64>
 80040b2:	462a      	mov	r2, r5
 80040b4:	4649      	mov	r1, r9
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7ff ffa8 	bl	800400c <L_shift>
 80040bc:	4544      	cmp	r4, r8
 80040be:	d950      	bls.n	8004162 <__hexnan+0x10a>
 80040c0:	2300      	movs	r3, #0
 80040c2:	f1a4 0904 	sub.w	r9, r4, #4
 80040c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80040ca:	461d      	mov	r5, r3
 80040cc:	464c      	mov	r4, r9
 80040ce:	f8cd b008 	str.w	fp, [sp, #8]
 80040d2:	9903      	ldr	r1, [sp, #12]
 80040d4:	e7d7      	b.n	8004086 <__hexnan+0x2e>
 80040d6:	2a29      	cmp	r2, #41	; 0x29
 80040d8:	d155      	bne.n	8004186 <__hexnan+0x12e>
 80040da:	3102      	adds	r1, #2
 80040dc:	f8ca 1000 	str.w	r1, [sl]
 80040e0:	f1bb 0f00 	cmp.w	fp, #0
 80040e4:	d04f      	beq.n	8004186 <__hexnan+0x12e>
 80040e6:	454c      	cmp	r4, r9
 80040e8:	d206      	bcs.n	80040f8 <__hexnan+0xa0>
 80040ea:	2d07      	cmp	r5, #7
 80040ec:	dc04      	bgt.n	80040f8 <__hexnan+0xa0>
 80040ee:	462a      	mov	r2, r5
 80040f0:	4649      	mov	r1, r9
 80040f2:	4620      	mov	r0, r4
 80040f4:	f7ff ff8a 	bl	800400c <L_shift>
 80040f8:	4544      	cmp	r4, r8
 80040fa:	d934      	bls.n	8004166 <__hexnan+0x10e>
 80040fc:	4623      	mov	r3, r4
 80040fe:	f1a8 0204 	sub.w	r2, r8, #4
 8004102:	f853 1b04 	ldr.w	r1, [r3], #4
 8004106:	429f      	cmp	r7, r3
 8004108:	f842 1f04 	str.w	r1, [r2, #4]!
 800410c:	d2f9      	bcs.n	8004102 <__hexnan+0xaa>
 800410e:	1b3b      	subs	r3, r7, r4
 8004110:	f023 0303 	bic.w	r3, r3, #3
 8004114:	3304      	adds	r3, #4
 8004116:	3e03      	subs	r6, #3
 8004118:	3401      	adds	r4, #1
 800411a:	42a6      	cmp	r6, r4
 800411c:	bf38      	it	cc
 800411e:	2304      	movcc	r3, #4
 8004120:	2200      	movs	r2, #0
 8004122:	4443      	add	r3, r8
 8004124:	f843 2b04 	str.w	r2, [r3], #4
 8004128:	429f      	cmp	r7, r3
 800412a:	d2fb      	bcs.n	8004124 <__hexnan+0xcc>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b91b      	cbnz	r3, 8004138 <__hexnan+0xe0>
 8004130:	4547      	cmp	r7, r8
 8004132:	d126      	bne.n	8004182 <__hexnan+0x12a>
 8004134:	2301      	movs	r3, #1
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	2005      	movs	r0, #5
 800413a:	e025      	b.n	8004188 <__hexnan+0x130>
 800413c:	3501      	adds	r5, #1
 800413e:	2d08      	cmp	r5, #8
 8004140:	f10b 0b01 	add.w	fp, fp, #1
 8004144:	dd06      	ble.n	8004154 <__hexnan+0xfc>
 8004146:	4544      	cmp	r4, r8
 8004148:	d9c3      	bls.n	80040d2 <__hexnan+0x7a>
 800414a:	2300      	movs	r3, #0
 800414c:	2501      	movs	r5, #1
 800414e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004152:	3c04      	subs	r4, #4
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	f000 000f 	and.w	r0, r0, #15
 800415a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800415e:	6020      	str	r0, [r4, #0]
 8004160:	e7b7      	b.n	80040d2 <__hexnan+0x7a>
 8004162:	2508      	movs	r5, #8
 8004164:	e7b5      	b.n	80040d2 <__hexnan+0x7a>
 8004166:	9b01      	ldr	r3, [sp, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0df      	beq.n	800412c <__hexnan+0xd4>
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
 8004170:	f1c3 0320 	rsb	r3, r3, #32
 8004174:	40da      	lsrs	r2, r3
 8004176:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800417a:	4013      	ands	r3, r2
 800417c:	f846 3c04 	str.w	r3, [r6, #-4]
 8004180:	e7d4      	b.n	800412c <__hexnan+0xd4>
 8004182:	3f04      	subs	r7, #4
 8004184:	e7d2      	b.n	800412c <__hexnan+0xd4>
 8004186:	2004      	movs	r0, #4
 8004188:	b007      	add	sp, #28
 800418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800418e <__ascii_mbtowc>:
 800418e:	b082      	sub	sp, #8
 8004190:	b901      	cbnz	r1, 8004194 <__ascii_mbtowc+0x6>
 8004192:	a901      	add	r1, sp, #4
 8004194:	b142      	cbz	r2, 80041a8 <__ascii_mbtowc+0x1a>
 8004196:	b14b      	cbz	r3, 80041ac <__ascii_mbtowc+0x1e>
 8004198:	7813      	ldrb	r3, [r2, #0]
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	1e10      	subs	r0, r2, #0
 80041a0:	bf18      	it	ne
 80041a2:	2001      	movne	r0, #1
 80041a4:	b002      	add	sp, #8
 80041a6:	4770      	bx	lr
 80041a8:	4610      	mov	r0, r2
 80041aa:	e7fb      	b.n	80041a4 <__ascii_mbtowc+0x16>
 80041ac:	f06f 0001 	mvn.w	r0, #1
 80041b0:	e7f8      	b.n	80041a4 <__ascii_mbtowc+0x16>
	...

080041b4 <_Balloc>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	69c6      	ldr	r6, [r0, #28]
 80041b8:	4604      	mov	r4, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	b976      	cbnz	r6, 80041dc <_Balloc+0x28>
 80041be:	2010      	movs	r0, #16
 80041c0:	f000 fd02 	bl	8004bc8 <malloc>
 80041c4:	4602      	mov	r2, r0
 80041c6:	61e0      	str	r0, [r4, #28]
 80041c8:	b920      	cbnz	r0, 80041d4 <_Balloc+0x20>
 80041ca:	216b      	movs	r1, #107	; 0x6b
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <_Balloc+0x78>)
 80041ce:	4818      	ldr	r0, [pc, #96]	; (8004230 <_Balloc+0x7c>)
 80041d0:	f000 fcc8 	bl	8004b64 <__assert_func>
 80041d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80041d8:	6006      	str	r6, [r0, #0]
 80041da:	60c6      	str	r6, [r0, #12]
 80041dc:	69e6      	ldr	r6, [r4, #28]
 80041de:	68f3      	ldr	r3, [r6, #12]
 80041e0:	b183      	cbz	r3, 8004204 <_Balloc+0x50>
 80041e2:	69e3      	ldr	r3, [r4, #28]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80041ea:	b9b8      	cbnz	r0, 800421c <_Balloc+0x68>
 80041ec:	2101      	movs	r1, #1
 80041ee:	fa01 f605 	lsl.w	r6, r1, r5
 80041f2:	1d72      	adds	r2, r6, #5
 80041f4:	4620      	mov	r0, r4
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	f000 fcd2 	bl	8004ba0 <_calloc_r>
 80041fc:	b160      	cbz	r0, 8004218 <_Balloc+0x64>
 80041fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004202:	e00e      	b.n	8004222 <_Balloc+0x6e>
 8004204:	2221      	movs	r2, #33	; 0x21
 8004206:	2104      	movs	r1, #4
 8004208:	4620      	mov	r0, r4
 800420a:	f000 fcc9 	bl	8004ba0 <_calloc_r>
 800420e:	69e3      	ldr	r3, [r4, #28]
 8004210:	60f0      	str	r0, [r6, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e4      	bne.n	80041e2 <_Balloc+0x2e>
 8004218:	2000      	movs	r0, #0
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	6802      	ldr	r2, [r0, #0]
 800421e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004222:	2300      	movs	r3, #0
 8004224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004228:	e7f7      	b.n	800421a <_Balloc+0x66>
 800422a:	bf00      	nop
 800422c:	080053d5 	.word	0x080053d5
 8004230:	080053ec 	.word	0x080053ec

08004234 <_Bfree>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	69c6      	ldr	r6, [r0, #28]
 8004238:	4605      	mov	r5, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b976      	cbnz	r6, 800425c <_Bfree+0x28>
 800423e:	2010      	movs	r0, #16
 8004240:	f000 fcc2 	bl	8004bc8 <malloc>
 8004244:	4602      	mov	r2, r0
 8004246:	61e8      	str	r0, [r5, #28]
 8004248:	b920      	cbnz	r0, 8004254 <_Bfree+0x20>
 800424a:	218f      	movs	r1, #143	; 0x8f
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <_Bfree+0x3c>)
 800424e:	4809      	ldr	r0, [pc, #36]	; (8004274 <_Bfree+0x40>)
 8004250:	f000 fc88 	bl	8004b64 <__assert_func>
 8004254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004258:	6006      	str	r6, [r0, #0]
 800425a:	60c6      	str	r6, [r0, #12]
 800425c:	b13c      	cbz	r4, 800426e <_Bfree+0x3a>
 800425e:	69eb      	ldr	r3, [r5, #28]
 8004260:	6862      	ldr	r2, [r4, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004268:	6021      	str	r1, [r4, #0]
 800426a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	080053d5 	.word	0x080053d5
 8004274:	080053ec 	.word	0x080053ec

08004278 <__multadd>:
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	4607      	mov	r7, r0
 800427e:	460c      	mov	r4, r1
 8004280:	461e      	mov	r6, r3
 8004282:	2000      	movs	r0, #0
 8004284:	690d      	ldr	r5, [r1, #16]
 8004286:	f101 0c14 	add.w	ip, r1, #20
 800428a:	f8dc 3000 	ldr.w	r3, [ip]
 800428e:	3001      	adds	r0, #1
 8004290:	b299      	uxth	r1, r3
 8004292:	fb02 6101 	mla	r1, r2, r1, r6
 8004296:	0c1e      	lsrs	r6, r3, #16
 8004298:	0c0b      	lsrs	r3, r1, #16
 800429a:	fb02 3306 	mla	r3, r2, r6, r3
 800429e:	b289      	uxth	r1, r1
 80042a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80042a4:	4285      	cmp	r5, r0
 80042a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80042aa:	f84c 1b04 	str.w	r1, [ip], #4
 80042ae:	dcec      	bgt.n	800428a <__multadd+0x12>
 80042b0:	b30e      	cbz	r6, 80042f6 <__multadd+0x7e>
 80042b2:	68a3      	ldr	r3, [r4, #8]
 80042b4:	42ab      	cmp	r3, r5
 80042b6:	dc19      	bgt.n	80042ec <__multadd+0x74>
 80042b8:	6861      	ldr	r1, [r4, #4]
 80042ba:	4638      	mov	r0, r7
 80042bc:	3101      	adds	r1, #1
 80042be:	f7ff ff79 	bl	80041b4 <_Balloc>
 80042c2:	4680      	mov	r8, r0
 80042c4:	b928      	cbnz	r0, 80042d2 <__multadd+0x5a>
 80042c6:	4602      	mov	r2, r0
 80042c8:	21ba      	movs	r1, #186	; 0xba
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <__multadd+0x84>)
 80042cc:	480c      	ldr	r0, [pc, #48]	; (8004300 <__multadd+0x88>)
 80042ce:	f000 fc49 	bl	8004b64 <__assert_func>
 80042d2:	6922      	ldr	r2, [r4, #16]
 80042d4:	f104 010c 	add.w	r1, r4, #12
 80042d8:	3202      	adds	r2, #2
 80042da:	0092      	lsls	r2, r2, #2
 80042dc:	300c      	adds	r0, #12
 80042de:	f7ff fbe9 	bl	8003ab4 <memcpy>
 80042e2:	4621      	mov	r1, r4
 80042e4:	4638      	mov	r0, r7
 80042e6:	f7ff ffa5 	bl	8004234 <_Bfree>
 80042ea:	4644      	mov	r4, r8
 80042ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80042f0:	3501      	adds	r5, #1
 80042f2:	615e      	str	r6, [r3, #20]
 80042f4:	6125      	str	r5, [r4, #16]
 80042f6:	4620      	mov	r0, r4
 80042f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042fc:	08005364 	.word	0x08005364
 8004300:	080053ec 	.word	0x080053ec

08004304 <__s2b>:
 8004304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004308:	4615      	mov	r5, r2
 800430a:	2209      	movs	r2, #9
 800430c:	461f      	mov	r7, r3
 800430e:	3308      	adds	r3, #8
 8004310:	460c      	mov	r4, r1
 8004312:	fb93 f3f2 	sdiv	r3, r3, r2
 8004316:	4606      	mov	r6, r0
 8004318:	2201      	movs	r2, #1
 800431a:	2100      	movs	r1, #0
 800431c:	429a      	cmp	r2, r3
 800431e:	db09      	blt.n	8004334 <__s2b+0x30>
 8004320:	4630      	mov	r0, r6
 8004322:	f7ff ff47 	bl	80041b4 <_Balloc>
 8004326:	b940      	cbnz	r0, 800433a <__s2b+0x36>
 8004328:	4602      	mov	r2, r0
 800432a:	21d3      	movs	r1, #211	; 0xd3
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <__s2b+0x8c>)
 800432e:	4819      	ldr	r0, [pc, #100]	; (8004394 <__s2b+0x90>)
 8004330:	f000 fc18 	bl	8004b64 <__assert_func>
 8004334:	0052      	lsls	r2, r2, #1
 8004336:	3101      	adds	r1, #1
 8004338:	e7f0      	b.n	800431c <__s2b+0x18>
 800433a:	9b08      	ldr	r3, [sp, #32]
 800433c:	2d09      	cmp	r5, #9
 800433e:	6143      	str	r3, [r0, #20]
 8004340:	f04f 0301 	mov.w	r3, #1
 8004344:	6103      	str	r3, [r0, #16]
 8004346:	dd16      	ble.n	8004376 <__s2b+0x72>
 8004348:	f104 0909 	add.w	r9, r4, #9
 800434c:	46c8      	mov	r8, r9
 800434e:	442c      	add	r4, r5
 8004350:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004354:	4601      	mov	r1, r0
 8004356:	220a      	movs	r2, #10
 8004358:	4630      	mov	r0, r6
 800435a:	3b30      	subs	r3, #48	; 0x30
 800435c:	f7ff ff8c 	bl	8004278 <__multadd>
 8004360:	45a0      	cmp	r8, r4
 8004362:	d1f5      	bne.n	8004350 <__s2b+0x4c>
 8004364:	f1a5 0408 	sub.w	r4, r5, #8
 8004368:	444c      	add	r4, r9
 800436a:	1b2d      	subs	r5, r5, r4
 800436c:	1963      	adds	r3, r4, r5
 800436e:	42bb      	cmp	r3, r7
 8004370:	db04      	blt.n	800437c <__s2b+0x78>
 8004372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004376:	2509      	movs	r5, #9
 8004378:	340a      	adds	r4, #10
 800437a:	e7f6      	b.n	800436a <__s2b+0x66>
 800437c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004380:	4601      	mov	r1, r0
 8004382:	220a      	movs	r2, #10
 8004384:	4630      	mov	r0, r6
 8004386:	3b30      	subs	r3, #48	; 0x30
 8004388:	f7ff ff76 	bl	8004278 <__multadd>
 800438c:	e7ee      	b.n	800436c <__s2b+0x68>
 800438e:	bf00      	nop
 8004390:	08005364 	.word	0x08005364
 8004394:	080053ec 	.word	0x080053ec

08004398 <__hi0bits>:
 8004398:	0c02      	lsrs	r2, r0, #16
 800439a:	0412      	lsls	r2, r2, #16
 800439c:	4603      	mov	r3, r0
 800439e:	b9ca      	cbnz	r2, 80043d4 <__hi0bits+0x3c>
 80043a0:	0403      	lsls	r3, r0, #16
 80043a2:	2010      	movs	r0, #16
 80043a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80043a8:	bf04      	itt	eq
 80043aa:	021b      	lsleq	r3, r3, #8
 80043ac:	3008      	addeq	r0, #8
 80043ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80043b2:	bf04      	itt	eq
 80043b4:	011b      	lsleq	r3, r3, #4
 80043b6:	3004      	addeq	r0, #4
 80043b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80043bc:	bf04      	itt	eq
 80043be:	009b      	lsleq	r3, r3, #2
 80043c0:	3002      	addeq	r0, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	db05      	blt.n	80043d2 <__hi0bits+0x3a>
 80043c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80043ca:	f100 0001 	add.w	r0, r0, #1
 80043ce:	bf08      	it	eq
 80043d0:	2020      	moveq	r0, #32
 80043d2:	4770      	bx	lr
 80043d4:	2000      	movs	r0, #0
 80043d6:	e7e5      	b.n	80043a4 <__hi0bits+0xc>

080043d8 <__lo0bits>:
 80043d8:	6803      	ldr	r3, [r0, #0]
 80043da:	4602      	mov	r2, r0
 80043dc:	f013 0007 	ands.w	r0, r3, #7
 80043e0:	d00b      	beq.n	80043fa <__lo0bits+0x22>
 80043e2:	07d9      	lsls	r1, r3, #31
 80043e4:	d421      	bmi.n	800442a <__lo0bits+0x52>
 80043e6:	0798      	lsls	r0, r3, #30
 80043e8:	bf49      	itett	mi
 80043ea:	085b      	lsrmi	r3, r3, #1
 80043ec:	089b      	lsrpl	r3, r3, #2
 80043ee:	2001      	movmi	r0, #1
 80043f0:	6013      	strmi	r3, [r2, #0]
 80043f2:	bf5c      	itt	pl
 80043f4:	2002      	movpl	r0, #2
 80043f6:	6013      	strpl	r3, [r2, #0]
 80043f8:	4770      	bx	lr
 80043fa:	b299      	uxth	r1, r3
 80043fc:	b909      	cbnz	r1, 8004402 <__lo0bits+0x2a>
 80043fe:	2010      	movs	r0, #16
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	b2d9      	uxtb	r1, r3
 8004404:	b909      	cbnz	r1, 800440a <__lo0bits+0x32>
 8004406:	3008      	adds	r0, #8
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	0719      	lsls	r1, r3, #28
 800440c:	bf04      	itt	eq
 800440e:	091b      	lsreq	r3, r3, #4
 8004410:	3004      	addeq	r0, #4
 8004412:	0799      	lsls	r1, r3, #30
 8004414:	bf04      	itt	eq
 8004416:	089b      	lsreq	r3, r3, #2
 8004418:	3002      	addeq	r0, #2
 800441a:	07d9      	lsls	r1, r3, #31
 800441c:	d403      	bmi.n	8004426 <__lo0bits+0x4e>
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	f100 0001 	add.w	r0, r0, #1
 8004424:	d003      	beq.n	800442e <__lo0bits+0x56>
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4770      	bx	lr
 800442a:	2000      	movs	r0, #0
 800442c:	4770      	bx	lr
 800442e:	2020      	movs	r0, #32
 8004430:	4770      	bx	lr
	...

08004434 <__i2b>:
 8004434:	b510      	push	{r4, lr}
 8004436:	460c      	mov	r4, r1
 8004438:	2101      	movs	r1, #1
 800443a:	f7ff febb 	bl	80041b4 <_Balloc>
 800443e:	4602      	mov	r2, r0
 8004440:	b928      	cbnz	r0, 800444e <__i2b+0x1a>
 8004442:	f240 1145 	movw	r1, #325	; 0x145
 8004446:	4b04      	ldr	r3, [pc, #16]	; (8004458 <__i2b+0x24>)
 8004448:	4804      	ldr	r0, [pc, #16]	; (800445c <__i2b+0x28>)
 800444a:	f000 fb8b 	bl	8004b64 <__assert_func>
 800444e:	2301      	movs	r3, #1
 8004450:	6144      	str	r4, [r0, #20]
 8004452:	6103      	str	r3, [r0, #16]
 8004454:	bd10      	pop	{r4, pc}
 8004456:	bf00      	nop
 8004458:	08005364 	.word	0x08005364
 800445c:	080053ec 	.word	0x080053ec

08004460 <__multiply>:
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	4691      	mov	r9, r2
 8004466:	690a      	ldr	r2, [r1, #16]
 8004468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800446c:	460c      	mov	r4, r1
 800446e:	429a      	cmp	r2, r3
 8004470:	bfbe      	ittt	lt
 8004472:	460b      	movlt	r3, r1
 8004474:	464c      	movlt	r4, r9
 8004476:	4699      	movlt	r9, r3
 8004478:	6927      	ldr	r7, [r4, #16]
 800447a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800447e:	68a3      	ldr	r3, [r4, #8]
 8004480:	6861      	ldr	r1, [r4, #4]
 8004482:	eb07 060a 	add.w	r6, r7, sl
 8004486:	42b3      	cmp	r3, r6
 8004488:	b085      	sub	sp, #20
 800448a:	bfb8      	it	lt
 800448c:	3101      	addlt	r1, #1
 800448e:	f7ff fe91 	bl	80041b4 <_Balloc>
 8004492:	b930      	cbnz	r0, 80044a2 <__multiply+0x42>
 8004494:	4602      	mov	r2, r0
 8004496:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800449a:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <__multiply+0x148>)
 800449c:	4843      	ldr	r0, [pc, #268]	; (80045ac <__multiply+0x14c>)
 800449e:	f000 fb61 	bl	8004b64 <__assert_func>
 80044a2:	f100 0514 	add.w	r5, r0, #20
 80044a6:	462b      	mov	r3, r5
 80044a8:	2200      	movs	r2, #0
 80044aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80044ae:	4543      	cmp	r3, r8
 80044b0:	d321      	bcc.n	80044f6 <__multiply+0x96>
 80044b2:	f104 0314 	add.w	r3, r4, #20
 80044b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80044ba:	f109 0314 	add.w	r3, r9, #20
 80044be:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80044c2:	9202      	str	r2, [sp, #8]
 80044c4:	1b3a      	subs	r2, r7, r4
 80044c6:	3a15      	subs	r2, #21
 80044c8:	f022 0203 	bic.w	r2, r2, #3
 80044cc:	3204      	adds	r2, #4
 80044ce:	f104 0115 	add.w	r1, r4, #21
 80044d2:	428f      	cmp	r7, r1
 80044d4:	bf38      	it	cc
 80044d6:	2204      	movcc	r2, #4
 80044d8:	9201      	str	r2, [sp, #4]
 80044da:	9a02      	ldr	r2, [sp, #8]
 80044dc:	9303      	str	r3, [sp, #12]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d80c      	bhi.n	80044fc <__multiply+0x9c>
 80044e2:	2e00      	cmp	r6, #0
 80044e4:	dd03      	ble.n	80044ee <__multiply+0x8e>
 80044e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d05a      	beq.n	80045a4 <__multiply+0x144>
 80044ee:	6106      	str	r6, [r0, #16]
 80044f0:	b005      	add	sp, #20
 80044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f6:	f843 2b04 	str.w	r2, [r3], #4
 80044fa:	e7d8      	b.n	80044ae <__multiply+0x4e>
 80044fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8004500:	f1ba 0f00 	cmp.w	sl, #0
 8004504:	d023      	beq.n	800454e <__multiply+0xee>
 8004506:	46a9      	mov	r9, r5
 8004508:	f04f 0c00 	mov.w	ip, #0
 800450c:	f104 0e14 	add.w	lr, r4, #20
 8004510:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004514:	f8d9 1000 	ldr.w	r1, [r9]
 8004518:	fa1f fb82 	uxth.w	fp, r2
 800451c:	b289      	uxth	r1, r1
 800451e:	fb0a 110b 	mla	r1, sl, fp, r1
 8004522:	4461      	add	r1, ip
 8004524:	f8d9 c000 	ldr.w	ip, [r9]
 8004528:	0c12      	lsrs	r2, r2, #16
 800452a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800452e:	fb0a c202 	mla	r2, sl, r2, ip
 8004532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004536:	b289      	uxth	r1, r1
 8004538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800453c:	4577      	cmp	r7, lr
 800453e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004542:	f849 1b04 	str.w	r1, [r9], #4
 8004546:	d8e3      	bhi.n	8004510 <__multiply+0xb0>
 8004548:	9a01      	ldr	r2, [sp, #4]
 800454a:	f845 c002 	str.w	ip, [r5, r2]
 800454e:	9a03      	ldr	r2, [sp, #12]
 8004550:	3304      	adds	r3, #4
 8004552:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004556:	f1b9 0f00 	cmp.w	r9, #0
 800455a:	d021      	beq.n	80045a0 <__multiply+0x140>
 800455c:	46ae      	mov	lr, r5
 800455e:	f04f 0a00 	mov.w	sl, #0
 8004562:	6829      	ldr	r1, [r5, #0]
 8004564:	f104 0c14 	add.w	ip, r4, #20
 8004568:	f8bc b000 	ldrh.w	fp, [ip]
 800456c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004570:	b289      	uxth	r1, r1
 8004572:	fb09 220b 	mla	r2, r9, fp, r2
 8004576:	4452      	add	r2, sl
 8004578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800457c:	f84e 1b04 	str.w	r1, [lr], #4
 8004580:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004584:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004588:	f8be 1000 	ldrh.w	r1, [lr]
 800458c:	4567      	cmp	r7, ip
 800458e:	fb09 110a 	mla	r1, r9, sl, r1
 8004592:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004596:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800459a:	d8e5      	bhi.n	8004568 <__multiply+0x108>
 800459c:	9a01      	ldr	r2, [sp, #4]
 800459e:	50a9      	str	r1, [r5, r2]
 80045a0:	3504      	adds	r5, #4
 80045a2:	e79a      	b.n	80044da <__multiply+0x7a>
 80045a4:	3e01      	subs	r6, #1
 80045a6:	e79c      	b.n	80044e2 <__multiply+0x82>
 80045a8:	08005364 	.word	0x08005364
 80045ac:	080053ec 	.word	0x080053ec

080045b0 <__pow5mult>:
 80045b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b4:	4615      	mov	r5, r2
 80045b6:	f012 0203 	ands.w	r2, r2, #3
 80045ba:	4606      	mov	r6, r0
 80045bc:	460f      	mov	r7, r1
 80045be:	d007      	beq.n	80045d0 <__pow5mult+0x20>
 80045c0:	4c25      	ldr	r4, [pc, #148]	; (8004658 <__pow5mult+0xa8>)
 80045c2:	3a01      	subs	r2, #1
 80045c4:	2300      	movs	r3, #0
 80045c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80045ca:	f7ff fe55 	bl	8004278 <__multadd>
 80045ce:	4607      	mov	r7, r0
 80045d0:	10ad      	asrs	r5, r5, #2
 80045d2:	d03d      	beq.n	8004650 <__pow5mult+0xa0>
 80045d4:	69f4      	ldr	r4, [r6, #28]
 80045d6:	b97c      	cbnz	r4, 80045f8 <__pow5mult+0x48>
 80045d8:	2010      	movs	r0, #16
 80045da:	f000 faf5 	bl	8004bc8 <malloc>
 80045de:	4602      	mov	r2, r0
 80045e0:	61f0      	str	r0, [r6, #28]
 80045e2:	b928      	cbnz	r0, 80045f0 <__pow5mult+0x40>
 80045e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80045e8:	4b1c      	ldr	r3, [pc, #112]	; (800465c <__pow5mult+0xac>)
 80045ea:	481d      	ldr	r0, [pc, #116]	; (8004660 <__pow5mult+0xb0>)
 80045ec:	f000 faba 	bl	8004b64 <__assert_func>
 80045f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045f4:	6004      	str	r4, [r0, #0]
 80045f6:	60c4      	str	r4, [r0, #12]
 80045f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80045fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004600:	b94c      	cbnz	r4, 8004616 <__pow5mult+0x66>
 8004602:	f240 2171 	movw	r1, #625	; 0x271
 8004606:	4630      	mov	r0, r6
 8004608:	f7ff ff14 	bl	8004434 <__i2b>
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	f8c8 0008 	str.w	r0, [r8, #8]
 8004614:	6003      	str	r3, [r0, #0]
 8004616:	f04f 0900 	mov.w	r9, #0
 800461a:	07eb      	lsls	r3, r5, #31
 800461c:	d50a      	bpl.n	8004634 <__pow5mult+0x84>
 800461e:	4639      	mov	r1, r7
 8004620:	4622      	mov	r2, r4
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff ff1c 	bl	8004460 <__multiply>
 8004628:	4680      	mov	r8, r0
 800462a:	4639      	mov	r1, r7
 800462c:	4630      	mov	r0, r6
 800462e:	f7ff fe01 	bl	8004234 <_Bfree>
 8004632:	4647      	mov	r7, r8
 8004634:	106d      	asrs	r5, r5, #1
 8004636:	d00b      	beq.n	8004650 <__pow5mult+0xa0>
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	b938      	cbnz	r0, 800464c <__pow5mult+0x9c>
 800463c:	4622      	mov	r2, r4
 800463e:	4621      	mov	r1, r4
 8004640:	4630      	mov	r0, r6
 8004642:	f7ff ff0d 	bl	8004460 <__multiply>
 8004646:	6020      	str	r0, [r4, #0]
 8004648:	f8c0 9000 	str.w	r9, [r0]
 800464c:	4604      	mov	r4, r0
 800464e:	e7e4      	b.n	800461a <__pow5mult+0x6a>
 8004650:	4638      	mov	r0, r7
 8004652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004656:	bf00      	nop
 8004658:	08005538 	.word	0x08005538
 800465c:	080053d5 	.word	0x080053d5
 8004660:	080053ec 	.word	0x080053ec

08004664 <__lshift>:
 8004664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004668:	460c      	mov	r4, r1
 800466a:	4607      	mov	r7, r0
 800466c:	4691      	mov	r9, r2
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	6849      	ldr	r1, [r1, #4]
 8004672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004676:	68a3      	ldr	r3, [r4, #8]
 8004678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800467c:	f108 0601 	add.w	r6, r8, #1
 8004680:	42b3      	cmp	r3, r6
 8004682:	db0b      	blt.n	800469c <__lshift+0x38>
 8004684:	4638      	mov	r0, r7
 8004686:	f7ff fd95 	bl	80041b4 <_Balloc>
 800468a:	4605      	mov	r5, r0
 800468c:	b948      	cbnz	r0, 80046a2 <__lshift+0x3e>
 800468e:	4602      	mov	r2, r0
 8004690:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004694:	4b27      	ldr	r3, [pc, #156]	; (8004734 <__lshift+0xd0>)
 8004696:	4828      	ldr	r0, [pc, #160]	; (8004738 <__lshift+0xd4>)
 8004698:	f000 fa64 	bl	8004b64 <__assert_func>
 800469c:	3101      	adds	r1, #1
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	e7ee      	b.n	8004680 <__lshift+0x1c>
 80046a2:	2300      	movs	r3, #0
 80046a4:	f100 0114 	add.w	r1, r0, #20
 80046a8:	f100 0210 	add.w	r2, r0, #16
 80046ac:	4618      	mov	r0, r3
 80046ae:	4553      	cmp	r3, sl
 80046b0:	db33      	blt.n	800471a <__lshift+0xb6>
 80046b2:	6920      	ldr	r0, [r4, #16]
 80046b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80046b8:	f104 0314 	add.w	r3, r4, #20
 80046bc:	f019 091f 	ands.w	r9, r9, #31
 80046c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80046c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80046c8:	d02b      	beq.n	8004722 <__lshift+0xbe>
 80046ca:	468a      	mov	sl, r1
 80046cc:	2200      	movs	r2, #0
 80046ce:	f1c9 0e20 	rsb	lr, r9, #32
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	fa00 f009 	lsl.w	r0, r0, r9
 80046d8:	4310      	orrs	r0, r2
 80046da:	f84a 0b04 	str.w	r0, [sl], #4
 80046de:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e2:	459c      	cmp	ip, r3
 80046e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80046e8:	d8f3      	bhi.n	80046d2 <__lshift+0x6e>
 80046ea:	ebac 0304 	sub.w	r3, ip, r4
 80046ee:	3b15      	subs	r3, #21
 80046f0:	f023 0303 	bic.w	r3, r3, #3
 80046f4:	3304      	adds	r3, #4
 80046f6:	f104 0015 	add.w	r0, r4, #21
 80046fa:	4584      	cmp	ip, r0
 80046fc:	bf38      	it	cc
 80046fe:	2304      	movcc	r3, #4
 8004700:	50ca      	str	r2, [r1, r3]
 8004702:	b10a      	cbz	r2, 8004708 <__lshift+0xa4>
 8004704:	f108 0602 	add.w	r6, r8, #2
 8004708:	3e01      	subs	r6, #1
 800470a:	4638      	mov	r0, r7
 800470c:	4621      	mov	r1, r4
 800470e:	612e      	str	r6, [r5, #16]
 8004710:	f7ff fd90 	bl	8004234 <_Bfree>
 8004714:	4628      	mov	r0, r5
 8004716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471a:	f842 0f04 	str.w	r0, [r2, #4]!
 800471e:	3301      	adds	r3, #1
 8004720:	e7c5      	b.n	80046ae <__lshift+0x4a>
 8004722:	3904      	subs	r1, #4
 8004724:	f853 2b04 	ldr.w	r2, [r3], #4
 8004728:	459c      	cmp	ip, r3
 800472a:	f841 2f04 	str.w	r2, [r1, #4]!
 800472e:	d8f9      	bhi.n	8004724 <__lshift+0xc0>
 8004730:	e7ea      	b.n	8004708 <__lshift+0xa4>
 8004732:	bf00      	nop
 8004734:	08005364 	.word	0x08005364
 8004738:	080053ec 	.word	0x080053ec

0800473c <__mcmp>:
 800473c:	4603      	mov	r3, r0
 800473e:	690a      	ldr	r2, [r1, #16]
 8004740:	6900      	ldr	r0, [r0, #16]
 8004742:	b530      	push	{r4, r5, lr}
 8004744:	1a80      	subs	r0, r0, r2
 8004746:	d10d      	bne.n	8004764 <__mcmp+0x28>
 8004748:	3314      	adds	r3, #20
 800474a:	3114      	adds	r1, #20
 800474c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004750:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800475c:	4295      	cmp	r5, r2
 800475e:	d002      	beq.n	8004766 <__mcmp+0x2a>
 8004760:	d304      	bcc.n	800476c <__mcmp+0x30>
 8004762:	2001      	movs	r0, #1
 8004764:	bd30      	pop	{r4, r5, pc}
 8004766:	42a3      	cmp	r3, r4
 8004768:	d3f4      	bcc.n	8004754 <__mcmp+0x18>
 800476a:	e7fb      	b.n	8004764 <__mcmp+0x28>
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	e7f8      	b.n	8004764 <__mcmp+0x28>
	...

08004774 <__mdiff>:
 8004774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004778:	460d      	mov	r5, r1
 800477a:	4607      	mov	r7, r0
 800477c:	4611      	mov	r1, r2
 800477e:	4628      	mov	r0, r5
 8004780:	4614      	mov	r4, r2
 8004782:	f7ff ffdb 	bl	800473c <__mcmp>
 8004786:	1e06      	subs	r6, r0, #0
 8004788:	d111      	bne.n	80047ae <__mdiff+0x3a>
 800478a:	4631      	mov	r1, r6
 800478c:	4638      	mov	r0, r7
 800478e:	f7ff fd11 	bl	80041b4 <_Balloc>
 8004792:	4602      	mov	r2, r0
 8004794:	b928      	cbnz	r0, 80047a2 <__mdiff+0x2e>
 8004796:	f240 2137 	movw	r1, #567	; 0x237
 800479a:	4b3a      	ldr	r3, [pc, #232]	; (8004884 <__mdiff+0x110>)
 800479c:	483a      	ldr	r0, [pc, #232]	; (8004888 <__mdiff+0x114>)
 800479e:	f000 f9e1 	bl	8004b64 <__assert_func>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80047a8:	4610      	mov	r0, r2
 80047aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ae:	bfa4      	itt	ge
 80047b0:	4623      	movge	r3, r4
 80047b2:	462c      	movge	r4, r5
 80047b4:	4638      	mov	r0, r7
 80047b6:	6861      	ldr	r1, [r4, #4]
 80047b8:	bfa6      	itte	ge
 80047ba:	461d      	movge	r5, r3
 80047bc:	2600      	movge	r6, #0
 80047be:	2601      	movlt	r6, #1
 80047c0:	f7ff fcf8 	bl	80041b4 <_Balloc>
 80047c4:	4602      	mov	r2, r0
 80047c6:	b918      	cbnz	r0, 80047d0 <__mdiff+0x5c>
 80047c8:	f240 2145 	movw	r1, #581	; 0x245
 80047cc:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <__mdiff+0x110>)
 80047ce:	e7e5      	b.n	800479c <__mdiff+0x28>
 80047d0:	f102 0814 	add.w	r8, r2, #20
 80047d4:	46c2      	mov	sl, r8
 80047d6:	f04f 0c00 	mov.w	ip, #0
 80047da:	6927      	ldr	r7, [r4, #16]
 80047dc:	60c6      	str	r6, [r0, #12]
 80047de:	692e      	ldr	r6, [r5, #16]
 80047e0:	f104 0014 	add.w	r0, r4, #20
 80047e4:	f105 0914 	add.w	r9, r5, #20
 80047e8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80047ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80047f0:	3410      	adds	r4, #16
 80047f2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80047f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80047fa:	fa1f f18b 	uxth.w	r1, fp
 80047fe:	4461      	add	r1, ip
 8004800:	fa1f fc83 	uxth.w	ip, r3
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	eba1 010c 	sub.w	r1, r1, ip
 800480a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800480e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004812:	b289      	uxth	r1, r1
 8004814:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004818:	454e      	cmp	r6, r9
 800481a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800481e:	f84a 1b04 	str.w	r1, [sl], #4
 8004822:	d8e6      	bhi.n	80047f2 <__mdiff+0x7e>
 8004824:	1b73      	subs	r3, r6, r5
 8004826:	3b15      	subs	r3, #21
 8004828:	f023 0303 	bic.w	r3, r3, #3
 800482c:	3515      	adds	r5, #21
 800482e:	3304      	adds	r3, #4
 8004830:	42ae      	cmp	r6, r5
 8004832:	bf38      	it	cc
 8004834:	2304      	movcc	r3, #4
 8004836:	4418      	add	r0, r3
 8004838:	4443      	add	r3, r8
 800483a:	461e      	mov	r6, r3
 800483c:	4605      	mov	r5, r0
 800483e:	4575      	cmp	r5, lr
 8004840:	d30e      	bcc.n	8004860 <__mdiff+0xec>
 8004842:	f10e 0103 	add.w	r1, lr, #3
 8004846:	1a09      	subs	r1, r1, r0
 8004848:	f021 0103 	bic.w	r1, r1, #3
 800484c:	3803      	subs	r0, #3
 800484e:	4586      	cmp	lr, r0
 8004850:	bf38      	it	cc
 8004852:	2100      	movcc	r1, #0
 8004854:	440b      	add	r3, r1
 8004856:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800485a:	b189      	cbz	r1, 8004880 <__mdiff+0x10c>
 800485c:	6117      	str	r7, [r2, #16]
 800485e:	e7a3      	b.n	80047a8 <__mdiff+0x34>
 8004860:	f855 8b04 	ldr.w	r8, [r5], #4
 8004864:	fa1f f188 	uxth.w	r1, r8
 8004868:	4461      	add	r1, ip
 800486a:	140c      	asrs	r4, r1, #16
 800486c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004870:	b289      	uxth	r1, r1
 8004872:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004876:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800487a:	f846 1b04 	str.w	r1, [r6], #4
 800487e:	e7de      	b.n	800483e <__mdiff+0xca>
 8004880:	3f01      	subs	r7, #1
 8004882:	e7e8      	b.n	8004856 <__mdiff+0xe2>
 8004884:	08005364 	.word	0x08005364
 8004888:	080053ec 	.word	0x080053ec

0800488c <__ulp>:
 800488c:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <__ulp+0x3c>)
 800488e:	400b      	ands	r3, r1
 8004890:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004894:	2b00      	cmp	r3, #0
 8004896:	dc08      	bgt.n	80048aa <__ulp+0x1e>
 8004898:	425b      	negs	r3, r3
 800489a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800489e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80048a2:	da04      	bge.n	80048ae <__ulp+0x22>
 80048a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048a8:	4113      	asrs	r3, r2
 80048aa:	2200      	movs	r2, #0
 80048ac:	e008      	b.n	80048c0 <__ulp+0x34>
 80048ae:	f1a2 0314 	sub.w	r3, r2, #20
 80048b2:	2b1e      	cmp	r3, #30
 80048b4:	bfd6      	itet	le
 80048b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80048ba:	2201      	movgt	r2, #1
 80048bc:	40da      	lsrle	r2, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	7ff00000 	.word	0x7ff00000

080048cc <__b2d>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	6905      	ldr	r5, [r0, #16]
 80048d0:	f100 0714 	add.w	r7, r0, #20
 80048d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80048d8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80048dc:	1f2e      	subs	r6, r5, #4
 80048de:	4620      	mov	r0, r4
 80048e0:	f7ff fd5a 	bl	8004398 <__hi0bits>
 80048e4:	f1c0 0220 	rsb	r2, r0, #32
 80048e8:	280a      	cmp	r0, #10
 80048ea:	4603      	mov	r3, r0
 80048ec:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004958 <__b2d+0x8c>
 80048f0:	600a      	str	r2, [r1, #0]
 80048f2:	dc12      	bgt.n	800491a <__b2d+0x4e>
 80048f4:	f1c0 0e0b 	rsb	lr, r0, #11
 80048f8:	fa24 f20e 	lsr.w	r2, r4, lr
 80048fc:	42b7      	cmp	r7, r6
 80048fe:	ea42 010c 	orr.w	r1, r2, ip
 8004902:	bf2c      	ite	cs
 8004904:	2200      	movcs	r2, #0
 8004906:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800490a:	3315      	adds	r3, #21
 800490c:	fa04 f303 	lsl.w	r3, r4, r3
 8004910:	fa22 f20e 	lsr.w	r2, r2, lr
 8004914:	431a      	orrs	r2, r3
 8004916:	4610      	mov	r0, r2
 8004918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800491a:	42b7      	cmp	r7, r6
 800491c:	bf2e      	itee	cs
 800491e:	2200      	movcs	r2, #0
 8004920:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004924:	f1a5 0608 	subcc.w	r6, r5, #8
 8004928:	3b0b      	subs	r3, #11
 800492a:	d012      	beq.n	8004952 <__b2d+0x86>
 800492c:	f1c3 0520 	rsb	r5, r3, #32
 8004930:	fa22 f105 	lsr.w	r1, r2, r5
 8004934:	409c      	lsls	r4, r3
 8004936:	430c      	orrs	r4, r1
 8004938:	42be      	cmp	r6, r7
 800493a:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800493e:	bf94      	ite	ls
 8004940:	2400      	movls	r4, #0
 8004942:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8004946:	409a      	lsls	r2, r3
 8004948:	40ec      	lsrs	r4, r5
 800494a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800494e:	4322      	orrs	r2, r4
 8004950:	e7e1      	b.n	8004916 <__b2d+0x4a>
 8004952:	ea44 010c 	orr.w	r1, r4, ip
 8004956:	e7de      	b.n	8004916 <__b2d+0x4a>
 8004958:	3ff00000 	.word	0x3ff00000

0800495c <__d2b>:
 800495c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800495e:	2101      	movs	r1, #1
 8004960:	4617      	mov	r7, r2
 8004962:	461c      	mov	r4, r3
 8004964:	9e08      	ldr	r6, [sp, #32]
 8004966:	f7ff fc25 	bl	80041b4 <_Balloc>
 800496a:	4605      	mov	r5, r0
 800496c:	b930      	cbnz	r0, 800497c <__d2b+0x20>
 800496e:	4602      	mov	r2, r0
 8004970:	f240 310f 	movw	r1, #783	; 0x30f
 8004974:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <__d2b+0xa4>)
 8004976:	4823      	ldr	r0, [pc, #140]	; (8004a04 <__d2b+0xa8>)
 8004978:	f000 f8f4 	bl	8004b64 <__assert_func>
 800497c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004980:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004984:	bb24      	cbnz	r4, 80049d0 <__d2b+0x74>
 8004986:	2f00      	cmp	r7, #0
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	d026      	beq.n	80049da <__d2b+0x7e>
 800498c:	4668      	mov	r0, sp
 800498e:	9700      	str	r7, [sp, #0]
 8004990:	f7ff fd22 	bl	80043d8 <__lo0bits>
 8004994:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004998:	b1e8      	cbz	r0, 80049d6 <__d2b+0x7a>
 800499a:	f1c0 0320 	rsb	r3, r0, #32
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	430b      	orrs	r3, r1
 80049a4:	40c2      	lsrs	r2, r0
 80049a6:	616b      	str	r3, [r5, #20]
 80049a8:	9201      	str	r2, [sp, #4]
 80049aa:	9b01      	ldr	r3, [sp, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf14      	ite	ne
 80049b0:	2102      	movne	r1, #2
 80049b2:	2101      	moveq	r1, #1
 80049b4:	61ab      	str	r3, [r5, #24]
 80049b6:	6129      	str	r1, [r5, #16]
 80049b8:	b1bc      	cbz	r4, 80049ea <__d2b+0x8e>
 80049ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80049be:	4404      	add	r4, r0
 80049c0:	6034      	str	r4, [r6, #0]
 80049c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80049c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c8:	6018      	str	r0, [r3, #0]
 80049ca:	4628      	mov	r0, r5
 80049cc:	b003      	add	sp, #12
 80049ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d4:	e7d7      	b.n	8004986 <__d2b+0x2a>
 80049d6:	6169      	str	r1, [r5, #20]
 80049d8:	e7e7      	b.n	80049aa <__d2b+0x4e>
 80049da:	a801      	add	r0, sp, #4
 80049dc:	f7ff fcfc 	bl	80043d8 <__lo0bits>
 80049e0:	9b01      	ldr	r3, [sp, #4]
 80049e2:	2101      	movs	r1, #1
 80049e4:	616b      	str	r3, [r5, #20]
 80049e6:	3020      	adds	r0, #32
 80049e8:	e7e5      	b.n	80049b6 <__d2b+0x5a>
 80049ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80049ee:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80049f2:	6030      	str	r0, [r6, #0]
 80049f4:	6918      	ldr	r0, [r3, #16]
 80049f6:	f7ff fccf 	bl	8004398 <__hi0bits>
 80049fa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80049fe:	e7e2      	b.n	80049c6 <__d2b+0x6a>
 8004a00:	08005364 	.word	0x08005364
 8004a04:	080053ec 	.word	0x080053ec

08004a08 <__ratio>:
 8004a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	4688      	mov	r8, r1
 8004a0e:	4669      	mov	r1, sp
 8004a10:	4681      	mov	r9, r0
 8004a12:	f7ff ff5b 	bl	80048cc <__b2d>
 8004a16:	460f      	mov	r7, r1
 8004a18:	4604      	mov	r4, r0
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	4640      	mov	r0, r8
 8004a1e:	a901      	add	r1, sp, #4
 8004a20:	f7ff ff54 	bl	80048cc <__b2d>
 8004a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004a2c:	468b      	mov	fp, r1
 8004a2e:	eba3 0c02 	sub.w	ip, r3, r2
 8004a32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bfd5      	itete	le
 8004a40:	460a      	movle	r2, r1
 8004a42:	462a      	movgt	r2, r5
 8004a44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004a48:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004a4c:	bfd8      	it	le
 8004a4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8004a52:	465b      	mov	r3, fp
 8004a54:	4602      	mov	r2, r0
 8004a56:	4639      	mov	r1, r7
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7fb fe67 	bl	800072c <__aeabi_ddiv>
 8004a5e:	b003      	add	sp, #12
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a64 <__copybits>:
 8004a64:	3901      	subs	r1, #1
 8004a66:	b570      	push	{r4, r5, r6, lr}
 8004a68:	1149      	asrs	r1, r1, #5
 8004a6a:	6914      	ldr	r4, [r2, #16]
 8004a6c:	3101      	adds	r1, #1
 8004a6e:	f102 0314 	add.w	r3, r2, #20
 8004a72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004a76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004a7a:	1f05      	subs	r5, r0, #4
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	d30c      	bcc.n	8004a9a <__copybits+0x36>
 8004a80:	1aa3      	subs	r3, r4, r2
 8004a82:	3b11      	subs	r3, #17
 8004a84:	f023 0303 	bic.w	r3, r3, #3
 8004a88:	3211      	adds	r2, #17
 8004a8a:	42a2      	cmp	r2, r4
 8004a8c:	bf88      	it	hi
 8004a8e:	2300      	movhi	r3, #0
 8004a90:	4418      	add	r0, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	4288      	cmp	r0, r1
 8004a96:	d305      	bcc.n	8004aa4 <__copybits+0x40>
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8004a9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8004aa2:	e7eb      	b.n	8004a7c <__copybits+0x18>
 8004aa4:	f840 3b04 	str.w	r3, [r0], #4
 8004aa8:	e7f4      	b.n	8004a94 <__copybits+0x30>

08004aaa <__any_on>:
 8004aaa:	f100 0214 	add.w	r2, r0, #20
 8004aae:	6900      	ldr	r0, [r0, #16]
 8004ab0:	114b      	asrs	r3, r1, #5
 8004ab2:	4298      	cmp	r0, r3
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	db11      	blt.n	8004adc <__any_on+0x32>
 8004ab8:	dd0a      	ble.n	8004ad0 <__any_on+0x26>
 8004aba:	f011 011f 	ands.w	r1, r1, #31
 8004abe:	d007      	beq.n	8004ad0 <__any_on+0x26>
 8004ac0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004ac4:	fa24 f001 	lsr.w	r0, r4, r1
 8004ac8:	fa00 f101 	lsl.w	r1, r0, r1
 8004acc:	428c      	cmp	r4, r1
 8004ace:	d10b      	bne.n	8004ae8 <__any_on+0x3e>
 8004ad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d803      	bhi.n	8004ae0 <__any_on+0x36>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	bd10      	pop	{r4, pc}
 8004adc:	4603      	mov	r3, r0
 8004ade:	e7f7      	b.n	8004ad0 <__any_on+0x26>
 8004ae0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	d0f5      	beq.n	8004ad4 <__any_on+0x2a>
 8004ae8:	2001      	movs	r0, #1
 8004aea:	e7f6      	b.n	8004ada <__any_on+0x30>

08004aec <_realloc_r>:
 8004aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af0:	4680      	mov	r8, r0
 8004af2:	4614      	mov	r4, r2
 8004af4:	460e      	mov	r6, r1
 8004af6:	b921      	cbnz	r1, 8004b02 <_realloc_r+0x16>
 8004af8:	4611      	mov	r1, r2
 8004afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	f7fd bcd1 	b.w	80024a4 <_malloc_r>
 8004b02:	b92a      	cbnz	r2, 8004b10 <_realloc_r+0x24>
 8004b04:	f7fd fc66 	bl	80023d4 <_free_r>
 8004b08:	4625      	mov	r5, r4
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b10:	f000 f862 	bl	8004bd8 <_malloc_usable_size_r>
 8004b14:	4284      	cmp	r4, r0
 8004b16:	4607      	mov	r7, r0
 8004b18:	d802      	bhi.n	8004b20 <_realloc_r+0x34>
 8004b1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b1e:	d812      	bhi.n	8004b46 <_realloc_r+0x5a>
 8004b20:	4621      	mov	r1, r4
 8004b22:	4640      	mov	r0, r8
 8004b24:	f7fd fcbe 	bl	80024a4 <_malloc_r>
 8004b28:	4605      	mov	r5, r0
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d0ed      	beq.n	8004b0a <_realloc_r+0x1e>
 8004b2e:	42bc      	cmp	r4, r7
 8004b30:	4622      	mov	r2, r4
 8004b32:	4631      	mov	r1, r6
 8004b34:	bf28      	it	cs
 8004b36:	463a      	movcs	r2, r7
 8004b38:	f7fe ffbc 	bl	8003ab4 <memcpy>
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f7fd fc48 	bl	80023d4 <_free_r>
 8004b44:	e7e1      	b.n	8004b0a <_realloc_r+0x1e>
 8004b46:	4635      	mov	r5, r6
 8004b48:	e7df      	b.n	8004b0a <_realloc_r+0x1e>

08004b4a <__ascii_wctomb>:
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	b141      	cbz	r1, 8004b62 <__ascii_wctomb+0x18>
 8004b50:	2aff      	cmp	r2, #255	; 0xff
 8004b52:	d904      	bls.n	8004b5e <__ascii_wctomb+0x14>
 8004b54:	228a      	movs	r2, #138	; 0x8a
 8004b56:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	2001      	movs	r0, #1
 8004b60:	700a      	strb	r2, [r1, #0]
 8004b62:	4770      	bx	lr

08004b64 <__assert_func>:
 8004b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b66:	4614      	mov	r4, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <__assert_func+0x2c>)
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68d8      	ldr	r0, [r3, #12]
 8004b72:	b14c      	cbz	r4, 8004b88 <__assert_func+0x24>
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <__assert_func+0x30>)
 8004b76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b7a:	9100      	str	r1, [sp, #0]
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	4906      	ldr	r1, [pc, #24]	; (8004b98 <__assert_func+0x34>)
 8004b80:	f000 f832 	bl	8004be8 <fiprintf>
 8004b84:	f000 f842 	bl	8004c0c <abort>
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <__assert_func+0x38>)
 8004b8a:	461c      	mov	r4, r3
 8004b8c:	e7f3      	b.n	8004b76 <__assert_func+0x12>
 8004b8e:	bf00      	nop
 8004b90:	20000064 	.word	0x20000064
 8004b94:	08005544 	.word	0x08005544
 8004b98:	08005551 	.word	0x08005551
 8004b9c:	0800557f 	.word	0x0800557f

08004ba0 <_calloc_r>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	fba1 5402 	umull	r5, r4, r1, r2
 8004ba6:	b934      	cbnz	r4, 8004bb6 <_calloc_r+0x16>
 8004ba8:	4629      	mov	r1, r5
 8004baa:	f7fd fc7b 	bl	80024a4 <_malloc_r>
 8004bae:	4606      	mov	r6, r0
 8004bb0:	b928      	cbnz	r0, 8004bbe <_calloc_r+0x1e>
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
 8004bb6:	220c      	movs	r2, #12
 8004bb8:	2600      	movs	r6, #0
 8004bba:	6002      	str	r2, [r0, #0]
 8004bbc:	e7f9      	b.n	8004bb2 <_calloc_r+0x12>
 8004bbe:	462a      	mov	r2, r5
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	f7fd fb86 	bl	80022d2 <memset>
 8004bc6:	e7f4      	b.n	8004bb2 <_calloc_r+0x12>

08004bc8 <malloc>:
 8004bc8:	4b02      	ldr	r3, [pc, #8]	; (8004bd4 <malloc+0xc>)
 8004bca:	4601      	mov	r1, r0
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	f7fd bc69 	b.w	80024a4 <_malloc_r>
 8004bd2:	bf00      	nop
 8004bd4:	20000064 	.word	0x20000064

08004bd8 <_malloc_usable_size_r>:
 8004bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bdc:	1f18      	subs	r0, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bfbc      	itt	lt
 8004be2:	580b      	ldrlt	r3, [r1, r0]
 8004be4:	18c0      	addlt	r0, r0, r3
 8004be6:	4770      	bx	lr

08004be8 <fiprintf>:
 8004be8:	b40e      	push	{r1, r2, r3}
 8004bea:	b503      	push	{r0, r1, lr}
 8004bec:	4601      	mov	r1, r0
 8004bee:	ab03      	add	r3, sp, #12
 8004bf0:	4805      	ldr	r0, [pc, #20]	; (8004c08 <fiprintf+0x20>)
 8004bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf6:	6800      	ldr	r0, [r0, #0]
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	f000 f835 	bl	8004c68 <_vfiprintf_r>
 8004bfe:	b002      	add	sp, #8
 8004c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c04:	b003      	add	sp, #12
 8004c06:	4770      	bx	lr
 8004c08:	20000064 	.word	0x20000064

08004c0c <abort>:
 8004c0c:	2006      	movs	r0, #6
 8004c0e:	b508      	push	{r3, lr}
 8004c10:	f000 fa02 	bl	8005018 <raise>
 8004c14:	2001      	movs	r0, #1
 8004c16:	f7fc f9e5 	bl	8000fe4 <_exit>

08004c1a <__sfputc_r>:
 8004c1a:	6893      	ldr	r3, [r2, #8]
 8004c1c:	b410      	push	{r4}
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	6093      	str	r3, [r2, #8]
 8004c24:	da07      	bge.n	8004c36 <__sfputc_r+0x1c>
 8004c26:	6994      	ldr	r4, [r2, #24]
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	db01      	blt.n	8004c30 <__sfputc_r+0x16>
 8004c2c:	290a      	cmp	r1, #10
 8004c2e:	d102      	bne.n	8004c36 <__sfputc_r+0x1c>
 8004c30:	bc10      	pop	{r4}
 8004c32:	f000 b933 	b.w	8004e9c <__swbuf_r>
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	1c58      	adds	r0, r3, #1
 8004c3a:	6010      	str	r0, [r2, #0]
 8004c3c:	7019      	strb	r1, [r3, #0]
 8004c3e:	4608      	mov	r0, r1
 8004c40:	bc10      	pop	{r4}
 8004c42:	4770      	bx	lr

08004c44 <__sfputs_r>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	4606      	mov	r6, r0
 8004c48:	460f      	mov	r7, r1
 8004c4a:	4614      	mov	r4, r2
 8004c4c:	18d5      	adds	r5, r2, r3
 8004c4e:	42ac      	cmp	r4, r5
 8004c50:	d101      	bne.n	8004c56 <__sfputs_r+0x12>
 8004c52:	2000      	movs	r0, #0
 8004c54:	e007      	b.n	8004c66 <__sfputs_r+0x22>
 8004c56:	463a      	mov	r2, r7
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5e:	f7ff ffdc 	bl	8004c1a <__sfputc_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	d1f3      	bne.n	8004c4e <__sfputs_r+0xa>
 8004c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c68 <_vfiprintf_r>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	460d      	mov	r5, r1
 8004c6e:	4614      	mov	r4, r2
 8004c70:	4698      	mov	r8, r3
 8004c72:	4606      	mov	r6, r0
 8004c74:	b09d      	sub	sp, #116	; 0x74
 8004c76:	b118      	cbz	r0, 8004c80 <_vfiprintf_r+0x18>
 8004c78:	6a03      	ldr	r3, [r0, #32]
 8004c7a:	b90b      	cbnz	r3, 8004c80 <_vfiprintf_r+0x18>
 8004c7c:	f7fd fa90 	bl	80021a0 <__sinit>
 8004c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c82:	07d9      	lsls	r1, r3, #31
 8004c84:	d405      	bmi.n	8004c92 <_vfiprintf_r+0x2a>
 8004c86:	89ab      	ldrh	r3, [r5, #12]
 8004c88:	059a      	lsls	r2, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_vfiprintf_r+0x2a>
 8004c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c8e:	f7fd fb9a 	bl	80023c6 <__retarget_lock_acquire_recursive>
 8004c92:	89ab      	ldrh	r3, [r5, #12]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	d501      	bpl.n	8004c9c <_vfiprintf_r+0x34>
 8004c98:	692b      	ldr	r3, [r5, #16]
 8004c9a:	b99b      	cbnz	r3, 8004cc4 <_vfiprintf_r+0x5c>
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f000 f93a 	bl	8004f18 <__swsetup_r>
 8004ca4:	b170      	cbz	r0, 8004cc4 <_vfiprintf_r+0x5c>
 8004ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ca8:	07dc      	lsls	r4, r3, #31
 8004caa:	d504      	bpl.n	8004cb6 <_vfiprintf_r+0x4e>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	b01d      	add	sp, #116	; 0x74
 8004cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb6:	89ab      	ldrh	r3, [r5, #12]
 8004cb8:	0598      	lsls	r0, r3, #22
 8004cba:	d4f7      	bmi.n	8004cac <_vfiprintf_r+0x44>
 8004cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cbe:	f7fd fb83 	bl	80023c8 <__retarget_lock_release_recursive>
 8004cc2:	e7f3      	b.n	8004cac <_vfiprintf_r+0x44>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc8:	2320      	movs	r3, #32
 8004cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cce:	2330      	movs	r3, #48	; 0x30
 8004cd0:	f04f 0901 	mov.w	r9, #1
 8004cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004e88 <_vfiprintf_r+0x220>
 8004cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ce0:	4623      	mov	r3, r4
 8004ce2:	469a      	mov	sl, r3
 8004ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ce8:	b10a      	cbz	r2, 8004cee <_vfiprintf_r+0x86>
 8004cea:	2a25      	cmp	r2, #37	; 0x25
 8004cec:	d1f9      	bne.n	8004ce2 <_vfiprintf_r+0x7a>
 8004cee:	ebba 0b04 	subs.w	fp, sl, r4
 8004cf2:	d00b      	beq.n	8004d0c <_vfiprintf_r+0xa4>
 8004cf4:	465b      	mov	r3, fp
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7ff ffa2 	bl	8004c44 <__sfputs_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	f000 80a9 	beq.w	8004e58 <_vfiprintf_r+0x1f0>
 8004d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d08:	445a      	add	r2, fp
 8004d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80a1 	beq.w	8004e58 <_vfiprintf_r+0x1f0>
 8004d16:	2300      	movs	r3, #0
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d20:	f10a 0a01 	add.w	sl, sl, #1
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	9307      	str	r3, [sp, #28]
 8004d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d2e:	4654      	mov	r4, sl
 8004d30:	2205      	movs	r2, #5
 8004d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d36:	4854      	ldr	r0, [pc, #336]	; (8004e88 <_vfiprintf_r+0x220>)
 8004d38:	f7fe feae 	bl	8003a98 <memchr>
 8004d3c:	9a04      	ldr	r2, [sp, #16]
 8004d3e:	b9d8      	cbnz	r0, 8004d78 <_vfiprintf_r+0x110>
 8004d40:	06d1      	lsls	r1, r2, #27
 8004d42:	bf44      	itt	mi
 8004d44:	2320      	movmi	r3, #32
 8004d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d4a:	0713      	lsls	r3, r2, #28
 8004d4c:	bf44      	itt	mi
 8004d4e:	232b      	movmi	r3, #43	; 0x2b
 8004d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d54:	f89a 3000 	ldrb.w	r3, [sl]
 8004d58:	2b2a      	cmp	r3, #42	; 0x2a
 8004d5a:	d015      	beq.n	8004d88 <_vfiprintf_r+0x120>
 8004d5c:	4654      	mov	r4, sl
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f04f 0c0a 	mov.w	ip, #10
 8004d64:	9a07      	ldr	r2, [sp, #28]
 8004d66:	4621      	mov	r1, r4
 8004d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d6c:	3b30      	subs	r3, #48	; 0x30
 8004d6e:	2b09      	cmp	r3, #9
 8004d70:	d94d      	bls.n	8004e0e <_vfiprintf_r+0x1a6>
 8004d72:	b1b0      	cbz	r0, 8004da2 <_vfiprintf_r+0x13a>
 8004d74:	9207      	str	r2, [sp, #28]
 8004d76:	e014      	b.n	8004da2 <_vfiprintf_r+0x13a>
 8004d78:	eba0 0308 	sub.w	r3, r0, r8
 8004d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d80:	4313      	orrs	r3, r2
 8004d82:	46a2      	mov	sl, r4
 8004d84:	9304      	str	r3, [sp, #16]
 8004d86:	e7d2      	b.n	8004d2e <_vfiprintf_r+0xc6>
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	1d19      	adds	r1, r3, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	9103      	str	r1, [sp, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bfbb      	ittet	lt
 8004d94:	425b      	neglt	r3, r3
 8004d96:	f042 0202 	orrlt.w	r2, r2, #2
 8004d9a:	9307      	strge	r3, [sp, #28]
 8004d9c:	9307      	strlt	r3, [sp, #28]
 8004d9e:	bfb8      	it	lt
 8004da0:	9204      	strlt	r2, [sp, #16]
 8004da2:	7823      	ldrb	r3, [r4, #0]
 8004da4:	2b2e      	cmp	r3, #46	; 0x2e
 8004da6:	d10c      	bne.n	8004dc2 <_vfiprintf_r+0x15a>
 8004da8:	7863      	ldrb	r3, [r4, #1]
 8004daa:	2b2a      	cmp	r3, #42	; 0x2a
 8004dac:	d134      	bne.n	8004e18 <_vfiprintf_r+0x1b0>
 8004dae:	9b03      	ldr	r3, [sp, #12]
 8004db0:	3402      	adds	r4, #2
 8004db2:	1d1a      	adds	r2, r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	9203      	str	r2, [sp, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bfb8      	it	lt
 8004dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dc0:	9305      	str	r3, [sp, #20]
 8004dc2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e8c <_vfiprintf_r+0x224>
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	4650      	mov	r0, sl
 8004dca:	7821      	ldrb	r1, [r4, #0]
 8004dcc:	f7fe fe64 	bl	8003a98 <memchr>
 8004dd0:	b138      	cbz	r0, 8004de2 <_vfiprintf_r+0x17a>
 8004dd2:	2240      	movs	r2, #64	; 0x40
 8004dd4:	9b04      	ldr	r3, [sp, #16]
 8004dd6:	eba0 000a 	sub.w	r0, r0, sl
 8004dda:	4082      	lsls	r2, r0
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	3401      	adds	r4, #1
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de6:	2206      	movs	r2, #6
 8004de8:	4829      	ldr	r0, [pc, #164]	; (8004e90 <_vfiprintf_r+0x228>)
 8004dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dee:	f7fe fe53 	bl	8003a98 <memchr>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d03f      	beq.n	8004e76 <_vfiprintf_r+0x20e>
 8004df6:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <_vfiprintf_r+0x22c>)
 8004df8:	bb1b      	cbnz	r3, 8004e42 <_vfiprintf_r+0x1da>
 8004dfa:	9b03      	ldr	r3, [sp, #12]
 8004dfc:	3307      	adds	r3, #7
 8004dfe:	f023 0307 	bic.w	r3, r3, #7
 8004e02:	3308      	adds	r3, #8
 8004e04:	9303      	str	r3, [sp, #12]
 8004e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e08:	443b      	add	r3, r7
 8004e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0c:	e768      	b.n	8004ce0 <_vfiprintf_r+0x78>
 8004e0e:	460c      	mov	r4, r1
 8004e10:	2001      	movs	r0, #1
 8004e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e16:	e7a6      	b.n	8004d66 <_vfiprintf_r+0xfe>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f04f 0c0a 	mov.w	ip, #10
 8004e1e:	4619      	mov	r1, r3
 8004e20:	3401      	adds	r4, #1
 8004e22:	9305      	str	r3, [sp, #20]
 8004e24:	4620      	mov	r0, r4
 8004e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e2a:	3a30      	subs	r2, #48	; 0x30
 8004e2c:	2a09      	cmp	r2, #9
 8004e2e:	d903      	bls.n	8004e38 <_vfiprintf_r+0x1d0>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0c6      	beq.n	8004dc2 <_vfiprintf_r+0x15a>
 8004e34:	9105      	str	r1, [sp, #20]
 8004e36:	e7c4      	b.n	8004dc2 <_vfiprintf_r+0x15a>
 8004e38:	4604      	mov	r4, r0
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e40:	e7f0      	b.n	8004e24 <_vfiprintf_r+0x1bc>
 8004e42:	ab03      	add	r3, sp, #12
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	462a      	mov	r2, r5
 8004e48:	4630      	mov	r0, r6
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <_vfiprintf_r+0x230>)
 8004e4c:	a904      	add	r1, sp, #16
 8004e4e:	f3af 8000 	nop.w
 8004e52:	4607      	mov	r7, r0
 8004e54:	1c78      	adds	r0, r7, #1
 8004e56:	d1d6      	bne.n	8004e06 <_vfiprintf_r+0x19e>
 8004e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e5a:	07d9      	lsls	r1, r3, #31
 8004e5c:	d405      	bmi.n	8004e6a <_vfiprintf_r+0x202>
 8004e5e:	89ab      	ldrh	r3, [r5, #12]
 8004e60:	059a      	lsls	r2, r3, #22
 8004e62:	d402      	bmi.n	8004e6a <_vfiprintf_r+0x202>
 8004e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e66:	f7fd faaf 	bl	80023c8 <__retarget_lock_release_recursive>
 8004e6a:	89ab      	ldrh	r3, [r5, #12]
 8004e6c:	065b      	lsls	r3, r3, #25
 8004e6e:	f53f af1d 	bmi.w	8004cac <_vfiprintf_r+0x44>
 8004e72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e74:	e71c      	b.n	8004cb0 <_vfiprintf_r+0x48>
 8004e76:	ab03      	add	r3, sp, #12
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <_vfiprintf_r+0x230>)
 8004e80:	a904      	add	r1, sp, #16
 8004e82:	f7fe fc01 	bl	8003688 <_printf_i>
 8004e86:	e7e4      	b.n	8004e52 <_vfiprintf_r+0x1ea>
 8004e88:	08005329 	.word	0x08005329
 8004e8c:	0800532f 	.word	0x0800532f
 8004e90:	08005333 	.word	0x08005333
 8004e94:	00000000 	.word	0x00000000
 8004e98:	08004c45 	.word	0x08004c45

08004e9c <__swbuf_r>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	460e      	mov	r6, r1
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	b118      	cbz	r0, 8004eae <__swbuf_r+0x12>
 8004ea6:	6a03      	ldr	r3, [r0, #32]
 8004ea8:	b90b      	cbnz	r3, 8004eae <__swbuf_r+0x12>
 8004eaa:	f7fd f979 	bl	80021a0 <__sinit>
 8004eae:	69a3      	ldr	r3, [r4, #24]
 8004eb0:	60a3      	str	r3, [r4, #8]
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	071a      	lsls	r2, r3, #28
 8004eb6:	d525      	bpl.n	8004f04 <__swbuf_r+0x68>
 8004eb8:	6923      	ldr	r3, [r4, #16]
 8004eba:	b31b      	cbz	r3, 8004f04 <__swbuf_r+0x68>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	6922      	ldr	r2, [r4, #16]
 8004ec0:	b2f6      	uxtb	r6, r6
 8004ec2:	1a98      	subs	r0, r3, r2
 8004ec4:	6963      	ldr	r3, [r4, #20]
 8004ec6:	4637      	mov	r7, r6
 8004ec8:	4283      	cmp	r3, r0
 8004eca:	dc04      	bgt.n	8004ed6 <__swbuf_r+0x3a>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f7fe fd7e 	bl	80039d0 <_fflush_r>
 8004ed4:	b9e0      	cbnz	r0, 8004f10 <__swbuf_r+0x74>
 8004ed6:	68a3      	ldr	r3, [r4, #8]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	60a3      	str	r3, [r4, #8]
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	6022      	str	r2, [r4, #0]
 8004ee2:	701e      	strb	r6, [r3, #0]
 8004ee4:	6962      	ldr	r2, [r4, #20]
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d004      	beq.n	8004ef6 <__swbuf_r+0x5a>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	07db      	lsls	r3, r3, #31
 8004ef0:	d506      	bpl.n	8004f00 <__swbuf_r+0x64>
 8004ef2:	2e0a      	cmp	r6, #10
 8004ef4:	d104      	bne.n	8004f00 <__swbuf_r+0x64>
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f7fe fd69 	bl	80039d0 <_fflush_r>
 8004efe:	b938      	cbnz	r0, 8004f10 <__swbuf_r+0x74>
 8004f00:	4638      	mov	r0, r7
 8004f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f806 	bl	8004f18 <__swsetup_r>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0d5      	beq.n	8004ebc <__swbuf_r+0x20>
 8004f10:	f04f 37ff 	mov.w	r7, #4294967295
 8004f14:	e7f4      	b.n	8004f00 <__swbuf_r+0x64>
	...

08004f18 <__swsetup_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <__swsetup_r+0xac>)
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	460c      	mov	r4, r1
 8004f22:	b118      	cbz	r0, 8004f2c <__swsetup_r+0x14>
 8004f24:	6a03      	ldr	r3, [r0, #32]
 8004f26:	b90b      	cbnz	r3, 8004f2c <__swsetup_r+0x14>
 8004f28:	f7fd f93a 	bl	80021a0 <__sinit>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f32:	0718      	lsls	r0, r3, #28
 8004f34:	d422      	bmi.n	8004f7c <__swsetup_r+0x64>
 8004f36:	06d9      	lsls	r1, r3, #27
 8004f38:	d407      	bmi.n	8004f4a <__swsetup_r+0x32>
 8004f3a:	2309      	movs	r3, #9
 8004f3c:	602b      	str	r3, [r5, #0]
 8004f3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f42:	f04f 30ff 	mov.w	r0, #4294967295
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	e034      	b.n	8004fb4 <__swsetup_r+0x9c>
 8004f4a:	0758      	lsls	r0, r3, #29
 8004f4c:	d512      	bpl.n	8004f74 <__swsetup_r+0x5c>
 8004f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f50:	b141      	cbz	r1, 8004f64 <__swsetup_r+0x4c>
 8004f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f56:	4299      	cmp	r1, r3
 8004f58:	d002      	beq.n	8004f60 <__swsetup_r+0x48>
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f7fd fa3a 	bl	80023d4 <_free_r>
 8004f60:	2300      	movs	r3, #0
 8004f62:	6363      	str	r3, [r4, #52]	; 0x34
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	f043 0308 	orr.w	r3, r3, #8
 8004f7a:	81a3      	strh	r3, [r4, #12]
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	b94b      	cbnz	r3, 8004f94 <__swsetup_r+0x7c>
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8a:	d003      	beq.n	8004f94 <__swsetup_r+0x7c>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 f883 	bl	800509a <__smakebuf_r>
 8004f94:	89a0      	ldrh	r0, [r4, #12]
 8004f96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f9a:	f010 0301 	ands.w	r3, r0, #1
 8004f9e:	d00a      	beq.n	8004fb6 <__swsetup_r+0x9e>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60a3      	str	r3, [r4, #8]
 8004fa4:	6963      	ldr	r3, [r4, #20]
 8004fa6:	425b      	negs	r3, r3
 8004fa8:	61a3      	str	r3, [r4, #24]
 8004faa:	6923      	ldr	r3, [r4, #16]
 8004fac:	b943      	cbnz	r3, 8004fc0 <__swsetup_r+0xa8>
 8004fae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fb2:	d1c4      	bne.n	8004f3e <__swsetup_r+0x26>
 8004fb4:	bd38      	pop	{r3, r4, r5, pc}
 8004fb6:	0781      	lsls	r1, r0, #30
 8004fb8:	bf58      	it	pl
 8004fba:	6963      	ldrpl	r3, [r4, #20]
 8004fbc:	60a3      	str	r3, [r4, #8]
 8004fbe:	e7f4      	b.n	8004faa <__swsetup_r+0x92>
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	e7f7      	b.n	8004fb4 <__swsetup_r+0x9c>
 8004fc4:	20000064 	.word	0x20000064

08004fc8 <_raise_r>:
 8004fc8:	291f      	cmp	r1, #31
 8004fca:	b538      	push	{r3, r4, r5, lr}
 8004fcc:	4604      	mov	r4, r0
 8004fce:	460d      	mov	r5, r1
 8004fd0:	d904      	bls.n	8004fdc <_raise_r+0x14>
 8004fd2:	2316      	movs	r3, #22
 8004fd4:	6003      	str	r3, [r0, #0]
 8004fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004fde:	b112      	cbz	r2, 8004fe6 <_raise_r+0x1e>
 8004fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fe4:	b94b      	cbnz	r3, 8004ffa <_raise_r+0x32>
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f830 	bl	800504c <_getpid_r>
 8004fec:	462a      	mov	r2, r5
 8004fee:	4601      	mov	r1, r0
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ff6:	f000 b817 	b.w	8005028 <_kill_r>
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d00a      	beq.n	8005014 <_raise_r+0x4c>
 8004ffe:	1c59      	adds	r1, r3, #1
 8005000:	d103      	bne.n	800500a <_raise_r+0x42>
 8005002:	2316      	movs	r3, #22
 8005004:	6003      	str	r3, [r0, #0]
 8005006:	2001      	movs	r0, #1
 8005008:	e7e7      	b.n	8004fda <_raise_r+0x12>
 800500a:	2400      	movs	r4, #0
 800500c:	4628      	mov	r0, r5
 800500e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005012:	4798      	blx	r3
 8005014:	2000      	movs	r0, #0
 8005016:	e7e0      	b.n	8004fda <_raise_r+0x12>

08005018 <raise>:
 8005018:	4b02      	ldr	r3, [pc, #8]	; (8005024 <raise+0xc>)
 800501a:	4601      	mov	r1, r0
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	f7ff bfd3 	b.w	8004fc8 <_raise_r>
 8005022:	bf00      	nop
 8005024:	20000064 	.word	0x20000064

08005028 <_kill_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	2300      	movs	r3, #0
 800502c:	4d06      	ldr	r5, [pc, #24]	; (8005048 <_kill_r+0x20>)
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	f7fb ffc5 	bl	8000fc4 <_kill>
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	d102      	bne.n	8005044 <_kill_r+0x1c>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	b103      	cbz	r3, 8005044 <_kill_r+0x1c>
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	bf00      	nop
 8005048:	2000036c 	.word	0x2000036c

0800504c <_getpid_r>:
 800504c:	f7fb bfb3 	b.w	8000fb6 <_getpid>

08005050 <__swhatbuf_r>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	460c      	mov	r4, r1
 8005054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005058:	4615      	mov	r5, r2
 800505a:	2900      	cmp	r1, #0
 800505c:	461e      	mov	r6, r3
 800505e:	b096      	sub	sp, #88	; 0x58
 8005060:	da0c      	bge.n	800507c <__swhatbuf_r+0x2c>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	2100      	movs	r1, #0
 8005066:	f013 0f80 	tst.w	r3, #128	; 0x80
 800506a:	bf0c      	ite	eq
 800506c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005070:	2340      	movne	r3, #64	; 0x40
 8005072:	2000      	movs	r0, #0
 8005074:	6031      	str	r1, [r6, #0]
 8005076:	602b      	str	r3, [r5, #0]
 8005078:	b016      	add	sp, #88	; 0x58
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	466a      	mov	r2, sp
 800507e:	f000 f849 	bl	8005114 <_fstat_r>
 8005082:	2800      	cmp	r0, #0
 8005084:	dbed      	blt.n	8005062 <__swhatbuf_r+0x12>
 8005086:	9901      	ldr	r1, [sp, #4]
 8005088:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800508c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005090:	4259      	negs	r1, r3
 8005092:	4159      	adcs	r1, r3
 8005094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005098:	e7eb      	b.n	8005072 <__swhatbuf_r+0x22>

0800509a <__smakebuf_r>:
 800509a:	898b      	ldrh	r3, [r1, #12]
 800509c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800509e:	079d      	lsls	r5, r3, #30
 80050a0:	4606      	mov	r6, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	d507      	bpl.n	80050b6 <__smakebuf_r+0x1c>
 80050a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	6123      	str	r3, [r4, #16]
 80050ae:	2301      	movs	r3, #1
 80050b0:	6163      	str	r3, [r4, #20]
 80050b2:	b002      	add	sp, #8
 80050b4:	bd70      	pop	{r4, r5, r6, pc}
 80050b6:	466a      	mov	r2, sp
 80050b8:	ab01      	add	r3, sp, #4
 80050ba:	f7ff ffc9 	bl	8005050 <__swhatbuf_r>
 80050be:	9900      	ldr	r1, [sp, #0]
 80050c0:	4605      	mov	r5, r0
 80050c2:	4630      	mov	r0, r6
 80050c4:	f7fd f9ee 	bl	80024a4 <_malloc_r>
 80050c8:	b948      	cbnz	r0, 80050de <__smakebuf_r+0x44>
 80050ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ce:	059a      	lsls	r2, r3, #22
 80050d0:	d4ef      	bmi.n	80050b2 <__smakebuf_r+0x18>
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	f043 0302 	orr.w	r3, r3, #2
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	e7e3      	b.n	80050a6 <__smakebuf_r+0xc>
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	6020      	str	r0, [r4, #0]
 80050e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	9b00      	ldr	r3, [sp, #0]
 80050ea:	6120      	str	r0, [r4, #16]
 80050ec:	6163      	str	r3, [r4, #20]
 80050ee:	9b01      	ldr	r3, [sp, #4]
 80050f0:	b15b      	cbz	r3, 800510a <__smakebuf_r+0x70>
 80050f2:	4630      	mov	r0, r6
 80050f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050f8:	f000 f81e 	bl	8005138 <_isatty_r>
 80050fc:	b128      	cbz	r0, 800510a <__smakebuf_r+0x70>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	f023 0303 	bic.w	r3, r3, #3
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	431d      	orrs	r5, r3
 800510e:	81a5      	strh	r5, [r4, #12]
 8005110:	e7cf      	b.n	80050b2 <__smakebuf_r+0x18>
	...

08005114 <_fstat_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	2300      	movs	r3, #0
 8005118:	4d06      	ldr	r5, [pc, #24]	; (8005134 <_fstat_r+0x20>)
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	4611      	mov	r1, r2
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	f7fb ffad 	bl	8001080 <_fstat>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d102      	bne.n	8005130 <_fstat_r+0x1c>
 800512a:	682b      	ldr	r3, [r5, #0]
 800512c:	b103      	cbz	r3, 8005130 <_fstat_r+0x1c>
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	bf00      	nop
 8005134:	2000036c 	.word	0x2000036c

08005138 <_isatty_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	2300      	movs	r3, #0
 800513c:	4d05      	ldr	r5, [pc, #20]	; (8005154 <_isatty_r+0x1c>)
 800513e:	4604      	mov	r4, r0
 8005140:	4608      	mov	r0, r1
 8005142:	602b      	str	r3, [r5, #0]
 8005144:	f7fb ffab 	bl	800109e <_isatty>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_isatty_r+0x1a>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_isatty_r+0x1a>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	2000036c 	.word	0x2000036c

08005158 <_init>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr

08005164 <_fini>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr
